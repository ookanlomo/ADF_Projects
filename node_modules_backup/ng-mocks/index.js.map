{"version":3,"file":"index.js","mappings":"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","sources":["webpack://ng-mocks/webpack/universalModuleDefinition","webpack://ng-mocks/./libs/ng-mocks/src/index.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/core.config.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/core.def-stack.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/core.define-property.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/core.form.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/core.helpers.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/core.injector.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/core.reflect.body-catch.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/core.reflect.directive-resolve.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/core.reflect.meta.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/core.reflect.module-resolve.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/core.reflect.parameters-resolve.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/core.reflect.pipe-resolve.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/core.reflect.provided-in.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/core.tokens.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/decorate.inputs.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/decorate.mock.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/decorate.outputs.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/decorate.queries.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/error.empty-def.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/error.jest-mock.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/error.missing-decorators.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.directive-io-build.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.directive-io-parse.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.extract-deps.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.extract-forward-ref.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.get-global.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.get-mocked-ng-def-of.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.get-name.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.get-ng-type.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.get-source-of-mock.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.get-type.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.import-exists.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.is-jest-mock.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.is-mock-control-value-accessor.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.is-mock-ng-def.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.is-mock-of.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.is-mock-validator.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.is-mock.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.is-mocked-ng-def-of.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.is-ng-def.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.is-ng-injection-token.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.is-ng-module-def-with-providers.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.is-ng-type.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.is-standalone.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.iterate-declaration.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/mock-control-value-accessor-proxy.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/mock-control-value-accessor.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/mock.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/ng-mocks-global-overrides.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/ng-mocks-stack.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/ng-mocks-universe.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/func.extract-tokens.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/mock-builder-stash.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/mock-builder.performance.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/mock-builder.promise.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/mock-builder.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/performance/are-equal-config-params.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/performance/are-equal-maps.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/performance/are-equal-providers.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/performance/are-equal-sets.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/performance/equal-render-configs.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/performance/equal-render-defs.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/performance/equal-variables.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/performance/get-empty-config.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/performance/required-metadata.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/add-def-to-root-provider-parameters.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/add-requested-providers.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/apply-platform-modules.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/check-root-provider-dependency.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/create-ng-mocks-overrides-token.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/create-ng-mocks-token.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/create-ng-mocks-touches-token.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/extract-dep.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/get-override-def.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/get-root-provider-parameters.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/get-root-providers-data.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/handle-entry-components.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/handle-provided-in-dependency.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/handle-root-providers.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/init-exclude-def.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/init-keep-def.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/init-mock-declarations.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/init-module.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/init-modules.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/init-ng-modules.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/init-replace-def.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/init-universe.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/parse-mock-arguments.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/parse-provider.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/skip-dep.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/skip-override.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/skip-root-provider-dependency.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/try-mock-declaration.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/try-mock-provider.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-component/mock-component.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-component/render/generate-template.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-component/render/get-key.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-declaration/mock-declaration.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-directive/mock-directive.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/crawl-by-attribute-value.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/crawl-by-attribute.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/crawl-by-declaration.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/crawl-by-id.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/crawl-by-tag-name.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/detect-attribute-in-selectors.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/detect-crawler.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/detect-selectors-from-node.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/detect-tag-name-in-selectors.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/detect-text-node.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/el-def-compare.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/el-def-get-node.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/el-def-get-parent.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/func.get-public-provider-keys.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/func.is-valid-reveal-selector.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/func.parse-inputs-and-requires-attributes.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/mock-helper.crawl.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/mock-helper.reveal-all.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/mock-helper.reveal.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/nested-check-children.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/nested-check-parent.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/nested-check.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/cva/func.get-vca.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/cva/mock-helper.change.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/cva/mock-helper.touch.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/events/mock-helper.click.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/events/mock-helper.event.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/events/mock-helper.trigger.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/find-instance/func.is-valid-find-instance-selector.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/find-instance/mock-helper.find-instance.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/find-instance/mock-helper.find-instances.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/find/func.parse-find-args.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/find/func.parse-find-term.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/find/mock-helper.find-all.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/find/mock-helper.find.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/format/format-handler.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/format/handle-array.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/format/handle-text.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/format/is-debug-node.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/format/is-fixture.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/format/is-html-element.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/format/is-text.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/format/mock-helper.format-html.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/format/mock-helper.format-text.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/func.get-from-node-element.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/func.get-from-node-injector.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/func.get-from-node-ivy.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/func.get-from-node-scan.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/func.get-from-node-standard.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/func.get-from-node.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/func.get-last-fixture.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/func.global-prepare.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/func.parse-find-args-name.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/func.parse-find-args.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/func.parse-provider-tokens-directives.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.attributes.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.auto-spy.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.console-ignore.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.console-throw.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.console.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.default-config.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.default-mock.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.faster-install.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.faster.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.flush-test-bed.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.get.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.global-exclude.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.global-keep.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.global-mock.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.global-replace.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.global-wipe.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.guts.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.input.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.object.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.output.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.reset.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.stub-member.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.stub.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/render/func.find-deep.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/render/func.parse-template.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/render/mock-helper.hide.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/render/mock-helper.render.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/template-ref/detect-crawler.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/template-ref/detect-template-ref.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/template-ref/func.is-valid-template-ref-selector.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/template-ref/mock-helper.find-template-ref.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/template-ref/mock-helper.find-template-refs.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-instance/mock-instance-apply.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-instance/mock-instance-forgot-reset.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-instance/mock-instance.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-module/create-resolvers.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-module/mark-providers.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-module/mock-module.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-module/mock-ng-def.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-pipe/mock-pipe.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-provider/mock-provider.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-render/func.create-wrapper.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-render/func.generate-template.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-render/func.install-prop-reader.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-render/func.reflect-template.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-render/mock-render-factory.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-render/mock-render.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-service/check.is-class.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-service/check.is-func.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-service/check.is-inst.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-service/helper.create-clone.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-service/helper.create-mock-from-prototype.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-service/helper.define-property-descriptor.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-service/helper.extract-methods-from-prototype.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-service/helper.extract-properties-from-prototype.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-service/helper.extract-property-descriptor.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-service/helper.mock-function.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-service/helper.mock-service.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-service/helper.mock.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-service/helper.replace-with-mocks.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-service/helper.resolve-provider.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-service/helper.use-factory.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-service/mock-provider.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-service/mock-service.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock/clone-providers.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock/decorate-declaration.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock/get-mock.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock/return-cached-mock.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock/to-existing-provider.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock/to-factory-provider.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/resolve/collect-declarations.ts","webpack://ng-mocks/external umd \"@angular/common\"","webpack://ng-mocks/external umd \"@angular/core\"","webpack://ng-mocks/external umd \"@angular/core/testing\"","webpack://ng-mocks/external umd \"@angular/forms\"","webpack://ng-mocks/external umd \"@angular/platform-browser\"","webpack://ng-mocks/webpack/bootstrap","webpack://ng-mocks/webpack/runtime/global","webpack://ng-mocks/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"@angular/core\"), require(\"@angular/core/testing\"), require(\"@angular/forms\"), require(\"@angular/common\"), require(\"@angular/platform-browser\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"@angular/core\", \"@angular/core/testing\", \"@angular/forms\", \"@angular/common\", \"@angular/platform-browser\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"@angular/core\"), require(\"@angular/core/testing\"), require(\"@angular/forms\"), require(\"@angular/common\"), require(\"@angular/platform-browser\")) : factory(root[\"@angular/core\"], root[\"@angular/core/testing\"], root[\"@angular/forms\"], root[\"@angular/common\"], root[\"@angular/platform-browser\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function(__WEBPACK_EXTERNAL_MODULE__8900__, __WEBPACK_EXTERNAL_MODULE__1087__, __WEBPACK_EXTERNAL_MODULE__7161__, __WEBPACK_EXTERNAL_MODULE__5848__, __WEBPACK_EXTERNAL_MODULE__3046__) {\nreturn ","// istanbul ignore file\n\nimport './lib/common/ng-mocks-stack';\nimport './lib/common/ng-mocks-global-overrides';\n\nexport * from './lib/common/core.tokens';\n\nexport { getTestBedInjection, getInjection } from './lib/common/core.helpers';\n\nexport { getMockedNgDefOf } from './lib/common/func.get-mocked-ng-def-of';\nexport { getSourceOfMock } from './lib/common/func.get-source-of-mock';\nexport { isMockControlValueAccessor } from './lib/common/func.is-mock-control-value-accessor';\nexport { isMockNgDef } from './lib/common/func.is-mock-ng-def';\nexport { isMockOf } from './lib/common/func.is-mock-of';\nexport { isMockValidator } from './lib/common/func.is-mock-validator';\nexport { isMockedNgDefOf } from './lib/common/func.is-mocked-ng-def-of';\nexport { isNgDef } from './lib/common/func.is-ng-def';\nexport { isNgInjectionToken } from './lib/common/func.is-ng-injection-token';\n\nexport { Mock } from './lib/common/mock';\nexport {\n  MockControlValueAccessor,\n  MockValidator,\n  LegacyControlValueAccessor,\n} from './lib/common/mock-control-value-accessor';\nexport { MockInstance, MockReset } from './lib/mock-instance/mock-instance';\n\nexport { MockBuilder } from './lib/mock-builder/mock-builder';\nexport {\n  IMockBuilder,\n  IMockBuilderConfig,\n  IMockBuilderConfigAll,\n  IMockBuilderConfigComponent,\n  IMockBuilderConfigDirective,\n  IMockBuilderConfigModule,\n  IMockBuilderResult,\n} from './lib/mock-builder/types';\n\nexport { MockModule } from './lib/mock-module/mock-module';\nexport { MockedModule } from './lib/mock-module/types';\n\nexport { MockComponent, MockComponents } from './lib/mock-component/mock-component';\nexport { MockedComponent } from './lib/mock-component/types';\n\nexport { MockDirective, MockDirectives } from './lib/mock-directive/mock-directive';\nexport { MockedDirective } from './lib/mock-directive/types';\n\nexport { MockPipe, MockPipes } from './lib/mock-pipe/mock-pipe';\nexport { MockedPipe } from './lib/mock-pipe/types';\n\nexport { MockDeclaration, MockDeclarations } from './lib/mock-declaration/mock-declaration';\n\nexport { MockProvider, MockProviders } from './lib/mock-provider/mock-provider';\n\nexport { MockService } from './lib/mock-service/mock-service';\n\nexport { ngMocks } from './lib/mock-helper/mock-helper';\n\nexport { MockRender } from './lib/mock-render/mock-render';\nexport { MockRenderFactory } from './lib/mock-render/mock-render-factory';\nexport * from './lib/mock-render/types';\n\nexport * from './lib/mock-service/types';\n","export default {\n  flags: ['cacheModule', 'cacheComponent', 'cacheDirective', 'cacheProvider', 'correctModuleExports'],\n  mockRenderCacheSize: 25,\n  neverMockModule: [\n    'ApplicationModule',\n    'CommonModule',\n    'BrowserModule',\n\n    // Angular 16 adds underscores\n    '_ApplicationModule',\n    '_CommonModule',\n    '_BrowserModule',\n  ],\n  neverMockProvidedFunction: [\n    'DomRendererFactory2',\n    'EventManager',\n    'Injector', // ivy only\n    'RendererFactory2',\n\n    // https://github.com/help-me-mom/ng-mocks/issues/538\n    'Sanitizer',\n    'DomSanitizer',\n    'DomSanitizerImpl',\n\n    // ApplicationModule, A14 made them global at root level\n    'ApplicationInitStatus',\n    'ApplicationRef',\n    'Compiler',\n    'IterableDiffers',\n    'KeyValueDiffers',\n\n    // Angular 16 adds underscores\n    '_DomRendererFactory2',\n    '_EventManager',\n    '_Injector',\n    '_Sanitizer',\n    '_DomSanitizer',\n    '_DomSanitizerImpl',\n    '_ApplicationInitStatus',\n    '_ApplicationRef',\n    '_Compiler',\n    '_IterableDiffers',\n    '_KeyValueDiffers',\n  ],\n  neverMockToken: [\n    'InjectionToken Set Injector scope.', // INJECTOR_SCOPE // ivy only\n    'InjectionToken EventManagerPlugins', // EVENT_MANAGER_PLUGINS\n    'InjectionToken HammerGestureConfig', // HAMMER_GESTURE_CONFIG\n\n    // ApplicationModule, A14 made them global at root level\n    'InjectionToken AppId', // APP_ID\n    'InjectionToken DefaultCurrencyCode', // DEFAULT_CURRENCY_CODE\n    'InjectionToken LocaleId', // LOCALE_ID\n    'InjectionToken SCHEDULER_TOKEN', // SCHEDULER\n  ],\n  onMockBuilderMissingDependency: 'throw',\n  onMockInstanceRestoreNeed: 'warn',\n  onTestBedFlushNeed: 'warn',\n\n  dependencies: [\n    'declarations',\n    'hostDirectives',\n    'entryComponents',\n    'bootstrap',\n    'providers',\n    'viewProviders',\n    'imports',\n    'exports',\n  ] as const,\n};\n","import { mapEntries } from './core.helpers';\n\nexport default class<K, V> {\n  protected stack: Array<Map<K, V>> = [];\n\n  public constructor() {\n    this.push();\n  }\n\n  public push() {\n    this.stack.push(new Map());\n  }\n\n  public pop(): Map<V, V> {\n    return this.stack.pop() ?? new Map();\n  }\n\n  public has(key: K): ReturnType<Map<K, V>['has']> {\n    for (let i = this.stack.length - 1; i >= 0; i -= 1) {\n      if (this.stack[i].has(key)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public get(key: K): ReturnType<Map<K, V>['get']> {\n    for (let i = this.stack.length - 1; i >= 0; i -= 1) {\n      if (this.stack[i].has(key)) {\n        return this.stack[i].get(key);\n      }\n    }\n\n    return undefined;\n  }\n\n  public set(key: K, value: V): this {\n    for (let i = this.stack.length - 1; i >= 0; i -= 1) {\n      this.stack[i].set(key, value);\n    }\n\n    return this;\n  }\n\n  public merge(resolutions: Map<K, V>): this {\n    for (const [key, value] of mapEntries(resolutions)) {\n      this.set(key, value);\n    }\n\n    return this;\n  }\n}\n","import helperMockService from '../mock-service/helper.mock-service';\n\nexport default (instance: any, property: keyof any, value: any, enumerable = false) => {\n  helperMockService.definePropertyDescriptor(instance, property, {\n    configurable: true,\n    enumerable,\n    value,\n    writable: true,\n  });\n};\n","import * as module from '@angular/forms';\n\nconst AbstractControl = module.AbstractControl;\nconst DefaultValueAccessor = module.DefaultValueAccessor;\nconst FormControl = module.FormControl;\nconst FormControlDirective = module.FormControlDirective;\nconst NG_ASYNC_VALIDATORS = module.NG_ASYNC_VALIDATORS;\nconst NG_VALIDATORS = module.NG_VALIDATORS;\nconst NG_VALUE_ACCESSOR = module.NG_VALUE_ACCESSOR;\nconst NgControl = module.NgControl;\nconst NgModel = module.NgModel;\n\nexport default {\n  AbstractControl,\n  DefaultValueAccessor,\n  FormControl,\n  FormControlDirective,\n  NG_ASYNC_VALIDATORS,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  NgControl,\n  NgModel,\n};\n","import { getTestBed } from '@angular/core/testing';\n\nimport coreDefineProperty from './core.define-property';\nimport coreReflectParametersResolve from './core.reflect.parameters-resolve';\nimport { AnyDeclaration, AnyType, Type } from './core.types';\nimport funcGetGlobal from './func.get-global';\nimport funcGetName from './func.get-name';\nimport ngMocksUniverse from './ng-mocks-universe';\n\n/**\n * It will be removed from public interface with the next release: A14\n * Use ngMocks.get(token) instead.\n *\n * @deprecated\n * @internal\n */\nexport const getTestBedInjection = <I>(token: AnyDeclaration<I>): I | undefined => {\n  try {\n    // istanbul ignore next\n    return getInjection(token);\n  } catch {\n    return undefined;\n  }\n};\n\n/**\n * It will be removed from public interface with the next release: A14\n *\n * @deprecated\n * @internal\n */\nexport const getInjection = <I>(token: AnyDeclaration<I>): I => {\n  const testBed: any = getTestBed();\n\n  // istanbul ignore next\n  return testBed.inject ? testBed.inject(token) : testBed.get(token);\n};\n\nexport const flatten = <T>(values: T | T[], result: T[] = []): T[] => {\n  if (Array.isArray(values)) {\n    for (const value of values) {\n      flatten(value, result);\n    }\n  } else {\n    result.push(values);\n  }\n\n  return result;\n};\n\nexport const mapKeys = <T>(set: Map<T, any>): T[] => {\n  const result: T[] = [];\n  // eslint-disable-next-line unicorn/no-array-for-each\n  set.forEach((_, value: T) => result.push(value));\n\n  return result;\n};\n\nexport const mapValues = <T>(set: { forEach(a1: (value: T) => void): void }, destination?: Set<T>): T[] => {\n  const result: T[] = [];\n  if (destination) {\n    // eslint-disable-next-line unicorn/no-array-for-each\n    set.forEach((value: T) => {\n      destination.add(value);\n    });\n  } else {\n    // eslint-disable-next-line unicorn/no-array-for-each\n    set.forEach((value: T) => {\n      result.push(value);\n    });\n  }\n\n  return result;\n};\n\nexport const mapEntries = <K, T>(set: Map<K, T>, destination?: Map<K, T>): Array<[K, T]> => {\n  const result: Array<[K, T]> = [];\n\n  if (destination) {\n    // eslint-disable-next-line unicorn/no-array-for-each\n    set.forEach((value: T, key: K) => destination.set(key, value));\n  } else {\n    // eslint-disable-next-line unicorn/no-array-for-each\n    set.forEach((value: T, key: K) => result.push([key, value]));\n  }\n\n  return result;\n};\n\nconst extractDependencyArray = (deps: any[], set: Set<any>): void => {\n  for (const flag of deps) {\n    const name = flag && typeof flag === 'object' ? flag.ngMetadataName : undefined;\n    if (name === 'Optional' || name === 'SkipSelf' || name === 'Self') {\n      continue;\n    }\n    set.add(flag);\n  }\n};\n\n// Accepts an array of dependencies from providers, skips injections flags,\n// and adds the providers to the set.\nexport const extractDependency = (deps: any[], set?: Set<any>): void => {\n  if (!set) {\n    return;\n  }\n  for (const dep of deps) {\n    if (!Array.isArray(dep)) {\n      set.add(dep);\n      continue;\n    }\n    extractDependencyArray(dep, set);\n  }\n};\n\nexport const extendClassicClass = <I>(base: AnyType<I>): Type<I> => {\n  let child: any;\n  const index = ngMocksUniverse.index();\n\n  const glb = funcGetGlobal();\n  glb.ngMocksParent = base;\n\n  // First we try to eval es2015 style and if it fails to use es5 transpilation in the catch block.\n  // The next step is to respect constructor parameters as the parent class via jitReflector.\n  // istanbul ignore next\n  try {\n    eval(`\n      var glb = typeof window === 'undefined' ? global : window;\n      class MockMiddleware${index} extends glb.ngMocksParent {};\n      glb.ngMocksResult = MockMiddleware${index};\n    `);\n    child = glb.ngMocksResult;\n  } catch {\n    class MockMiddleware extends glb.ngMocksParent {}\n    child = MockMiddleware;\n  } finally {\n    glb.ngMocksResult = undefined;\n    glb.ngMocksParent = undefined;\n  }\n\n  // A16: adding unique property.\n  coreDefineProperty(child.prototype, `__ngMocks_index_${index}`, undefined, false);\n\n  return child;\n};\n\nexport const extendClass = <I>(base: AnyType<I>): Type<I> => {\n  const child: Type<I> = extendClassicClass(base);\n  coreDefineProperty(child, 'name', `MockMiddleware${funcGetName(base)}`, true);\n\n  const parameters = coreReflectParametersResolve(base);\n  if (parameters.length > 0) {\n    coreDefineProperty(child, 'parameters', [...parameters]);\n  }\n\n  return child;\n};\n","import { Injector } from '@angular/core';\n\nimport { getTestBedInjection } from './core.helpers';\n\nconst defaultInjector: any = {};\n\nexport default (declaration: any, injector: Injector = defaultInjector): any => {\n  if (injector === defaultInjector) {\n    return getTestBedInjection(declaration);\n  }\n  try {\n    return injector.get(declaration);\n  } catch {\n    return undefined;\n  }\n};\n","import errorEmptyDef from './error.empty-def';\nimport errorJestMock from './error.jest-mock';\nimport errorMissingDecorators from './error.missing-decorators';\n\nexport default (callback: any) => (def: any) => {\n  errorEmptyDef(def);\n\n  try {\n    return callback(def);\n  } catch {\n    errorJestMock(def);\n    errorMissingDecorators(def);\n  }\n};\n","import { Component, Directive, NgModule } from '@angular/core';\n\nimport collectDeclarations from '../resolve/collect-declarations';\n\nimport coreReflectBodyCatch from './core.reflect.body-catch';\n\nexport default (\n  def: any,\n): Directive &\n  Partial<Component> &\n  NgModule & {\n    hostBindings?: Array<[string, any]>;\n    hostListeners?: Array<[string, any, any]>;\n    imports?: any[];\n    standalone?: boolean;\n  } =>\n  coreReflectBodyCatch((arg: any) => {\n    const declaration = collectDeclarations(arg);\n    if (declaration.Component) {\n      return declaration.Component;\n    }\n    if (declaration.Directive) {\n      return declaration.Directive;\n    }\n\n    throw new Error('Cannot resolve declarations');\n  })(def);\n","import coreReflectDirectiveResolve from './core.reflect.directive-resolve';\nimport coreReflectModuleResolve from './core.reflect.module-resolve';\nimport { isNgDef } from './func.is-ng-def';\n\nexport default (value: any): any => {\n  if (isNgDef(value, 'c')) {\n    return coreReflectDirectiveResolve(value);\n  }\n  if (isNgDef(value, 'd')) {\n    return coreReflectDirectiveResolve(value);\n  }\n  if (isNgDef(value, 'm')) {\n    return coreReflectModuleResolve(value);\n  }\n\n  return undefined;\n};\n","import { NgModule } from '@angular/core';\n\nimport collectDeclarations from '../resolve/collect-declarations';\n\nimport coreReflectBodyCatch from './core.reflect.body-catch';\n\nexport default (def: any): NgModule =>\n  coreReflectBodyCatch((arg: any) => {\n    const declaration = collectDeclarations(arg);\n    if (declaration.NgModule) {\n      return declaration.NgModule;\n    }\n\n    throw new Error('Cannot resolve declarations');\n  })(def);\n","import collectDeclarations from '../resolve/collect-declarations';\n\nexport default (def: any): any[] => {\n  const declaration = collectDeclarations(def);\n\n  return declaration.parameters ?? [];\n};\n","import { Pipe } from '@angular/core';\n\nimport collectDeclarations from '../resolve/collect-declarations';\n\nimport coreReflectBodyCatch from './core.reflect.body-catch';\n\nexport default (def: any): Pipe & { standalone?: boolean } =>\n  coreReflectBodyCatch((arg: any) => {\n    const declaration = collectDeclarations(arg);\n    if (declaration.Pipe) {\n      return declaration.Pipe;\n    }\n\n    throw new Error('Cannot resolve declarations');\n  })(def);\n","import { AnyType } from './core.types';\n\nexport default (declaration: any): undefined | AnyType<any> | string => {\n  if (!declaration || (typeof declaration !== 'object' && typeof declaration !== 'function')) {\n    return undefined;\n  }\n\n  return declaration.ɵprov?.providedIn ?? declaration.ngInjectableDef?.providedIn;\n};\n","import { InjectionToken } from '@angular/core';\nimport { MetadataOverride } from '@angular/core/testing';\n\nimport { AnyType } from './core.types';\n\n/**\n * NG_MOCKS token is a map from a declaration to its mock copy.\n *\n * @internal\n *\n * ```ts\n * const MockClass = TestBed.inject(NG_MOCKS).get(RealClass);\n * ```\n */\nexport const NG_MOCKS = new InjectionToken<Map<any, any>>('NG_MOCKS');\n(NG_MOCKS as any).__ngMocksSkip = true;\n\n/**\n * NG_MOCKS_TOUCHES token is a set of all touched declarations during mock process.\n *\n * @internal\n *\n * ```ts\n * const touched = TestBed.inject(NG_MOCKS_TOUCHES).has(RealClass);\n * ```\n */\nexport const NG_MOCKS_TOUCHES = new InjectionToken<Set<any>>('NG_MOCKS_TOUCHES');\n(NG_MOCKS_TOUCHES as any).__ngMocksSkip = true;\n\n/**\n * NG_MOCKS_OVERRIDES token contains overrides for:\n * - TestBed.overrideModule\n * - TestBed.overrideComponent\n * - TestBed.overrideDirective\n * - TestBed.overrideProvider\n *\n * It is used when there is no way to provide a mock copy and an override is required.\n * For example, if we want to keep a component, but to override one of its local providers.\n *\n * @internal\n */\nexport const NG_MOCKS_OVERRIDES = new InjectionToken<Map<AnyType<any>, MetadataOverride<any>>>('NG_MOCKS_OVERRIDES');\n(NG_MOCKS_OVERRIDES as any).__ngMocksSkip = true;\n\n/**\n * NG_MOCKS_GUARDS token influences on provided guards in MockBuilder.\n * More info by the links below.\n *\n * @see https://ng-mocks.sudo.eu/api/MockBuilder#ng_mocks_guards-token\n * @see https://ng-mocks.sudo.eu/guides/routing-guard\n */\nexport const NG_MOCKS_GUARDS = new InjectionToken<void>('NG_MOCKS_GUARDS');\n(NG_MOCKS_GUARDS as any).__ngMocksSkip = true;\n\n/**\n * NG_MOCKS_RESOLVERS token influences on provided resolvers in MockBuilder.\n * More info by the links below.\n *\n * @see https://ng-mocks.sudo.eu/api/MockBuilder#ng_mocks_resolvers-token\n * @see https://ng-mocks.sudo.eu/guides/routing-resolver\n */\nexport const NG_MOCKS_RESOLVERS = new InjectionToken<void>('NG_MOCKS_RESOLVERS');\n(NG_MOCKS_RESOLVERS as any).__ngMocksSkip = true;\n\n/**\n * NG_MOCKS_INTERCEPTORS token influences on provided interceptors in MockBuilder.\n * More info by the links below.\n *\n * @see https://ng-mocks.sudo.eu/api/MockBuilder#ng_mocks_interceptors-token\n * @see https://ng-mocks.sudo.eu/guides/http-interceptor\n */\nexport const NG_MOCKS_INTERCEPTORS = new InjectionToken<void>('NG_MOCKS_INTERCEPTORS');\n(NG_MOCKS_INTERCEPTORS as any).__ngMocksSkip = true;\n\n/**\n * NG_MOCKS_ROOT_PROVIDERS token influences on root providers in MockBuilder,\n * which aren't provided in specified modules.\n * It helps to mock or keep them automatically.\n *\n * @see https://ng-mocks.sudo.eu/api/MockBuilder#ng_mocks_root_providers-token\n */\nexport const NG_MOCKS_ROOT_PROVIDERS = new InjectionToken<void>('NG_MOCKS_ROOT_PROVIDERS');\n(NG_MOCKS_ROOT_PROVIDERS as any).__ngMocksSkip = true;\n","import { Input } from '@angular/core';\n\nimport { AnyType, DirectiveIo } from './core.types';\nimport funcDirectiveIoBuild from './func.directive-io-build';\nimport funcDirectiveIoParse from './func.directive-io-parse';\n\n// Looks like an A9 bug, that queries from @Component are not processed.\n// Also, we have to pass prototype, not the class.\n// The same issue happens with outputs, but time to time\n// (when I restart tests with refreshing browser manually).\n// https://github.com/help-me-mom/ng-mocks/issues/109\nexport default (cls: AnyType<any>, inputs?: Array<DirectiveIo>, exclude?: string[]) => {\n  // istanbul ignore else\n  if (inputs) {\n    for (const input of inputs) {\n      const { name, alias, required } = funcDirectiveIoParse(input);\n      if (exclude && exclude.indexOf(name) !== -1) {\n        continue;\n      }\n      Input(funcDirectiveIoBuild({ name, alias, required }, true) as never)(cls.prototype, name);\n    }\n  }\n};\n","import coreDefineProperty from './core.define-property';\nimport { AnyType } from './core.types';\nimport funcGetName from './func.get-name';\nimport { ngMocksMockConfig } from './mock';\nimport ngMocksUniverse from './ng-mocks-universe';\n\nexport default (mock: AnyType<any>, source: AnyType<any>, configInput: ngMocksMockConfig = {}): void => {\n  coreDefineProperty(mock, 'mockOf', source);\n  coreDefineProperty(mock, 'nameConstructor', funcGetName(mock));\n  coreDefineProperty(mock, 'name', `MockOf${funcGetName(source)}`, true);\n  const config = ngMocksUniverse.getConfigMock().has(source)\n    ? {\n        ...configInput,\n        config: {\n          ...ngMocksUniverse.getConfigMock().get(source),\n          ...configInput.config,\n        },\n      }\n    : configInput;\n  coreDefineProperty(mock.prototype, '__ngMocksConfig', config);\n};\n","import { Output } from '@angular/core';\n\nimport { AnyType, DirectiveIo } from './core.types';\nimport funcDirectiveIoBuild from './func.directive-io-build';\nimport funcDirectiveIoParse from './func.directive-io-parse';\n\n// Looks like an A9 bug, that queries from @Component are not processed.\n// Also, we have to pass prototype, not the class.\n// The same issue happens with outputs, but time to time\n// (when I restart tests with refreshing browser manually).\n// https://github.com/help-me-mom/ng-mocks/issues/109\nexport default (cls: AnyType<any>, outputs?: Array<DirectiveIo>) => {\n  // istanbul ignore else\n  if (outputs) {\n    for (const output of outputs) {\n      const { name, alias, required } = funcDirectiveIoParse(output);\n      Output(funcDirectiveIoBuild({ name, alias, required }, true) as never)(cls.prototype, name);\n    }\n  }\n};\n","import { ContentChild, ContentChildren, Query, ViewChild, ViewChildren, ViewContainerRef } from '@angular/core';\n\nimport { AnyType } from './core.types';\n\nconst map: any = {\n  ContentChild,\n  ContentChildren,\n  ViewChild,\n  ViewChildren,\n};\n\nconst isInternalKey = (key: string): boolean => {\n  return key.indexOf('__mock') === 0;\n};\n\nconst cloneVcrQuery = (query: Query & { ngMetadataName?: string }) => ({\n  ...query,\n  ngMetadataName: query.ngMetadataName,\n  read: ViewContainerRef,\n});\n\nconst generateFinalQueries = (queries: {\n  [key: string]: Query;\n}): [Array<[string, Query & { ngMetadataName?: string }]>, string[]] => {\n  const final: Array<[string, Query & { ngMetadataName?: string }]> = [];\n  const scanKeys: string[] = [];\n\n  for (const key of Object.keys(queries)) {\n    const query: Query & { ngMetadataName?: string } = queries[key];\n    final.push([key, query]);\n\n    if (!query.isViewQuery && !isInternalKey(key)) {\n      scanKeys.push(key);\n      final.push([`__ngMocksVcr_${key}`, cloneVcrQuery(query)]);\n    }\n  }\n\n  return [final, scanKeys];\n};\n\n// Looks like an A9 bug, that queries from @Component are not processed.\n// Also, we have to pass prototype, not the class.\n// The same issue happens with outputs, but time to time\n// (when I restart tests with refreshing browser manually).\n// https://github.com/help-me-mom/ng-mocks/issues/109\nexport default (cls: AnyType<any>, queries?: { [key: string]: Query }): string[] => {\n  // istanbul ignore if\n  if (!queries) {\n    return [];\n  }\n  const [final, keys] = generateFinalQueries(queries);\n\n  for (const [key, query] of final) {\n    // istanbul ignore else\n    if (query.ngMetadataName) {\n      const decorator = map[query.ngMetadataName];\n      decorator(query.selector, query)(cls.prototype, key);\n    }\n  }\n\n  return keys;\n};\n","export default (def: any): void => {\n  if (!def) {\n    throw new Error(\n      [\n        'undefined / null has been passed into ng-mocks as a declaration / provider.',\n        'Please ensure that the current test file has correct imports:',\n        'imported files exist and imported declarations have been exported in the file.',\n      ].join(' '),\n    );\n  }\n};\n","import funcGetName from './func.get-name';\nimport funcIsJestMock from './func.is-jest-mock';\n\nexport default (def: any): void => {\n  if (funcIsJestMock(def)) {\n    throw new Error(\n      [\n        `ng-mocks got ${funcGetName(def)} which has been already mocked by jest.mock().`,\n        'It is not possible to produce correct mocks for it, because jest.mock() removes Angular decorators.',\n        `To fix this, please avoid jest.mock() on the file which exports ${funcGetName(\n          def,\n        )} or add jest.dontMock() on it.`,\n        'The same should be done for all related dependencies.',\n      ].join(' '),\n    );\n  }\n};\n","import funcGetName from './func.get-name';\n\nexport default (def: any): void => {\n  throw new Error(\n    [\n      `${funcGetName(def)} declaration has been passed into ng-mocks without Angular decorators.`,\n      'Therefore, it cannot be properly handled.',\n      'Highly likely,',\n      typeof jest === 'undefined' ? '' : /* istanbul ignore next */ 'jest.mock() has been used on its file, or',\n      'ng-mocks is imported in production code, or got a class without Angular decoration.',\n      'Otherwise, please create an issue on github: https://github.com/help-me-mom/ng-mocks/issues/new?title=False%20positive%20ng-mocks%20not%20in%20JIT.',\n      'Thank you in advance for support.',\n    ].join(' '),\n  );\n};\n","import { DirectiveIo, DirectiveIoParsed } from './core.types';\n\nexport default function ({ name, alias, required }: DirectiveIoParsed, skipName = false): DirectiveIo {\n  if (required) {\n    return { name, alias, required };\n  }\n  if (!alias || name === alias) {\n    return skipName ? '' : name;\n  }\n\n  return skipName ? alias : `${name}:${alias}`;\n}\n","import { DirectiveIo, DirectiveIoParsed } from './core.types';\n\nexport default function (param: DirectiveIo): DirectiveIoParsed {\n  if (typeof param === 'string') {\n    const [name, alias] = param.split(':').map(v => v.trim());\n\n    if (name === alias || !alias) {\n      return { name };\n    }\n\n    return { name, alias };\n  }\n\n  return param;\n}\n","import collectDeclarations from '../resolve/collect-declarations';\n\nimport coreConfig from './core.config';\nimport { flatten } from './core.helpers';\nimport { AnyDeclaration } from './core.types';\nimport { getNgType } from './func.get-ng-type';\nimport funcGetType from './func.get-type';\n\nexport const funcExtractDeps = (def: any, result: Set<AnyDeclaration<any>>): Set<AnyDeclaration<any>> => {\n  const meta = collectDeclarations(def);\n  const type = getNgType(def);\n  // istanbul ignore if\n  if (!type || type === 'Injectable') {\n    return result;\n  }\n\n  const decorator = meta[type];\n  for (const field of coreConfig.dependencies) {\n    if (!decorator[field]) {\n      continue;\n    }\n\n    for (const item of flatten(decorator[field])) {\n      // istanbul ignore if: it is here for standalone things, however they don't support modules with providers.\n      result.add(funcGetType(item));\n    }\n  }\n\n  return result;\n};\n","// handles forwardRef on useExisting\nexport default (provide: any): any => {\n  if (typeof provide === 'function' && provide.__forward_ref__) {\n    return provide();\n  }\n\n  return provide;\n};\n","export default (): Record<keyof any, any> => {\n  // istanbul ignore if\n  if (typeof window === 'undefined') {\n    return global;\n  }\n\n  return window;\n};\n","import { MockedComponent } from '../mock-component/types';\nimport { MockedDirective } from '../mock-directive/types';\nimport { MockedModule } from '../mock-module/types';\nimport { MockedPipe } from '../mock-pipe/types';\n\nimport coreInjector from './core.injector';\nimport { NG_MOCKS } from './core.tokens';\nimport { AnyType, Type } from './core.types';\nimport funcGetName from './func.get-name';\nimport { isMockedNgDefOf } from './func.is-mocked-ng-def-of';\nimport ngMocksUniverse from './ng-mocks-universe';\n\nconst getMock = (declaration: any, source: any, mocks?: Map<any, any>) => {\n  if (mocks && !mocks.has(source)) {\n    throw new Error(`There is no mock for ${funcGetName(source)}`);\n  }\n  let mock = mocks ? mocks.get(source) : undefined;\n  if (mock === source) {\n    mock = undefined;\n  }\n\n  // If we are not in the MockBuilder env we can rely on the current cache.\n  if (!mock && source !== declaration) {\n    mock = declaration;\n  } else if (!mock && ngMocksUniverse.cacheDeclarations.has(source)) {\n    mock = ngMocksUniverse.cacheDeclarations.get(source);\n  }\n\n  return mock;\n};\n\n/**\n * Returns the mock class of a mock module based on a mock module or a source module.\n * It works in runtime if the module has been mocked.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/getMockedNgDefOf\n *\n * ```ts\n * getMockedNgDefOf(RealModule, 'm'); // returns MockModule\n * getMockedNgDefOf(MockModule, 'm'); // returns MockModule\n * getMockedNgDefOf(ArbitraryClass, 'm'); // throws\n * ```\n */\nexport function getMockedNgDefOf<T>(declaration: AnyType<T>, type: 'm'): Type<MockedModule<T>>;\n\n/**\n * Returns the mock class of a mock component based on a mock component or a source component.\n * It works in runtime if the component has been mocked.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/getMockedNgDefOf\n *\n * ```ts\n * getMockedNgDefOf(RealComponent, 'c'); // returns MockComponent\n * getMockedNgDefOf(MockComponent, 'c'); // returns MockComponent\n * getMockedNgDefOf(ArbitraryClass, 'c'); // throws\n * ```\n */\nexport function getMockedNgDefOf<T>(declaration: AnyType<T>, type: 'c'): Type<MockedComponent<T>>;\n\n/**\n * Returns the mock class of a mock directive based on a mock directive or a source directive.\n * It works in runtime if the directive has been mocked.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/getMockedNgDefOf\n *\n * ```ts\n * getMockedNgDefOf(RealDirective, 'd'); // returns MockDirective\n * getMockedNgDefOf(MockDirective, 'd'); // returns MockDirective\n * getMockedNgDefOf(ArbitraryClass, 'd'); // throws\n * ```\n */\nexport function getMockedNgDefOf<T>(declaration: AnyType<T>, type: 'd'): Type<MockedDirective<T>>;\n\n/**\n * Returns the mock class of a mock pipe based on a mock pipe or a source pipe.\n * It works in runtime if the pipe has been mocked.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/getMockedNgDefOf\n *\n * ```ts\n * getMockedNgDefOf(RealPipe, 'p'); // returns MockPipe\n * getMockedNgDefOf(MockPipe, 'p'); // returns MockPipe\n * getMockedNgDefOf(ArbitraryClass, 'p'); // throws\n * ```\n */\nexport function getMockedNgDefOf<T>(declaration: AnyType<T>, type: 'p'): Type<MockedPipe<T>>;\n\n/**\n * Returns the mock class of a thing based on a mock class or a source class.\n * It works in runtime if the thing has been mocked.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/getMockedNgDefOf\n *\n * ```ts\n * getMockedNgDefOf(RealComponent); // returns MockComponent\n * getMockedNgDefOf(MockPipe); // returns MockPipe\n * getMockedNgDefOf(ArbitraryClass); // throws\n * ```\n */\nexport function getMockedNgDefOf<T>(declaration: AnyType<T>): Type<T>;\n\nexport function getMockedNgDefOf(declaration: any, type?: any): any {\n  const source = declaration.mockOf ?? declaration;\n  const mocks = coreInjector(NG_MOCKS);\n\n  const mock = getMock(declaration, source, mocks);\n  if (mock && !type) {\n    return mock;\n  }\n  if (mock && type && isMockedNgDefOf(mock, source, type)) {\n    return mock;\n  }\n\n  throw new Error(`There is no mock for ${funcGetName(source)}`);\n}\n","const badCharacters = new RegExp('[^0-9a-z]+', 'mgi');\n\nexport default (value: any): string => {\n  let result: string | undefined;\n\n  if (typeof value === 'function' && value.name) {\n    result = value.name;\n  } else if (typeof value === 'function') {\n    result = 'arrowFunction';\n  } else if (typeof value === 'object' && value && value.ngMetadataName === 'InjectionToken') {\n    result = value._desc;\n  } else if (typeof value === 'object' && value && typeof value.constructor === 'function') {\n    result = value.constructor.name;\n  }\n\n  result ||= 'unknown';\n\n  return result.replace(badCharacters, '_');\n};\n","import collectDeclarations from '../resolve/collect-declarations';\n\nimport { AnyDeclaration } from './core.types';\nimport { isNgInjectionToken } from './func.is-ng-injection-token';\nimport { NgModuleWithProviders } from './func.is-ng-module-def-with-providers';\n\n/**\n * Returns how the class has been decorated.\n * It doesn't work well, because multi decorations and extensions of decorated classes can bring strange behavior.\n * Because of that, we simply take the last decoration as the expected, if the decorator is not Injectable.\n * Services have the lowest priority.\n *\n * @internal\n *\n * ```ts\n * getNgType(MockModule); // returns 'NgModule' | 'Component' | 'Directive' | 'Pipe' | 'Injectable'\n * ```\n */\nexport const getNgType = (\n  declaration: AnyDeclaration<any> | NgModuleWithProviders<any>,\n): 'NgModule' | 'Component' | 'Directive' | 'Pipe' | 'Injectable' | undefined => {\n  if (typeof declaration === 'string') {\n    return undefined;\n  }\n  if (isNgInjectionToken(declaration)) {\n    return 'Injectable';\n  }\n\n  const { decorators } = collectDeclarations(declaration);\n\n  for (let index = decorators.length - 1; index >= 0; index -= 1) {\n    if (decorators[index] === 'Injectable') {\n      continue;\n    }\n\n    return decorators[index];\n  }\n\n  if (decorators.length > 0) {\n    return 'Injectable';\n  }\n\n  return undefined;\n};\n","import { MockedComponent } from '../mock-component/types';\nimport { MockedDirective } from '../mock-directive/types';\nimport { MockedModule } from '../mock-module/types';\nimport { MockedPipe } from '../mock-pipe/types';\n\nimport { AnyType, Type } from './core.types';\n\n/**\n * Returns the original class of a mock module class.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/getSourceOfMock\n *\n * ```ts\n * getSourceOfMock(MockModule); // returns RealModule\n * getSourceOfMock(RealModule); // returns RealModule\n * ```\n */\nexport function getSourceOfMock<T>(declaration: AnyType<MockedModule<T>>): Type<T>;\n\n/**\n * Returns the original class of a mock component class.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/getSourceOfMock\n *\n * ```ts\n * getSourceOfMock(MockComponent); // returns RealComponent\n * getSourceOfMock(RealComponent); // returns RealComponent\n * ```\n */\nexport function getSourceOfMock<T>(declaration: AnyType<MockedComponent<T>>): Type<T>;\n\n/**\n * Returns the original class of a mock directive class.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/getSourceOfMock\n *\n * ```ts\n * getSourceOfMock(MockDirective); // returns RealDirective\n * getSourceOfMock(RealDirective); // returns RealDirective\n * ```\n */\nexport function getSourceOfMock<T>(declaration: AnyType<MockedDirective<T>>): Type<T>;\n\n/**\n * Returns the original class of a mock pipe class.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/getSourceOfMock\n *\n * ```ts\n * getSourceOfMock(MockPipe); // returns RealPipe\n * getSourceOfMock(RealPipe); // returns RealPipe\n * ```\n */\nexport function getSourceOfMock<T>(declaration: AnyType<MockedPipe<T>>): Type<T>;\n\n/**\n * Returns the original class of a mock class.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/getSourceOfMock\n *\n * ```ts\n * getSourceOfMock(MockClass); // returns RealClass\n * getSourceOfMock(RealClass); // returns RealClass\n * ```\n */\nexport function getSourceOfMock<T>(declaration: AnyType<T>): Type<T>;\n\nexport function getSourceOfMock<T>(declaration: any): Type<T> {\n  return typeof declaration === 'function' && declaration.mockOf ? declaration.mockOf : declaration;\n}\n","import { isNgModuleDefWithProviders } from './func.is-ng-module-def-with-providers';\n\nexport default (provider: any): any => {\n  return provider && typeof provider === 'object' && provider.provide\n    ? provider.provide\n    : isNgModuleDefWithProviders(provider)\n    ? provider.ngModule\n    : provider && typeof provider === 'object' && provider.directive\n    ? provider.directive\n    : provider;\n};\n","import funcGetName from './func.get-name';\nimport { isNgDef } from './func.is-ng-def';\n\nconst getType = (value: any): string =>\n  isNgDef(value, 'p')\n    ? 'pipe'\n    : isNgDef(value, 'd')\n    ? 'directive'\n    : isNgDef(value, 'c')\n    ? 'component'\n    : isNgDef(value, 'm')\n    ? 'module'\n    : isNgDef(value, 'i')\n    ? 'service'\n    : isNgDef(value, 't')\n    ? 'token'\n    : '';\n\nexport default (value: any, funcName: string) => {\n  if (value === undefined || value === null) {\n    throw new Error(`null / undefined has been passed into ${funcName}. Please check that its import is correct.`);\n  }\n\n  if (funcName === 'MockPipe' && isNgDef(value, 'p')) {\n    return;\n  }\n  if (funcName === 'MockDirective' && isNgDef(value, 'd')) {\n    return;\n  }\n  if (funcName === 'MockComponent' && isNgDef(value, 'c')) {\n    return;\n  }\n  if (funcName === 'MockModule' && isNgDef(value, 'm')) {\n    return;\n  }\n\n  const type = getType(value);\n\n  if (type && funcName === 'MockPipe') {\n    throw new Error(`${funcName} accepts pipes, whereas ${funcGetName(value)} is a ${type}.`);\n  }\n  if (type && funcName === 'MockDirective') {\n    throw new Error(`${funcName} accepts directives, whereas ${funcGetName(value)} is a ${type}.`);\n  }\n  if (type && funcName === 'MockComponent') {\n    throw new Error(`${funcName} accepts components, whereas ${funcGetName(value)} is a ${type}.`);\n  }\n  if (type && funcName === 'MockModule') {\n    throw new Error(`${funcName} accepts modules, whereas ${funcGetName(value)} is a ${type}.`);\n  }\n};\n","export default (def: any): boolean => {\n  if (!def) {\n    return false;\n  }\n\n  if (typeof def !== 'function' && typeof def !== 'object') {\n    return false;\n  }\n\n  if (def._isMockFunction && def.mockName && def.__annotations__) {\n    return true;\n  }\n\n  return false;\n};\n","import funcIsMock from './func.is-mock';\nimport { MockControlValueAccessor } from './mock-control-value-accessor';\n\n/**\n * isMockControlValueAccessor helps to assert that an instance is a mock ControlValueAccessor\n * to perform valueChange or touch simulations.\n * Usually, it is used in if statements.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isMockControlValueAccessor\n * @see https://ng-mocks.sudo.eu/api/ngMocks/change\n * @see https://ng-mocks.sudo.eu/api/ngMocks/touch\n */\nexport const isMockControlValueAccessor = <T>(value: T): value is T & MockControlValueAccessor => {\n  if (!funcIsMock(value)) {\n    return false;\n  }\n\n  return !!value.__ngMocksConfig.isControlValueAccessor;\n};\n","import { MockedComponent } from '../mock-component/types';\nimport { MockedDirective } from '../mock-directive/types';\nimport { MockedModule } from '../mock-module/types';\nimport { MockedPipe } from '../mock-pipe/types';\n\nimport { AnyType, Type } from './core.types';\nimport { isNgDef } from './func.is-ng-def';\n\n/**\n * isMockNgDef verifies whether a class is a mock component class.\n *\n * @internal\n *\n * ```ts\n * isMockNgDef(MockComponent, 'c'); // returns true\n * isMockNgDef(RealComponent, 'c'); // returns false\n * isMockNgDef(ArbitraryClass, 'c'); // returns false\n * ```\n */\nexport function isMockNgDef<T>(component: AnyType<T>, ngType: 'c'): component is Type<MockedComponent<T>>;\n\n/**\n * isMockNgDef verifies whether a class is a mock directive class.\n *\n * @internal\n *\n * ```ts\n * isMockNgDef(MockDirective, 'd'); // returns true\n * isMockNgDef(RealDirective, 'd'); // returns false\n * isMockNgDef(ArbitraryClass, 'd'); // returns false\n * ```\n */\nexport function isMockNgDef<T>(directive: AnyType<T>, ngType: 'd'): directive is Type<MockedDirective<T>>;\n\n/**\n * isMockNgDef verifies whether a class is a mock pipe class.\n *\n * @internal\n *\n * ```ts\n * isMockNgDef(MockPipe, 'p'); // returns true\n * isMockNgDef(RealPipe, 'p'); // returns false\n * isMockNgDef(ArbitraryClass, 'p'); // returns false\n * ```\n */\nexport function isMockNgDef<T>(pipe: AnyType<T>, ngType: 'p'): pipe is Type<MockedPipe<T>>;\n\n/**\n * isMockNgDef verifies whether a class is a mock module class.\n *\n * @internal\n *\n * ```ts\n * isMockNgDef(MockModule, 'm'); // returns true\n * isMockNgDef(RealModule, 'm'); // returns false\n * isMockNgDef(ArbitraryClass, 'm'); // returns false\n * ```\n */\nexport function isMockNgDef<T>(module: AnyType<T>, ngType: 'm'): module is Type<MockedModule<T>>;\n\n/**\n * isMockNgDef verifies whether a class is a mock class.\n *\n * @internal\n *\n * ```ts\n * isMockNgDef(MockComponent); // returns true\n * isMockNgDef(RealModule); // returns false\n * isMockNgDef(ArbitraryClass); // returns false\n * ```\n */\nexport function isMockNgDef<T>(module: Type<T>): module is Type<T>;\n\nexport function isMockNgDef<TComponent>(\n  component: AnyType<TComponent> & { mockOf?: any },\n  type?: 'c' | 'd' | 'p' | 'm',\n): component is Type<TComponent> {\n  if (!(component as any).mockOf) {\n    return false;\n  }\n  if (!type) {\n    return true;\n  }\n\n  return isNgDef(component.mockOf, type as never);\n}\n","import { PipeTransform } from '@angular/core';\n\nimport { MockedComponent } from '../mock-component/types';\nimport { MockedDirective } from '../mock-directive/types';\nimport { MockedModule } from '../mock-module/types';\nimport { MockedPipe } from '../mock-pipe/types';\n\nimport { Type } from './core.types';\nimport funcIsMock from './func.is-mock';\nimport { isNgDef } from './func.is-ng-def';\n\n/**\n * Checks whether the instance derives from a mock module.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isMockOf\n *\n * ```ts\n * isMockOf(moduleInstance, RealModule, 'm'); // returns true\n * isMockOf(moduleInstance, ArbitraryClass, 'm'); // returns false\n * ```\n */\nexport function isMockOf<T>(instance: any, declaration: Type<T>, ngType: 'm'): instance is MockedModule<T>;\n\n/**\n * Checks whether the instance derives from a mock component.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isMockOf\n *\n * ```ts\n * isMockOf(componentInstance, RealComponent, 'c'); // returns true\n * isMockOf(componentInstance, ArbitraryClass, 'c'); // returns false\n * ```\n */\nexport function isMockOf<T>(instance: any, declaration: Type<T>, ngType: 'c'): instance is MockedComponent<T>;\n\n/**\n * Checks whether the instance derives from a mock directive.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isMockOf\n *\n * ```ts\n * isMockOf(directiveInstance, RealDirective, 'd'); // returns true\n * isMockOf(directiveInstance, ArbitraryClass, 'd'); // returns false\n * ```\n */\nexport function isMockOf<T>(instance: any, declaration: Type<T>, ngType: 'd'): instance is MockedDirective<T>;\n\n/**\n * Checks whether the instance derives from a mock pipe.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isMockOf\n *\n * ```ts\n * isMockOf(pipeInstance, RealPipe, 'p'); // returns true\n * isMockOf(pipeInstance, ArbitraryClass, 'p'); // returns false\n * ```\n */\nexport function isMockOf<T extends PipeTransform>(\n  instance: any,\n  declaration: Type<T>,\n  ngType: 'p',\n): instance is MockedPipe<T>;\n\n/**\n * Checks whether the instance derives from a mock type.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isMockOf\n *\n * ```ts\n * isMockOf(componentInstance, RealComponent); // returns true\n * isMockOf(pipeInstance, RealPipe); // returns true\n * isMockOf(pipeInstance, ArbitraryClass); // returns false\n * ```\n */\nexport function isMockOf<T>(instance: any, declaration: Type<T>): instance is T;\n\nexport function isMockOf<T>(instance: any, declaration: Type<T>, ngType?: any): instance is T {\n  return (\n    funcIsMock(instance) &&\n    instance.constructor === declaration &&\n    (ngType ? isNgDef(instance.constructor, ngType) : isNgDef(instance.constructor))\n  );\n}\n","import funcIsMock from './func.is-mock';\nimport { MockValidator } from './mock-control-value-accessor';\n\n/**\n * isMockValidator helps to assert that an instance is a mock Validator\n * to perform validationChange simulations.\n * Usually, it is used in if statements.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isMockValidator\n */\nexport const isMockValidator = <T>(value: T): value is T & MockValidator => {\n  if (!funcIsMock(value)) {\n    return false;\n  }\n\n  return !!(value as any).__ngMocksConfig.isValidator;\n};\n","import { Injector, TemplateRef, ViewContainerRef } from '@angular/core';\n\nimport { MockConfig } from './mock';\n\nexport default <T>(\n  value: T,\n): value is T &\n  MockConfig & {\n    __ngMocksInjector?: Injector;\n    __template?: TemplateRef<any>;\n    __vcr?: ViewContainerRef;\n  } => {\n  return value && typeof value === 'object' && !!(value as any).__ngMocks;\n};\n","import { PipeTransform } from '@angular/core';\n\nimport { MockedComponent } from '../mock-component/types';\nimport { MockedDirective } from '../mock-directive/types';\nimport { MockedModule } from '../mock-module/types';\nimport { MockedPipe } from '../mock-pipe/types';\n\nimport { Type } from './core.types';\nimport { isNgDef } from './func.is-ng-def';\n\n/**\n * Checks whether a declaration is the mock class of a module.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isMockedNgDefOf\n *\n * ```ts\n * isMockedNgDefOf(MockModule, RealModule, 'm'); // returns true\n * isMockedNgDefOf(MockModule, ArbitraryModule, 'm'); // returns false\n * isMockedNgDefOf(MockModule, ArbitraryClass, 'm'); // returns false\n * ```\n */\nexport function isMockedNgDefOf<T>(declaration: any, type: Type<T>, ngType: 'm'): declaration is Type<MockedModule<T>>;\n\n/**\n * Checks whether a declaration is the mock class of a component.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isMockedNgDefOf\n *\n * ```ts\n * isMockedNgDefOf(MockComponent, RealComponent, 'c'); // returns true\n * isMockedNgDefOf(MockComponent, ArbitraryComponent, 'c'); // returns false\n * isMockedNgDefOf(MockComponent, ArbitraryClass, 'c'); // returns false\n * ```\n */\nexport function isMockedNgDefOf<T>(\n  declaration: any,\n  type: Type<T>,\n  ngType: 'c',\n): declaration is Type<MockedComponent<T>>;\n\n/**\n * Checks whether a declaration is the mock class of a directive.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isMockedNgDefOf\n *\n * ```ts\n * isMockedNgDefOf(MockDirective, RealDirective, 'd'); // returns true\n * isMockedNgDefOf(MockDirective, ArbitraryDirective, 'd'); // returns false\n * isMockedNgDefOf(MockDirective, ArbitraryClass, 'd'); // returns false\n * ```\n */\nexport function isMockedNgDefOf<T>(\n  declaration: any,\n  type: Type<T>,\n  ngType: 'd',\n): declaration is Type<MockedDirective<T>>;\n\n/**\n * Checks whether a declaration is the mock class of a pipe.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isMockedNgDefOf\n *\n * ```ts\n * isMockedNgDefOf(MockPipe, RealPipe, 'p'); // returns true\n * isMockedNgDefOf(MockPipe, ArbitraryPipe, 'p'); // returns false\n * isMockedNgDefOf(MockPipe, ArbitraryClass, 'p'); // returns false\n * ```\n */\nexport function isMockedNgDefOf<T extends PipeTransform>(\n  declaration: any,\n  type: Type<T>,\n  ngType: 'p',\n): declaration is Type<MockedPipe<T>>;\n\n/**\n * Checks whether a declaration is the mock class of a thing.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isMockedNgDefOf\n *\n * ```ts\n * isMockedNgDefOf(MockPipe, RealPipe); // returns true\n * isMockedNgDefOf(MockComponent, ArbitraryComponent); // returns false\n * isMockedNgDefOf(MockPipe, ArbitraryClass); // returns false\n * ```\n */\nexport function isMockedNgDefOf<T>(declaration: any, type: Type<T>): declaration is Type<T>;\n\nexport function isMockedNgDefOf<T>(declaration: any, type: Type<T>, ngType?: any): declaration is Type<T> {\n  return (\n    typeof declaration === 'function' && declaration.mockOf === type && (ngType ? isNgDef(declaration, ngType) : true)\n  );\n}\n","import { InjectionToken, PipeTransform } from '@angular/core';\n\nimport { Type } from './core.types';\nimport { isNgInjectionToken } from './func.is-ng-injection-token';\nimport { isNgType } from './func.is-ng-type';\n\nconst isModuleCheck = (def: any, ngType?: string): boolean => (!ngType || ngType === 'm') && isNgType(def, 'NgModule');\nconst isComponentCheck = (def: any, ngType?: string): boolean =>\n  (!ngType || ngType === 'c') && isNgType(def, 'Component');\nconst isDirectiveCheck = (def: any, ngType?: string): boolean =>\n  (!ngType || ngType === 'd') && isNgType(def, 'Directive');\nconst isPipeCheck = (def: any, ngType?: string): boolean => (!ngType || ngType === 'p') && isNgType(def, 'Pipe');\nconst isInjectableCheck = (def: any, ngType?: string): boolean =>\n  (!ngType || ngType === 'i') && isNgType(def, 'Injectable');\n\n/**\n * Checks whether a class has been decorated by @NgModule.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isNgDef\n *\n * ```ts\n * isNgDef(RealModule, 'm'); // returns true\n * isNgDef(MockModule, 'm'); // returns true\n * isNgDef(ArbitraryModule, 'm'); // returns true\n * isNgDef(ArbitraryClass, 'm'); // returns false\n * ```\n */\nexport function isNgDef(declaration: any, ngType: 'm'): declaration is Type<any>;\n\n/**\n * Checks whether a class has been decorated by @Component.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isNgDef\n *\n * ```ts\n * isNgDef(RealComponent, 'c'); // returns true\n * isNgDef(MockComponent, 'c'); // returns true\n * isNgDef(ArbitraryComponent, 'c'); // returns true\n * isNgDef(ArbitraryClass, 'c'); // returns false\n * ```\n */\nexport function isNgDef(declaration: any, ngType: 'c'): declaration is Type<any>;\n\n/**\n * Checks whether a class has been decorated by @Directive.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isNgDef\n *\n * ```ts\n * isNgDef(RealDirective, 'd'); // returns true\n * isNgDef(MockDirective, 'd'); // returns true\n * isNgDef(ArbitraryDirective, 'd'); // returns true\n * isNgDef(ArbitraryClass, 'd'); // returns false\n * ```\n */\nexport function isNgDef(declaration: any, ngType: 'd'): declaration is Type<any>;\n\n/**\n * Checks whether a class has been decorated by @Pipe.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isNgDef\n *\n * ```ts\n * isNgDef(RealPipe, 'p'); // returns true\n * isNgDef(MockPipe, 'p'); // returns true\n * isNgDef(ArbitraryPipe, 'p'); // returns true\n * isNgDef(ArbitraryClass, 'p'); // returns false\n * ```\n */\nexport function isNgDef(declaration: any, ngType: 'p'): declaration is Type<PipeTransform>;\n\n/**\n * Checks whether a class has been decorated by @Injectable.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isNgDef\n *\n * ```ts\n * isNgDef(RealService, 'i'); // returns true\n * isNgDef(MockService, 'i'); // returns true\n * isNgDef(ArbitraryService, 'i'); // returns true\n * isNgDef(ArbitraryClass, 'i'); // returns false\n * ```\n */\nexport function isNgDef(declaration: any, ngType: 'i'): declaration is Type<any>;\n\n/**\n * Checks whether a variable is a token.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isNgDef\n *\n * ```ts\n * isNgDef(realToken, 't'); // returns true\n * isNgDef(mockToken, 't'); // returns true\n * isNgDef(arbitraryToken, 't'); // returns true\n * isNgDef(arbitraryObject, 't'); // returns false\n * ```\n */\nexport function isNgDef(declaration: any, ngType: 't'): declaration is InjectionToken<any>;\n\n/**\n * Checks whether a class or variable has been decorated by a ng type.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isNgDef\n *\n * ```ts\n * isNgDef(RealModule); // returns true\n * isNgDef(MockComponent); // returns true\n * isNgDef(ArbitraryDirective); // returns true\n * isNgDef(token); // returns true\n * isNgDef(ArbitraryClass); // returns false\n * ```\n */\nexport function isNgDef(declaration: any): declaration is Type<any>;\n\nexport function isNgDef(declaration: any, ngType?: string): declaration is Type<any> {\n  if (ngType === 't') {\n    return isNgInjectionToken(declaration);\n  }\n  if (typeof declaration !== 'function') {\n    return false;\n  }\n\n  const isModule = isModuleCheck(declaration, ngType);\n  const isComponent = isComponentCheck(declaration, ngType);\n  const isDirective = isDirectiveCheck(declaration, ngType);\n  const isPipe = isPipeCheck(declaration, ngType);\n  const isInjectable = isInjectableCheck(declaration, ngType);\n\n  return isModule || isComponent || isDirective || isPipe || isInjectable;\n}\n","import { InjectionToken } from '@angular/core';\n\n/**\n * Checks whether a variable is an Angular token.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isNgInjectionToken\n *\n * ```ts\n * isNgInjectionToken(APP_ID); // returns true\n * isNgInjectionToken(arbitraryVariable); // returns false\n * ```\n */\nexport const isNgInjectionToken = (token: any): token is InjectionToken<any> =>\n  token && typeof token === 'object' && token.ngMetadataName === 'InjectionToken';\n","import { NgModule } from '@angular/core';\n\nimport { Type } from './core.types';\n\n/**\n * NgModuleWithProviders helps to support ModuleWithProviders in all angular versions.\n * In A5 it was without the generic type.\n *\n * @internal remove after removal of A5 support\n */\nexport interface NgModuleWithProviders<T = any> {\n  ngModule: Type<T>;\n  providers?: NgModule['providers'];\n}\n\n/**\n * isNgModuleDefWithProviders checks if an object implements ModuleWithProviders.\n *\n * @internal\n */\nexport const isNgModuleDefWithProviders = (declaration: any): declaration is NgModuleWithProviders =>\n  declaration && typeof declaration === 'object' && typeof declaration.ngModule === 'function';\n","import collectDeclarations from '../resolve/collect-declarations';\n\nimport { AnyType } from './core.types';\n\n/**\n * Checks whether a class has been decorated with a specific Angular decorator.\n * Due to the extension / multi decoration, we rely on the last used decorator.\n *\n * @internal\n *\n * ```ts\n * isNgType(MockModule, 'NgModule'); // returns true\n * isNgType(RealComponent, 'Component'); // returns true\n * isNgType(ArbitraryClass, 'Directive'); // returns false\n * isNgType(ArbitraryClass, 'Injectable'); // returns false\n * ```\n */\nexport const isNgType = (declaration: AnyType<any>, type: string): boolean => {\n  const { decorators } = collectDeclarations(declaration);\n  if (decorators.length === 0) {\n    return false;\n  }\n\n  let offset = 1;\n\n  // Injectable works well if the declaration is in providers.\n  if (type === 'Injectable' && decorators.indexOf('Injectable') !== -1) {\n    return true;\n  }\n\n  // Skipping Injectable.\n  while (decorators[decorators.length - offset] === 'Injectable') {\n    offset += 1;\n  }\n\n  return decorators[decorators.length - offset] === type;\n};\n","import collectDeclarations from '../resolve/collect-declarations';\n\nimport { getNgType } from './func.get-ng-type';\n\n/**\n * Checks whether a class has been decorated with the standalone flag.\n */\nexport function isStandalone(declaration: any): boolean {\n  const type = getNgType(declaration);\n  if (!type || type === 'Injectable') {\n    return false;\n  }\n\n  return collectDeclarations(declaration)[type].standalone === true;\n}\n","import collectDeclarations from '../resolve/collect-declarations';\n\nimport coreConfig from './core.config';\nimport { flatten } from './core.helpers';\nimport { AnyDeclaration } from './core.types';\nimport funcGetType from './func.get-type';\n\nconst iterator = <T = any>(\n  source: AnyDeclaration<T>,\n  callback: (source: AnyDeclaration<T>) => void,\n  scanned = new Set<any>(),\n): void => {\n  const meta = collectDeclarations(source);\n  for (const decorator of meta.decorators) {\n    for (const key of coreConfig.dependencies) {\n      if (!meta[decorator][key]) {\n        continue;\n      }\n      for (const def of flatten(meta[decorator][key])) {\n        const declaration = funcGetType(def);\n        if (!declaration || scanned.has(declaration)) {\n          continue;\n        }\n        scanned.add(declaration);\n        callback(declaration);\n        iterator(declaration, callback, scanned);\n      }\n    }\n  }\n};\n\nexport default iterator;\n","import { AsyncValidator, ControlValueAccessor, ValidationErrors, Validator } from '@angular/forms';\n\nimport { AnyType } from './core.types';\nimport { MockControlValueAccessor, MockValidator } from './mock-control-value-accessor';\n\nconst applyProxy = (proxy: any, method: string, value: any, storage?: string) => {\n  if (proxy.instance && storage) {\n    proxy.instance[storage] = value;\n  }\n  if (proxy.instance && proxy.instance[method]) {\n    return proxy.instance[method](value);\n  }\n};\n\nexport class MockControlValueAccessorProxy implements ControlValueAccessor {\n  public instance?: Partial<MockControlValueAccessor & ControlValueAccessor>;\n\n  public constructor(public readonly target?: AnyType<any>) {}\n\n  public registerOnChange(fn: any): void {\n    applyProxy(this, 'registerOnChange', fn, '__simulateChange');\n  }\n\n  public registerOnTouched(fn: any): void {\n    applyProxy(this, 'registerOnTouched', fn, '__simulateTouch');\n  }\n\n  public setDisabledState(isDisabled: boolean): void {\n    applyProxy(this, 'setDisabledState', isDisabled);\n  }\n\n  public writeValue(value: any): void {\n    applyProxy(this, 'writeValue', value);\n  }\n}\n\nexport class MockValidatorProxy implements Validator {\n  public instance?: Partial<MockValidator & Validator>;\n\n  public constructor(public readonly target?: AnyType<any>) {}\n\n  public registerOnValidatorChange(fn: any): void {\n    applyProxy(this, 'registerOnValidatorChange', fn, '__simulateValidatorChange');\n  }\n\n  public validate(control: any): ValidationErrors | null {\n    if (this.instance && this.instance.validate) {\n      return this.instance.validate(control);\n    }\n\n    return null;\n  }\n}\n\nexport class MockAsyncValidatorProxy implements AsyncValidator {\n  public instance?: Partial<MockValidator & AsyncValidator>;\n\n  public constructor(public readonly target?: AnyType<any>) {}\n\n  public registerOnValidatorChange(fn: any): void {\n    applyProxy(this, 'registerOnValidatorChange', fn, '__simulateValidatorChange');\n  }\n\n  public validate(control: any): any {\n    if (this.instance && this.instance.validate) {\n      const result: any = this.instance.validate(control);\n\n      return result === undefined ? Promise.resolve(null) : result;\n    }\n\n    return Promise.resolve(null);\n  }\n}\n","import { Mock } from './mock';\n\n/**\n * LegacyControlValueAccessor was used to be a way to manipulate a mock ControlValueAccessor.\n *\n * @deprecated use isMockControlValueAccessor or isMockValidator instead (removing in A13)\n * @see https://ng-mocks.sudo.eu/api/helpers/isMockControlValueAccessor\n * @see https://ng-mocks.sudo.eu/api/helpers/isMockValidator\n */\nexport class LegacyControlValueAccessor extends Mock {\n  /**\n   * @deprecated use isMockControlValueAccessor instead (removing in A13)\n   * @see https://ng-mocks.sudo.eu/api/helpers/isMockControlValueAccessor\n   */\n  public __simulateChange(value: any): void;\n  // istanbul ignore next\n  public __simulateChange() {\n    // nothing to do.\n  }\n\n  // istanbul ignore next\n  /**\n   * @deprecated use isMockControlValueAccessor instead (removing in A13)\n   * @see https://ng-mocks.sudo.eu/api/helpers/isMockControlValueAccessor\n   */\n  public __simulateTouch() {\n    // nothing to do.\n  }\n\n  // istanbul ignore next\n  /**\n   * @deprecated use isMockValidator instead (removing in A13)\n   * @see https://ng-mocks.sudo.eu/api/helpers/isMockValidator\n   */\n  public __simulateValidatorChange() {\n    // nothing to do.\n  }\n}\n\n/**\n * MockControlValueAccessor exposes access to a mock ControlValueAccessor.\n * It should be used in a combination with isMockControlValueAccessor.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isMockControlValueAccessor\n */\nexport interface MockControlValueAccessor {\n  /**\n   * It simulates an external change of the value.\n   * Please consider usage of ngMocks.change().\n   *\n   * @see https://ng-mocks.sudo.eu/extra/mock-form-controls\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/change\n   */\n  __simulateChange(value: any): void;\n\n  /**\n   * It simulates an external touch.\n   * Please consider usage of ngMocks.touch().\n   *\n   * @see https://ng-mocks.sudo.eu/extra/mock-form-controls\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/touch\n   */\n  __simulateTouch(): void;\n}\n\n/**\n * MockValidator exposes access to a mock Validator.\n * It should be used in a combination with isMockValidator.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isMockValidator\n */\nexport interface MockValidator {\n  /**\n   * it simulates an external validation change.\n   *\n   * @see https://ng-mocks.sudo.eu/extra/mock-form-controls\n   */\n  __simulateValidatorChange(): void;\n}\n","import { EventEmitter, Injector, Optional, PipeTransform, Self } from '@angular/core';\n\nimport { IMockBuilderConfig } from '../mock-builder/types';\nimport mockHelperStub from '../mock-helper/mock-helper.stub';\nimport mockInstanceApply from '../mock-instance/mock-instance-apply';\nimport helperMockService from '../mock-service/helper.mock-service';\n\nimport coreDefineProperty from './core.define-property';\nimport coreForm from './core.form';\nimport { mapValues } from './core.helpers';\nimport { AnyType, DirectiveIo } from './core.types';\nimport funcDirectiveIoParse from './func.directive-io-parse';\nimport funcIsMock from './func.is-mock';\nimport { MockControlValueAccessorProxy } from './mock-control-value-accessor-proxy';\nimport ngMocksUniverse from './ng-mocks-universe';\n\nconst setValueAccessor = (instance: any, ngControl?: any) => {\n  if (ngControl && !ngControl.valueAccessor && instance.__ngMocksConfig.setControlValueAccessor) {\n    try {\n      ngControl.valueAccessor = new MockControlValueAccessorProxy(instance.__ngMocksCtor);\n    } catch {\n      // nothing to do.\n    }\n  }\n};\n\n// connecting to NG_VALUE_ACCESSOR\nconst installValueAccessor = (ngControl: any, instance: any) => {\n  if (!ngControl.valueAccessor.instance && ngControl.valueAccessor.target === instance.__ngMocksCtor) {\n    ngControl.valueAccessor.instance = instance;\n    helperMockService.mock(instance, 'registerOnChange');\n    helperMockService.mock(instance, 'registerOnTouched');\n    helperMockService.mock(instance, 'setDisabledState');\n    helperMockService.mock(instance, 'writeValue');\n    instance.__ngMocksConfig.isControlValueAccessor = true;\n  }\n};\n\n// connecting to NG_VALIDATORS\n// connecting to NG_ASYNC_VALIDATORS\nconst installValidator = (validators: any[], instance: any) => {\n  for (const validator of validators) {\n    if (!validator.instance && validator.target === instance.__ngMocksCtor) {\n      validator.instance = instance;\n      helperMockService.mock(instance, 'registerOnValidatorChange');\n      helperMockService.mock(instance, 'validate');\n      instance.__ngMocksConfig.isValidator = true;\n    }\n  }\n};\n\nconst applyNgValueAccessor = (instance: any, ngControl: any) => {\n  setValueAccessor(instance, ngControl);\n\n  try {\n    // istanbul ignore else\n    if (ngControl) {\n      installValueAccessor(ngControl, instance);\n      installValidator(ngControl._rawValidators, instance);\n      installValidator(ngControl._rawAsyncValidators, instance);\n    }\n  } catch {\n    // nothing to do.\n  }\n};\n\nconst applyOutputs = (instance: MockConfig & Record<keyof any, any>) => {\n  const mockOutputs = [];\n  for (const output of instance.__ngMocksConfig.outputs || []) {\n    mockOutputs.push(funcDirectiveIoParse(output).name);\n  }\n\n  for (const output of mockOutputs) {\n    if (instance[output] || Object.getOwnPropertyDescriptor(instance, output)) {\n      continue;\n    }\n    instance[output] = new EventEmitter<any>();\n  }\n};\n\nconst applyPrototype = (instance: Mock, prototype: AnyType<any>) => {\n  for (const prop of [\n    ...helperMockService.extractMethodsFromPrototype(prototype),\n    ...helperMockService.extractPropertiesFromPrototype(prototype),\n  ]) {\n    const descriptor = helperMockService.extractPropertyDescriptor(prototype, prop);\n    helperMockService.definePropertyDescriptor(instance, prop, descriptor);\n  }\n};\n\nconst applyMethods = (instance: Mock & Record<keyof any, any>, prototype: AnyType<any>) => {\n  for (const method of helperMockService.extractMethodsFromPrototype(prototype)) {\n    if (instance[method] || Object.getOwnPropertyDescriptor(instance, method)) {\n      continue;\n    }\n    helperMockService.mock(instance, method);\n  }\n};\n\nconst applyProps = (instance: Mock & Record<keyof any, any>, prototype: AnyType<any>) => {\n  for (const prop of helperMockService.extractPropertiesFromPrototype(prototype)) {\n    if (instance[prop] || Object.getOwnPropertyDescriptor(instance, prop)) {\n      continue;\n    }\n    helperMockService.mock(instance, prop, 'get');\n    helperMockService.mock(instance, prop, 'set');\n  }\n};\n\nexport type ngMocksMockConfig = {\n  config?: IMockBuilderConfig;\n  hostBindings?: string[];\n  hostListeners?: string[];\n  init?: (instance: any) => void;\n  isControlValueAccessor?: boolean;\n  isValidator?: boolean;\n  outputs?: Array<DirectiveIo>;\n  queryScanKeys?: string[];\n  setControlValueAccessor?: boolean;\n  transform?: PipeTransform['transform'];\n};\n\nconst applyOverrides = (instance: any, mockOf: any, injector?: Injector): void => {\n  const configGlobal: Set<any> | undefined = ngMocksUniverse.getOverrides().get(mockOf);\n  const callbacks = configGlobal ? mapValues(configGlobal) : [];\n  if (instance.__ngMocksConfig.init) {\n    callbacks.push(instance.__ngMocksConfig.init);\n  }\n  callbacks.push(...mockInstanceApply(mockOf));\n\n  for (const callback of callbacks) {\n    const overrides = callback(instance, injector);\n    if (!overrides) {\n      continue;\n    }\n    mockHelperStub(instance, overrides);\n  }\n};\n\nexport interface MockConfig {\n  __ngMocksConfig: ngMocksMockConfig;\n}\n\n/**\n * Mock class is the base class for each mock.\n * Usually, it should not be used directly.\n */\nexport class Mock {\n  protected __ngMocksConfig!: ngMocksMockConfig;\n\n  public constructor(\n    injector: Injector | null = null,\n    ngControl: any | null = null, // NgControl\n  ) {\n    const mockOf = (this.constructor as any).mockOf;\n    coreDefineProperty(this, '__ngMocks', true);\n    coreDefineProperty(this, '__ngMocksInjector', injector);\n    coreDefineProperty(this, '__ngMocksCtor', this.constructor);\n    for (const key of this.__ngMocksConfig.queryScanKeys || /* istanbul ignore next */ []) {\n      coreDefineProperty(this, `__ngMocksVcr_${key}`, undefined);\n    }\n    for (const key of this.__ngMocksConfig.hostBindings || /* istanbul ignore next */ []) {\n      helperMockService.mock(this, key, 'get');\n      helperMockService.mock(this, key, 'set');\n    }\n    for (const key of this.__ngMocksConfig.hostListeners || /* istanbul ignore next */ []) {\n      helperMockService.mock(this, key);\n    }\n\n    // istanbul ignore else\n    if (funcIsMock(this)) {\n      applyNgValueAccessor(this, ngControl);\n      applyOutputs(this);\n      applyPrototype(this, Object.getPrototypeOf(this));\n      applyMethods(this, mockOf.prototype);\n      applyProps(this, mockOf.prototype);\n    }\n\n    // and faking prototype\n    Object.setPrototypeOf(this, mockOf.prototype);\n\n    applyOverrides(this, mockOf, injector ?? undefined);\n  }\n}\n\ncoreDefineProperty(Mock, 'parameters', [\n  [Injector, new Optional()],\n  [coreForm.NgControl || /* istanbul ignore next */ (() => undefined), new Optional(), new Self()],\n]);\n","import { Injector, ViewContainerRef } from '@angular/core';\nimport { getTestBed, MetadataOverride, TestBed, TestBedStatic, TestModuleMetadata } from '@angular/core/testing';\n\nimport funcExtractTokens from '../mock-builder/func.extract-tokens';\nimport { MockBuilder } from '../mock-builder/mock-builder';\nimport getOverrideDef from '../mock-builder/promise/get-override-def';\nimport { ngMocks } from '../mock-helper/mock-helper';\nimport mockHelperFasterInstall from '../mock-helper/mock-helper.faster-install';\nimport { MockProvider } from '../mock-provider/mock-provider';\nimport helperCreateClone from '../mock-service/helper.create-clone';\n\nimport coreConfig from './core.config';\nimport coreDefineProperty from './core.define-property';\nimport { flatten, mapEntries, mapValues } from './core.helpers';\nimport coreInjector from './core.injector';\nimport coreReflectMeta from './core.reflect.meta';\nimport coreReflectModuleResolve from './core.reflect.module-resolve';\nimport coreReflectProvidedIn from './core.reflect.provided-in';\nimport { NG_MOCKS, NG_MOCKS_ROOT_PROVIDERS, NG_MOCKS_TOUCHES } from './core.tokens';\nimport { AnyType, dependencyKeys } from './core.types';\nimport { getSourceOfMock } from './func.get-source-of-mock';\nimport funcGetType from './func.get-type';\nimport { isMockNgDef } from './func.is-mock-ng-def';\nimport { isNgDef } from './func.is-ng-def';\nimport { isNgModuleDefWithProviders } from './func.is-ng-module-def-with-providers';\nimport ngMocksUniverse from './ng-mocks-universe';\n\nconst applyOverride = (def: any, override: any) => {\n  if (isNgDef(def, 'c')) {\n    TestBed.overrideComponent(def, override);\n  } else if (isNgDef(def, 'd')) {\n    TestBed.overrideDirective(def, override);\n  } else if (isNgDef(def, 'm')) {\n    TestBed.overrideModule(def, override);\n  }\n  if (isNgDef(def, 't')) {\n    TestBed.overrideProvider(def, override);\n  } else if (isNgDef(def, 'i')) {\n    TestBed.overrideProvider(def, override);\n  }\n};\n\nconst applyOverrides = (overrides: Map<AnyType<any>, [MetadataOverride<any>, MetadataOverride<any>]>): void => {\n  for (const [def, [override, original]] of mapEntries(overrides)) {\n    (TestBed as any).ngMocksOverrides.set(def, {\n      ...original,\n      override,\n    });\n    applyOverride(def, override);\n  }\n};\n\n// Thanks Ivy and its TestBed.override - it does not clean up leftovers.\nconst applyNgMocksOverrides = (testBed: TestBedStatic & { ngMocksOverrides?: Map<any, any> }): void => {\n  if (testBed.ngMocksOverrides?.size) {\n    ngMocks.flushTestBed();\n    for (const [def, original] of mapEntries(testBed.ngMocksOverrides)) {\n      applyOverride(def, original);\n    }\n  }\n  testBed.ngMocksOverrides = undefined;\n};\n\nconst initTestBed = () => {\n  if (!(TestBed as any).ngMocksSelectors) {\n    coreDefineProperty(TestBed, 'ngMocksSelectors', new Map());\n  }\n  // istanbul ignore else\n  if (!(TestBed as any).ngMocksOverrides) {\n    coreDefineProperty(TestBed, 'ngMocksOverrides', new Map());\n  }\n};\n\nconst generateTouches = (moduleDef: Partial<Record<dependencyKeys, any>>, touches: Set<any>): void => {\n  for (const key of coreConfig.dependencies) {\n    for (const item of moduleDef[key] ? flatten(moduleDef[key]) : []) {\n      const def = funcGetType(item);\n      if (isNgModuleDefWithProviders(item)) {\n        generateTouches(item, touches);\n      }\n      if (touches.has(def)) {\n        continue;\n      }\n      touches.add(def);\n      if (typeof def !== 'function') {\n        continue;\n      }\n\n      if (!Object.prototype.hasOwnProperty.call(def, '__ngMocksTouches')) {\n        const local = new Set<any>();\n        const meta = coreReflectMeta(def);\n        coreDefineProperty(def, '__ngMocksTouches', local, false);\n        if (meta) {\n          generateTouches(meta, local);\n        }\n      }\n\n      mapValues(def.__ngMocksTouches, touches);\n    }\n  }\n};\n\nconst defineTouches = (testBed: TestBed, moduleDef: TestModuleMetadata, knownTouches?: Set<any>) => {\n  let touches = knownTouches;\n\n  if (!touches && ngMocksUniverse.getDefaults().size > 0) {\n    touches = funcExtractTokens(\n      (testBed as any)._providers || /* istanbul ignore next Ivy part */ (testBed as any)._compiler?.providers,\n    ).touches;\n    if (!touches) {\n      touches = new Set();\n      moduleDef.providers = moduleDef.providers || [];\n      moduleDef.providers.push({ provide: NG_MOCKS_TOUCHES, useValue: touches });\n    }\n    generateTouches(moduleDef, touches);\n  }\n\n  return touches;\n};\n\nconst applyPlatformOverrideDef = (def: any) => {\n  const ngModule = funcGetType(def);\n  if ((TestBed as any).ngMocksOverrides.has(ngModule)) {\n    return;\n  }\n\n  const original = coreReflectModuleResolve(ngModule);\n  const set = getOverrideDef(original);\n  if (set) {\n    (TestBed as any).ngMocksOverrides.set(ngModule, { set: original });\n    TestBed.overrideModule(ngModule, { set });\n  }\n};\n\nconst applyPlatformOverridesBasedOnProvidedIn = (provide: any, touches: Set<any>) => {\n  const providedIn = coreReflectProvidedIn(provide);\n  if (!providedIn) {\n    return;\n  }\n  // knownTouches present from MockBuilder and we can rely on it,\n  // otherwise we have to override the provider always.\n  if (typeof providedIn !== 'string' && !touches.has(providedIn)) {\n    return;\n  }\n  (TestBed as any).ngMocksOverrides.set(provide, {});\n  TestBed.overrideProvider(provide, MockProvider(provide as never));\n};\n\nconst applyPlatformOverridesBasedOnDefaults = (touches: Set<any>) => {\n  for (const [provide, [config]] of mapEntries(ngMocksUniverse.getDefaults())) {\n    if (config !== 'mock') {\n      continue;\n    }\n    if (!isNgDef(provide, 'i') && !isNgDef(provide, 't')) {\n      continue;\n    }\n    if (touches.has(provide)) {\n      continue;\n    }\n    if ((TestBed as any).ngMocksOverrides.has(provide)) {\n      continue;\n    }\n    applyPlatformOverridesBasedOnProvidedIn(provide, touches);\n  }\n};\n\nconst applyPlatformOverrides = (testBed: TestBed, touches: Set<any>) => {\n  // istanbul ignore else\n  if ((TestBed as any).ngMocksOverrides) {\n    const backup = ngMocksUniverse.touches;\n    ngMocksUniverse.touches = touches;\n    for (const def of flatten(testBed.ngModule || /* istanbul ignore next */ [])) {\n      applyPlatformOverrideDef(def);\n    }\n    applyPlatformOverridesBasedOnDefaults(touches);\n    ngMocksUniverse.touches = backup;\n  }\n};\n\nconst configureTestingModule =\n  (\n    original: TestBedStatic['configureTestingModule'],\n    instance: TestBedStatic,\n  ): TestBedStatic['configureTestingModule'] =>\n  (moduleDef: TestModuleMetadata) => {\n    initTestBed();\n\n    const useMockBuilder =\n      typeof moduleDef === 'object' &&\n      !!moduleDef &&\n      (!moduleDef.providers || moduleDef.providers.indexOf(MockBuilder) === -1);\n    // 0b10 - mock exist\n    // 0b01 - real exist\n    let hasMocks = 0;\n    const mockBuilder: Array<[any, any, boolean]> = [];\n    for (const key of useMockBuilder ? ['imports', 'declarations'] : []) {\n      for (const declaration of flatten(moduleDef[key as never]) as any[]) {\n        if (!declaration) {\n          continue;\n        }\n        mockBuilder.push([\n          isNgModuleDefWithProviders(declaration)\n            ? {\n                ngModule: getSourceOfMock(declaration.ngModule),\n                providers: declaration.providers,\n              }\n            : getSourceOfMock(declaration),\n          isNgModuleDefWithProviders(declaration) ? declaration.ngModule : declaration,\n          isMockNgDef(funcGetType(declaration)),\n        ]);\n        hasMocks |= mockBuilder[mockBuilder.length - 1][2] ? 0b10 : 0b01;\n      }\n    }\n    // We should do magic only then both mock and real exist.\n    let finalModuleDef = hasMocks === 0b11 ? undefined : moduleDef;\n    if (!finalModuleDef) {\n      let builder = MockBuilder(NG_MOCKS_ROOT_PROVIDERS);\n\n      for (const [source, def, isMock] of mockBuilder) {\n        const transform = def.prototype.__ngMocksConfig?.transform;\n        const options = {\n          export: !isNgDef(source, 'm'),\n          exportAll: false,\n          onRoot: true,\n        };\n        builder =\n          isMock && transform\n            ? builder.mock(source, transform, options)\n            : isMock\n            ? builder.mock(source, options)\n            : builder.keep(source, options);\n      }\n\n      finalModuleDef = builder.build();\n      finalModuleDef = {\n        ...moduleDef,\n        ...finalModuleDef,\n        providers: [...(moduleDef.providers ?? []), ...(finalModuleDef.providers as never)],\n      };\n    }\n\n    const testBed = getTestBed();\n\n    const providers = funcExtractTokens(finalModuleDef.providers);\n    const { mocks, overrides } = providers;\n    // touches are important,\n    // therefore we are trying to fetch them from the known providers.\n    const touches = defineTouches(testBed, finalModuleDef, providers.touches);\n\n    if (mocks) {\n      ngMocks.flushTestBed();\n    }\n\n    // istanbul ignore else\n    if (overrides) {\n      applyOverrides(overrides);\n    }\n    // _testModuleRef exists only after the 1st call,\n    // so we shouldn't override platform again.\n    if (touches && !(testBed as any)._instantiated && !(testBed as any)._testModuleRef) {\n      applyPlatformOverrides(testBed, touches);\n    }\n\n    return original.call(instance, finalModuleDef);\n  };\n\nconst resetTestingModule =\n  (original: TestBedStatic['resetTestingModule'], instance: TestBedStatic): TestBedStatic['resetTestingModule'] =>\n  () => {\n    ngMocksUniverse.global.delete('builder:config');\n    ngMocksUniverse.global.delete('builder:module');\n    (TestBed as any).ngMocksSelectors = undefined;\n    applyNgMocksOverrides(TestBed);\n\n    return original.call(instance);\n  };\n\n// Monkey-patching ViewContainerRef.createComponent to replace dynamic imports with mocked declarations.\nconst patchVcrInstance = (vcrInstance: ViewContainerRef) => {\n  if (!(ViewContainerRef as any).ngMocksOverridesPatched) {\n    coreDefineProperty(ViewContainerRef, 'ngMocksOverridesPatched', true);\n\n    // istanbul ignore else\n    if (vcrInstance.createComponent) {\n      const createComponent = vcrInstance.createComponent;\n      const patchedCreateComponent = helperCreateClone(\n        createComponent,\n        undefined,\n        undefined,\n        function (component: any, ...createComponentArgs: any[]) {\n          // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n          // @ts-ignore\n          const thisVrc: ViewContainerRef = this;\n          const map = coreInjector(NG_MOCKS, thisVrc.injector);\n\n          return createComponent.apply(thisVrc, [map?.get(component) ?? component, ...createComponentArgs] as any);\n        },\n      );\n\n      coreDefineProperty(vcrInstance.constructor.prototype, 'createComponent', patchedCreateComponent, true);\n      coreDefineProperty(vcrInstance, 'createComponent', patchedCreateComponent, true);\n    }\n  }\n};\n\nconst createComponent =\n  (original: TestBedStatic['createComponent'], instance: TestBedStatic): TestBedStatic['createComponent'] =>\n  component => {\n    const fixture = original.call(instance, component);\n    try {\n      const vcr = fixture.debugElement.injector.get(ViewContainerRef);\n      patchVcrInstance(vcr);\n    } catch {\n      // nothing to do\n    }\n\n    return fixture as never;\n  };\n\nconst viewContainerInstall = () => {\n  const vcr: any = ViewContainerRef;\n\n  // istanbul ignore else\n  if (!vcr.ngMocksOverridesInstalled) {\n    const ngElementId = vcr.__NG_ELEMENT_ID__;\n\n    // istanbul ignore else\n    if (ngElementId) {\n      coreDefineProperty(\n        vcr,\n        '__NG_ELEMENT_ID__',\n        helperCreateClone(ngElementId, undefined, undefined, (...ngElementIdArgs: any[]) => {\n          const vcrInstance = ngElementId.apply(ngElementId, ngElementIdArgs);\n          patchVcrInstance(vcrInstance);\n\n          return vcrInstance;\n        }),\n        true,\n      );\n    }\n    coreDefineProperty(TestBed, 'createComponent', createComponent(TestBed.createComponent as never, TestBed as never));\n\n    coreDefineProperty(ViewContainerRef, 'ngMocksOverridesInstalled', true);\n  }\n};\n\n// this function monkey-patches Angular injectors.\nconst installInjector = (injector: Injector & { __ngMocksInjector?: any }): Injector => {\n  // skipping the matched injector\n  if (injector.constructor.prototype.__ngMocksInjector || !injector.constructor.prototype.get) {\n    return injector;\n  }\n\n  // marking the injector as patched\n  coreDefineProperty(injector.constructor.prototype, '__ngMocksInjector', true);\n  const injectorGet = injector.constructor.prototype.get;\n\n  // patch\n  injector.constructor.prototype.get = helperCreateClone(\n    injectorGet,\n    undefined,\n    undefined,\n    function (token: any, ...argsGet: any) {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      const binding: any = this;\n\n      // Here we can implement custom logic how to inject token,\n      // for example, replace with a provider def we need.\n\n      const result = injectorGet.call(binding, token, ...argsGet);\n      // If the result is an injector, we should patch it too.\n      if (\n        result &&\n        typeof result === 'object' &&\n        typeof result.constructor === 'function' &&\n        typeof result.constructor.name === 'string' &&\n        result.constructor.name.slice(-8) === 'Injector'\n      ) {\n        installInjector(result);\n      }\n\n      return result;\n    },\n  );\n\n  return injector;\n};\n\nconst install = () => {\n  // istanbul ignore else\n  if (!(TestBed as any).ngMocksOverridesInstalled) {\n    const hooks = mockHelperFasterInstall();\n    viewContainerInstall();\n\n    // istanbul ignore else\n    if (hooks.before.indexOf(configureTestingModule) === -1) {\n      hooks.before.push(configureTestingModule);\n    }\n    // istanbul ignore else\n    if (hooks.after.indexOf(resetTestingModule) === -1) {\n      hooks.after.push(resetTestingModule);\n    }\n\n    coreDefineProperty(TestBed, 'ngMocksOverridesInstalled', true);\n    const injectorCreate = Injector.create;\n    Injector.create = helperCreateClone(injectorCreate, undefined, undefined, (...argsCreate: any) =>\n      installInjector(injectorCreate.apply(Injector, argsCreate)),\n    );\n    try {\n      // force install of our injector.\n      Injector.create({ length: 0, providers: [] } as never);\n    } catch {\n      // nothing to do.\n    }\n  }\n};\n\ninstall();\n","import ngMocksUniverse from './ng-mocks-universe';\n\nexport interface NgMocksStack {\n  id: object;\n  level: 'root' | 'runtime';\n  mockInstance?: any[];\n}\n\ntype NgMocksStackCallback = (state: NgMocksStack, stack: NgMocksStack[]) => void;\n\nconst stackRoot: NgMocksStack = { id: {}, level: 'root' };\nconst stack: NgMocksStack[] = ngMocksUniverse.global.get('reporter-stack') || [{ ...stackRoot }];\nngMocksUniverse.global.set('reporter-stack', stack);\nconst current = () => stack[stack.length - 1];\n\n// istanbul ignore next\nconst listenersPush: NgMocksStackCallback[] = ngMocksUniverse.global.get('reporter-stack-push') ?? [];\nngMocksUniverse.global.set('reporter-stack-push', listenersPush);\n\n// istanbul ignore next\nconst listenersPop: NgMocksStackCallback[] = ngMocksUniverse.global.get('reporter-stack-pop') ?? [];\nngMocksUniverse.global.set('reporter-stack-pop', listenersPop);\n\nconst stackPush = () => {\n  const id = {};\n  ngMocksUniverse.global.set('reporter-stack-id', id);\n  const state: NgMocksStack = { id, level: 'runtime' };\n  stack.push(state);\n\n  for (const callback of listenersPush) {\n    callback(state, stack);\n  }\n};\nconst stackPop = () => {\n  const state = stack.pop();\n\n  // this code is actually needed for jest tests.\n  // istanbul ignore if\n  if (stack.length === 0) {\n    stack.push(state?.level === 'root' ? state : { ...stackRoot });\n  }\n\n  // istanbul ignore else\n  if (state && state.level !== 'root') {\n    for (const callback of listenersPop) {\n      callback(state, stack);\n    }\n  }\n\n  ngMocksUniverse.global.set('reporter-stack-id', stack[stack.length - 1].id);\n};\n\n// istanbul ignore next\nconst subscribePush = (callback: NgMocksStackCallback) => {\n  if (listenersPush.indexOf(callback)) {\n    listenersPush.push(callback);\n  }\n  if (stack.length > 0) {\n    callback(stack[stack.length - 1], stack);\n  }\n};\n\n// istanbul ignore next\nconst subscribePop = (callback: NgMocksStackCallback) => {\n  if (listenersPop.indexOf(callback) === -1) {\n    listenersPop.push(callback);\n  }\n};\n\n// istanbul ignore next\nconst unsubscribePush = (callback: NgMocksStackCallback) => {\n  const index = listenersPush.indexOf(callback);\n  if (index !== -1) {\n    listenersPush.splice(index, 1);\n  }\n};\n\n// istanbul ignore next\nconst unsubscribePop = (callback: NgMocksStackCallback) => {\n  const index = listenersPop.indexOf(callback);\n  if (index !== -1) {\n    listenersPop.splice(index, 1);\n  }\n};\n\nexport default {\n  current,\n  stackPop,\n  stackPush,\n  subscribePop,\n  subscribePush,\n  unsubscribePop,\n  unsubscribePush,\n};\n","import { IMockBuilderConfig } from '../mock-builder/types';\n\nimport coreConfig from './core.config';\nimport { AnyDeclaration } from './core.types';\nimport funcGetGlobal from './func.get-global';\nimport funcGetName from './func.get-name';\n\nconst globalMap = (key: string) => () => {\n  if (!ngMocksUniverse.global.has(key)) {\n    ngMocksUniverse.global.set(key, new Map());\n  }\n\n  return ngMocksUniverse.global.get(key);\n};\n\ninterface NgMocksUniverse {\n  /**\n   * the value can be:\n   * - null - exclude\n   * - undefined - delayed initialization\n   * - value - the definition which should be used in tests: real value, replacement, mock.\n   */\n  builtDeclarations: Map<any, any>;\n  builtProviders: Map<any, any>;\n  cacheDeclarations: Map<any, any>;\n  cacheProviders: Map<any, any>;\n  config: Map<any, any>;\n  configInstance: Map<any, any>;\n  flags: Set<string>;\n  getBuildDeclaration: (def: any) => any | undefined;\n  getConfigMock: () => Map<any, IMockBuilderConfig>;\n  getDefaults: () => Map<any, ['mock' | 'keep' | 'replace' | 'exclude', any?]>;\n  getLocalMocks: () => Array<[any, any]>;\n  getOverrides: () => Map<any, any>;\n  getResolution: (def: any) => undefined | 'mock' | 'keep' | 'replace' | 'exclude';\n  global: Map<any, any>;\n  hasBuildDeclaration: (def: any) => boolean;\n  isExcludedDef: (def: any) => boolean;\n  isProvidedDef: (def: any) => boolean;\n  touches: Set<AnyDeclaration<any> | string>;\n  indexValue: number;\n  index: () => number;\n}\n\nfuncGetGlobal().ngMocksUniverse = funcGetGlobal().ngMocksUniverse || {};\nconst ngMocksUniverse: NgMocksUniverse = funcGetGlobal().ngMocksUniverse;\n\nngMocksUniverse.builtDeclarations = new Map();\nngMocksUniverse.builtProviders = new Map();\nngMocksUniverse.cacheDeclarations = new Map();\nngMocksUniverse.cacheProviders = new Map();\nngMocksUniverse.config = new Map();\nngMocksUniverse.configInstance = new Map();\nngMocksUniverse.flags = new Set(coreConfig.flags);\nngMocksUniverse.global = new Map();\nngMocksUniverse.touches = new Set();\n\nngMocksUniverse.global.set('flags', {\n  // @deprecated and will be changed in A13 to 'throw'\n  onMockBuilderMissingDependency: coreConfig.onMockBuilderMissingDependency,\n  // @deprecated and will be changed in A13 to 'throw'\n  onMockInstanceRestoreNeed: coreConfig.onMockInstanceRestoreNeed,\n  // @deprecated and will be changed in A13 to 'throw'\n  onTestBedFlushNeed: coreConfig.onTestBedFlushNeed,\n});\n\nngMocksUniverse.getOverrides = globalMap('overrides');\nngMocksUniverse.getDefaults = globalMap('defaults');\nngMocksUniverse.getConfigMock = globalMap('configMock');\n\nconst getDefaults = (def: any): [] | ['mock' | 'keep' | 'replace' | 'exclude', any?] => {\n  {\n    const defValue = ngMocksUniverse.getDefaults().get(def);\n    if (defValue) {\n      return defValue;\n    }\n  }\n\n  {\n    const defValue = typeof def === 'function' ? ngMocksUniverse.getDefaults().get(`@${funcGetName(def)}`) : undefined;\n    if (defValue) {\n      return defValue;\n    }\n  }\n\n  return [];\n};\n\nngMocksUniverse.getResolution = (def: any): undefined | 'mock' | 'keep' | 'replace' | 'exclude' => {\n  const set = ngMocksUniverse.config.get('ngMocksDepsResolution');\n  if (set?.has(def)) {\n    return set.get(def);\n  }\n  const [value] = getDefaults(def);\n\n  return value;\n};\n\nngMocksUniverse.getBuildDeclaration = (def: any): undefined | null | any => {\n  if (ngMocksUniverse.builtDeclarations.has(def)) {\n    return ngMocksUniverse.builtDeclarations.get(def);\n  }\n  const [mode, replacement] = getDefaults(def);\n\n  if (mode === 'exclude') {\n    return null;\n  }\n  if (mode === 'keep') {\n    return def;\n  }\n  if (mode === 'replace') {\n    return replacement;\n  }\n};\n\nngMocksUniverse.hasBuildDeclaration = (def: any): boolean => {\n  if (ngMocksUniverse.builtDeclarations.has(def)) {\n    // undefined means that we know about this declaration,\n    // but its initialization is postponed at the moment.\n    return ngMocksUniverse.builtDeclarations.get(def) !== undefined;\n  }\n  const [mode] = getDefaults(def);\n\n  return !!mode && mode !== 'mock';\n};\n\nconst hasBuildDeclaration = (def: any): boolean => ngMocksUniverse.hasBuildDeclaration(def);\nconst getBuildDeclaration = (def: any): any => ngMocksUniverse.getBuildDeclaration(def);\n\nngMocksUniverse.isExcludedDef = (def: any): boolean => {\n  const resolution = ngMocksUniverse.getResolution(def);\n  if (resolution && resolution !== 'exclude') {\n    return false;\n  }\n\n  return hasBuildDeclaration(def) && getBuildDeclaration(def) === null;\n};\n\nngMocksUniverse.isProvidedDef = (def: any): boolean => hasBuildDeclaration(def) && getBuildDeclaration(def) !== null;\n\n// excluding StoreDevtoolsModule by default\nngMocksUniverse.getDefaults().set('@StoreDevtoolsModule', ['exclude']);\n\nngMocksUniverse.indexValue = 0;\nngMocksUniverse.index = () => {\n  return ngMocksUniverse.indexValue++;\n};\n\nexport default ((): NgMocksUniverse => ngMocksUniverse)();\n","import { MetadataOverride } from '@angular/core/testing';\n\nimport { flatten } from '../common/core.helpers';\nimport { NG_MOCKS, NG_MOCKS_OVERRIDES, NG_MOCKS_TOUCHES } from '../common/core.tokens';\nimport { AnyType } from '../common/core.types';\n\nexport default (\n  providers: any,\n): {\n  mocks?: Map<any, any>;\n  overrides?: Map<AnyType<any>, [MetadataOverride<any>, MetadataOverride<any>]>;\n  touches?: Set<any>;\n} => {\n  let mocks: Map<any, any> | undefined;\n  let overrides: Map<AnyType<any>, [MetadataOverride<any>, MetadataOverride<any>]> | undefined;\n  let touches: Set<any> | undefined;\n\n  for (const provide of flatten(providers || [])) {\n    if (typeof provide !== 'object') {\n      continue;\n    }\n    if (provide.provide === NG_MOCKS) {\n      mocks = provide.useValue;\n    }\n    if (provide.provide === NG_MOCKS_OVERRIDES) {\n      overrides = provide.useValue;\n    }\n    if (provide.provide === NG_MOCKS_TOUCHES) {\n      touches = provide.useValue;\n    }\n  }\n\n  return {\n    mocks,\n    overrides,\n    touches,\n  };\n};\n","import coreConfig from '../common/core.config';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nexport class MockBuilderStash {\n  protected data: Record<keyof any, any> = {};\n\n  public backup(): void {\n    this.data = {\n      builtDeclarations: ngMocksUniverse.builtDeclarations,\n      builtProviders: ngMocksUniverse.builtProviders,\n      cacheDeclarations: ngMocksUniverse.cacheDeclarations,\n      cacheProviders: ngMocksUniverse.cacheProviders,\n      config: ngMocksUniverse.config,\n      configInstance: ngMocksUniverse.configInstance,\n      flags: ngMocksUniverse.flags,\n      touches: ngMocksUniverse.touches,\n    };\n\n    ngMocksUniverse.builtDeclarations = new Map();\n    ngMocksUniverse.builtProviders = new Map();\n    ngMocksUniverse.cacheDeclarations = new Map();\n    ngMocksUniverse.cacheProviders = new Map();\n    ngMocksUniverse.config = new Map();\n    ngMocksUniverse.configInstance = new Map();\n    ngMocksUniverse.flags = new Set(coreConfig.flags);\n    ngMocksUniverse.touches = new Set();\n  }\n\n  public restore(): void {\n    for (const key of Object.keys(this.data)) {\n      (ngMocksUniverse as any)[key] = (this.data as any)[key];\n    }\n  }\n}\n","import { TestBed, TestModuleMetadata } from '@angular/core/testing';\n\nimport { mapEntries, mapValues } from '../common/core.helpers';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nimport { MockBuilderPromise } from './mock-builder.promise';\nimport areEqualConfigParams from './performance/are-equal-config-params';\nimport areEqualMaps from './performance/are-equal-maps';\nimport areEqualProviders from './performance/are-equal-providers';\nimport areEqualSets from './performance/are-equal-sets';\nimport getEmptyConfig from './performance/get-empty-config';\nimport requiredMetadata from './performance/required-metadata';\nimport { IMockBuilderResult } from './types';\n\nexport class MockBuilderPerformance extends MockBuilderPromise {\n  public build(): TestModuleMetadata {\n    const global = ngMocksUniverse.global;\n\n    // avoiding influences on cache when users extend the testing module.\n    if (global.has('builder:module') && global.has('builder:config') && this.equalsTo(global.get('builder:config'))) {\n      return requiredMetadata(global.get('builder:module'));\n    }\n\n    // removal of cached promise in case of mismatch\n    if (global.has('builder:module')) {\n      global.delete(global.get('builder:module'));\n    }\n\n    const clone = this.cloneConfig();\n    const ngModule = super.build();\n    global.set('builder:config', clone);\n    global.set('builder:module', ngModule);\n\n    // avoiding influences on cache when users extend the testing module.\n    return requiredMetadata(ngModule);\n  }\n\n  // eslint-disable-next-line unicorn/no-thenable\n  public async then<TResult1 = IMockBuilderResult>(\n    fulfill?: ((value: IMockBuilderResult) => PromiseLike<TResult1>) | undefined | null,\n    reject?: ((reason: any) => PromiseLike<never>) | undefined | null,\n  ): Promise<TResult1> {\n    const global = ngMocksUniverse.global;\n\n    const flags = global.has('bullet') && global.has('builder:module') && global.has('builder:config');\n    if (flags && this.equalsTo(global.get('builder:config'))) {\n      return global.get(global.get('builder:module')).then(fulfill, reject);\n    }\n\n    // we need to reset testing module in case if we are in bullet mode but current module does not match.\n    if (global.has('bullet') && global.has('bullet:reset')) {\n      console.warn('ngMocks.faster has zero effect due to changes in testing module between runs');\n      global.delete('bullet');\n      TestBed.resetTestingModule();\n      global.set('bullet', true);\n    }\n\n    const promise = super.then(fulfill, reject);\n    global.set(global.get('builder:module'), promise);\n\n    return promise;\n  }\n\n  private cloneConfig() {\n    const config = getEmptyConfig();\n\n    mapValues(this.beforeCC, config.beforeCC);\n    mapValues(this.excludeDef, config.excludeDef);\n    mapValues(this.keepDef, config.keepDef);\n    mapValues(this.mockDef, config.mockDef);\n    mapValues(this.replaceDef, config.replaceDef);\n\n    mapEntries(this.configDef, config.configDef);\n    mapEntries(this.defProviders, config.defProviders);\n    mapEntries(this.defValue, config.defValue);\n    mapEntries(this.providerDef, config.providerDef);\n\n    return config;\n  }\n\n  private equalsTo(prototype: Record<keyof any, any>): boolean {\n    for (const key of ['beforeCC', 'keepDef', 'replaceDef', 'excludeDef', 'mockDef']) {\n      if (!areEqualSets((this as any)[key], prototype[key])) {\n        return false;\n      }\n    }\n    for (const key of ['defValue']) {\n      if (!areEqualMaps((this as any)[key], prototype[key])) {\n        return false;\n      }\n    }\n    for (const key of ['providerDef', 'defProviders']) {\n      if (!areEqualMaps((this as any)[key], prototype[key], areEqualProviders)) {\n        return false;\n      }\n    }\n\n    return areEqualMaps(this.configDef, prototype.configDef, areEqualConfigParams);\n  }\n}\n","import { NgModule, Provider } from '@angular/core';\nimport { TestBed, TestBedStatic, TestModuleMetadata } from '@angular/core/testing';\n\nimport CoreDefStack from '../common/core.def-stack';\nimport { flatten, mapValues } from '../common/core.helpers';\nimport { Type } from '../common/core.types';\nimport funcGetName from '../common/func.get-name';\nimport { isNgDef } from '../common/func.is-ng-def';\nimport { isNgModuleDefWithProviders } from '../common/func.is-ng-module-def-with-providers';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nimport { MockBuilder } from './mock-builder';\nimport { MockBuilderStash } from './mock-builder-stash';\nimport addRequestedProviders from './promise/add-requested-providers';\nimport applyPlatformModules from './promise/apply-platform-modules';\nimport createNgMocksOverridesToken from './promise/create-ng-mocks-overrides-token';\nimport createNgMocksToken from './promise/create-ng-mocks-token';\nimport createNgMocksTouchesToken from './promise/create-ng-mocks-touches-token';\nimport handleEntryComponents from './promise/handle-entry-components';\nimport handleRootProviders from './promise/handle-root-providers';\nimport initNgModules from './promise/init-ng-modules';\nimport initUniverse from './promise/init-universe';\nimport parseMockArguments from './promise/parse-mock-arguments';\nimport parseProvider from './promise/parse-provider';\nimport { BuilderData } from './promise/types';\nimport { IMockBuilder, IMockBuilderConfig, IMockBuilderConfigAll, IMockBuilderResult } from './types';\n\nconst normaliseModule = (\n  module: any,\n): {\n  def: Type<any>;\n  providers?: NgModule['providers'];\n} =>\n  isNgModuleDefWithProviders(module)\n    ? { def: module.ngModule, providers: module.providers }\n    : { def: module, providers: undefined };\n\nconst generateProviderValue = (provider: any, existing: any, multi: boolean): any =>\n  multi ? [...(Array.isArray(existing) ? existing : /* istanbul ignore next */ []), provider] : provider;\n\nconst defaultMock = {}; // simulating Symbol\n\nexport interface MockBuilderPromise {\n  [Symbol.toStringTag]: 'Promise';\n}\n\nexport class MockBuilderPromise implements IMockBuilder {\n  protected beforeCC: Set<(testBed: TestBedStatic) => void> = new Set();\n  protected configDef: BuilderData['configDef'] = new Map();\n  protected defProviders: BuilderData['defProviders'] = new Map();\n  protected defValue: BuilderData['defValue'] = new Map();\n  protected excludeDef: BuilderData['excludeDef'] = new Set();\n  protected keepDef: BuilderData['keepDef'] = new Set();\n  protected mockDef: BuilderData['mockDef'] = new Set();\n  protected providerDef: BuilderData['providerDef'] = new Map();\n  protected replaceDef: BuilderData['replaceDef'] = new Set();\n  protected stash: MockBuilderStash = new MockBuilderStash();\n\n  public constructor(protected configDefault: IMockBuilderConfigAll) {\n    // istanbul ignore else\n    if (typeof Symbol !== 'undefined') {\n      (this as any)[Symbol.toStringTag] = 'Promise';\n    }\n  }\n\n  public beforeCompileComponents(callback: (testBed: TestBedStatic) => void): this {\n    this.beforeCC.add(callback);\n\n    return this;\n  }\n\n  public build(): TestModuleMetadata {\n    this.stash.backup();\n    const defStack = new CoreDefStack();\n    ngMocksUniverse.config.set('mockNgDefResolver', defStack);\n    ngMocksUniverse.flags.add('hasRootModule');\n\n    try {\n      const params = this.combineParams();\n\n      const ngModule = initNgModules(params, initUniverse(params));\n      addRequestedProviders(ngModule, params, defStack);\n      handleRootProviders(ngModule, params, defStack);\n      handleEntryComponents(ngModule);\n      applyPlatformModules();\n\n      ngModule.providers.push(\n        createNgMocksToken(),\n        createNgMocksTouchesToken(),\n        createNgMocksOverridesToken(this.replaceDef, this.defValue),\n        MockBuilder as never,\n      );\n\n      return ngModule;\n    } finally {\n      ngMocksUniverse.flags.delete('hasRootModule');\n      ngMocksUniverse.config.delete('mockNgDefResolver');\n      this.stash.restore();\n    }\n  }\n\n  // istanbul ignore next\n  public async catch(reject?: ((reason: any) => PromiseLike<never>) | undefined | null): Promise<IMockBuilderResult> {\n    return this.then().catch(reject);\n  }\n\n  public exclude(def: any): this {\n    this.wipe(def);\n    this.excludeDef.add(def);\n    this.setConfigDef(def);\n\n    return this;\n  }\n\n  // istanbul ignore next\n  public async finally(callback?: (() => void) | null | undefined): Promise<IMockBuilderResult> {\n    return this.then().finally(callback);\n  }\n\n  public keep(input: any, config?: IMockBuilderConfig): this {\n    const { def, providers } = normaliseModule(input);\n\n    const existing = this.keepDef.has(def) ? this.defProviders.get(def) : [];\n    this.wipe(def);\n    this.keepDef.add(def);\n\n    // a magic to support modules with providers.\n    if (providers) {\n      this.defProviders.set(def, [...(existing || /* istanbul ignore next */ []), ...providers]);\n    }\n\n    this.setConfigDef(def, config);\n\n    return this;\n  }\n\n  public mock(input: any, a1: any = defaultMock, a2?: any): this {\n    const { def, providers } = normaliseModule(input);\n\n    const { config, mock } = parseMockArguments(def, a1, a2, defaultMock);\n    if (isNgDef(mock) && isNgDef(input) && !isNgDef(input, 't')) {\n      throw new Error(\n        [\n          `MockBuilder.mock(${funcGetName(input)}) received a class when its shape is expected.`,\n          'Please try ngMocks.defaultMock instead.',\n        ].join(' '),\n      );\n    }\n\n    const existing = this.mockDef.has(def) ? this.defProviders.get(def) : [];\n    this.wipe(def);\n    this.mockDef.add(def);\n\n    // a magic to support modules with providers.\n    if (providers) {\n      this.defProviders.set(def, [...(existing || /* istanbul ignore next */ []), ...providers]);\n    }\n\n    this.setDefValue(def, mock);\n    this.setConfigDef(def, config);\n\n    return this;\n  }\n\n  public provide(def: Provider): this {\n    for (const provider of flatten(def)) {\n      const { provide, multi } = parseProvider(provider);\n      const existing = this.providerDef.has(provide) ? this.providerDef.get(provide) : [];\n      this.providerDef.set(provide, generateProviderValue(provider, existing, multi));\n    }\n\n    return this;\n  }\n\n  public replace(source: Type<any>, destination: Type<any>, config?: IMockBuilderConfig): this {\n    if (!isNgDef(destination) || !isNgDef(source) || isNgDef(destination, 'i') || isNgDef(source, 'i')) {\n      throw new Error(\n        'Cannot replace the declaration, both have to be a Module, a Component, a Directive or a Pipe, for Providers use `.mock` or `.provide`',\n      );\n    }\n\n    this.wipe(source);\n    this.replaceDef.add(source);\n    this.defValue.set(source, destination);\n    this.setConfigDef(source, config);\n\n    return this;\n  }\n\n  // eslint-disable-next-line unicorn/no-thenable\n  public async then<TResult1 = IMockBuilderResult>(\n    fulfill?: ((value: IMockBuilderResult) => PromiseLike<TResult1>) | undefined | null,\n    reject?: ((reason: any) => PromiseLike<any>) | undefined | null,\n  ): Promise<TResult1> {\n    const promise = new Promise((resolve: (value: IMockBuilderResult) => void): void => {\n      const testBed: TestBedStatic = TestBed.configureTestingModule(this.build()) as never;\n      for (const callback of mapValues(this.beforeCC)) {\n        callback(testBed);\n      }\n      const testBedPromise = testBed.compileComponents();\n      testBedPromise.then(() => {\n        resolve({ testBed });\n      });\n    });\n\n    return promise.then(fulfill, reject);\n  }\n\n  private combineParams(): BuilderData {\n    return {\n      configDef: this.configDef,\n      configDefault: this.configDefault,\n      defProviders: this.defProviders,\n      defValue: this.defValue,\n      excludeDef: this.excludeDef,\n      keepDef: this.keepDef,\n      mockDef: this.mockDef,\n      providerDef: this.providerDef,\n      replaceDef: this.replaceDef,\n    };\n  }\n\n  private setConfigDef(def: any, config?: any): void {\n    if (config || !this.configDef.has(def)) {\n      this.configDef.set(def, config ?? this.configDefault);\n    }\n  }\n\n  private setDefValue(def: any, mock: any): void {\n    if (mock === defaultMock) {\n      this.defValue.delete(def);\n    } else {\n      this.defValue.set(def, mock);\n    }\n  }\n\n  private wipe(def: Type<any>): void {\n    this.defProviders.delete(def);\n    this.defValue.delete(def);\n    this.excludeDef.delete(def);\n    this.keepDef.delete(def);\n    this.mockDef.delete(def);\n    this.providerDef.delete(def);\n    this.replaceDef.delete(def);\n  }\n}\n","import { flatten } from '../common/core.helpers';\nimport { AnyDeclaration } from '../common/core.types';\nimport { NgModuleWithProviders } from '../common/func.is-ng-module-def-with-providers';\nimport { isStandalone } from '../common/func.is-standalone';\n\nimport { MockBuilderPerformance } from './mock-builder.performance';\nimport { IMockBuilder } from './types';\n\nexport type MockBuilderParam = string | AnyDeclaration<any> | NgModuleWithProviders;\n\n/**\n * MockBuilder provides reach and simple interfaces of chain functions\n * to build desired mock environment for tests.\n *\n * @see https://ng-mocks.sudo.eu/api/MockBuilder\n */\nexport function MockBuilder(\n  keepDeclaration?: MockBuilderParam | MockBuilderParam[] | null | undefined,\n  itsModuleToMock?: MockBuilderParam | MockBuilderParam[] | null | undefined,\n): IMockBuilder;\n\nexport function MockBuilder(...args: Array<MockBuilderParam | MockBuilderParam[] | null | undefined>): IMockBuilder {\n  const [keepDeclaration, itsModuleToMock] = args;\n\n  const instance = new MockBuilderPerformance(args.length < 2 ? { export: true } : { dependency: true });\n\n  if (keepDeclaration) {\n    for (const declaration of flatten(keepDeclaration)) {\n      instance.keep(declaration, {\n        export: true,\n        shallow: isStandalone(declaration),\n      });\n    }\n  }\n  if (itsModuleToMock) {\n    for (const declaration of flatten(itsModuleToMock)) {\n      instance.mock(declaration, declaration, {\n        export: true,\n        exportAll: true,\n      });\n    }\n  }\n\n  return instance;\n}\n","import equalRenderConfigs from './equal-render-configs';\n\nexport default (source: any, destination: any): boolean => {\n  if (destination === source) {\n    return true;\n  }\n  if (destination.dependency !== source.dependency) {\n    return false;\n  }\n  if (destination.export !== source.export) {\n    return false;\n  }\n  if (destination.exportAll !== source.exportAll) {\n    return false;\n  }\n  if (!equalRenderConfigs(source.render, destination.render)) {\n    return false;\n  }\n\n  return true;\n};\n","import { mapKeys } from '../../common/core.helpers';\n\nexport default (source: Map<any, any>, destination: Map<any, any>, compare = (a: any, b: any) => a === b): boolean => {\n  if (!destination || destination.size !== source.size) {\n    return false;\n  }\n  for (const value of mapKeys(source)) {\n    if (!destination.has(value)) {\n      return false;\n    }\n    if (!compare(destination.get(value), source.get(value))) {\n      return false;\n    }\n  }\n\n  return true;\n};\n","import { flatten } from '../../common/core.helpers';\n\nconst areEqualProviderDefs = (thisDef: any, prototypeDef: any, ...keys: string[]) => {\n  for (const key of keys) {\n    if (prototypeDef && thisDef && prototypeDef[key] && thisDef[key] && prototypeDef[key] === thisDef[key]) {\n      return true;\n    }\n  }\n\n  return prototypeDef === thisDef;\n};\n\nexport default (prototype: any, source: any): boolean => {\n  if (Array.isArray(prototype) !== Array.isArray(source)) {\n    return false;\n  }\n\n  const [prototypeDefs, thisDefs] = [flatten(prototype), flatten(source)];\n  if (prototypeDefs.length !== thisDefs.length) {\n    return false;\n  }\n\n  for (let index = 0; index < prototypeDefs.length; index += 1) {\n    const [prototypeDef, thisDef] = [prototypeDefs[index], thisDefs[index]];\n\n    if (prototypeDef && thisDef && prototypeDef.multi !== thisDef.multi) {\n      return false;\n    }\n    if (areEqualProviderDefs(thisDef, prototypeDef, 'useValue', 'useClass', 'useFactory', 'useExisting')) {\n      continue;\n    }\n\n    return false;\n  }\n\n  return true;\n};\n","import { mapValues } from '../../common/core.helpers';\n\nexport default (source: Set<any>, destination: Set<any>): boolean => {\n  if (!destination || destination.size !== source.size) {\n    return false;\n  }\n  for (const value of mapValues(source)) {\n    if (!destination.has(value)) {\n      return false;\n    }\n  }\n\n  return true;\n};\n","import equalRenderDefs from './equal-render-defs';\n\nconst objectsDiffer = (destination: any, source: any): boolean => {\n  if (Object.keys(destination).length !== Object.keys(source).length) {\n    return true;\n  }\n  for (const key of Object.keys(destination)) {\n    if (!equalRenderDefs(destination[key], source[key])) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nexport default (source: any, destination: any): boolean => {\n  if (!equalRenderDefs(destination, source)) {\n    return false;\n  }\n  if (typeof destination !== 'object' || typeof source !== 'object') {\n    return true;\n  }\n  if (objectsDiffer(destination, source)) {\n    return false;\n  }\n\n  return true;\n};\n","import equalVariables from './equal-variables';\n\nexport default (prototype: any, source: any): boolean => {\n  if (prototype === source) {\n    return true;\n  }\n  if ((typeof prototype === 'boolean' || typeof source === 'boolean') && prototype !== source) {\n    return false;\n  }\n\n  return prototype.$implicit === source.$implicit && equalVariables(prototype.variables, source.variables);\n};\n","const objectsDiffer = (prototype: any, source: any): boolean => {\n  const prototypeKeys = Object.keys(prototype);\n  const sourceKeys = Object.keys(source);\n  if (prototypeKeys.length !== sourceKeys.length) {\n    return true;\n  }\n  for (const key of prototypeKeys) {\n    if (prototype[key] !== source[key]) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nexport default (prototype: any, source: any): boolean => {\n  if (prototype === source) {\n    return true;\n  }\n  if ((prototype && !source) || (!prototype && source)) {\n    return false;\n  }\n  if (objectsDiffer(prototype, source)) {\n    return false;\n  }\n\n  return true;\n};\n","export default () => ({\n  beforeCC: new Set(),\n  configDef: new Map(),\n  defProviders: new Map(),\n  defValue: new Map(),\n  excludeDef: new Set(),\n  keepDef: new Set(),\n  mockDef: new Set(),\n  providerDef: new Map(),\n  replaceDef: new Set(),\n});\n","import { TestModuleMetadata } from '@angular/core/testing';\n\nexport default (\n  ngModule: TestModuleMetadata,\n): TestModuleMetadata & {\n  declarations: any[];\n  imports: any[];\n  providers: any[];\n} => ({\n  ...ngModule,\n  declarations: [...(ngModule.declarations || /* istanbul ignore next */ [])],\n  imports: [...(ngModule.imports || /* istanbul ignore next */ [])],\n  providers: [...(ngModule.providers || /* istanbul ignore next */ [])],\n});\n","import { NG_MOCKS_ROOT_PROVIDERS } from '../../common/core.tokens';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\n\nimport skipDep from './skip-dep';\nimport { BuilderData } from './types';\n\nexport default (parameters: Set<any>, mockDef: BuilderData['mockDef'], def: any): void => {\n  if (\n    !skipDep(def) &&\n    (mockDef.has(NG_MOCKS_ROOT_PROVIDERS) || !ngMocksUniverse.config.get('ngMocksDepsSkip').has(def))\n  ) {\n    parameters.add(def);\n  }\n};\n","import CoreDefStack from '../../common/core.def-stack';\nimport { extractDependency, flatten, mapValues } from '../../common/core.helpers';\nimport coreReflectProvidedIn from '../../common/core.reflect.provided-in';\nimport funcGetType from '../../common/func.get-type';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\nimport helperResolveProvider from '../../mock-service/helper.resolve-provider';\n\nimport { BuilderData, NgMeta } from './types';\n\nexport default (ngModule: NgMeta, { providerDef, mockDef }: BuilderData, resolutions: CoreDefStack<any, any>): void => {\n  // Adding requested providers to test bed.\n  for (const provider of mapValues(providerDef)) {\n    ngModule.providers.push(provider);\n  }\n\n  // Analyzing providers.\n  for (const provider of flatten(ngModule.providers)) {\n    const provide = funcGetType(provider);\n    ngMocksUniverse.touches.add(provide);\n\n    if (provide !== provider && (provider as any).deps) {\n      extractDependency((provider as any).deps, ngMocksUniverse.config.get('ngMocksDeps'));\n    }\n  }\n\n  for (const def of mapValues(mockDef)) {\n    if (ngMocksUniverse.touches.has(def) || coreReflectProvidedIn(def) !== 'root') {\n      continue;\n    }\n\n    ngModule.providers.push(helperResolveProvider(def, resolutions));\n    ngMocksUniverse.touches.add(def);\n  }\n};\n","import { getTestBed } from '@angular/core/testing';\n\nimport { flatten } from '../../common/core.helpers';\nimport funcGetType from '../../common/func.get-type';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\n\nexport default () => {\n  const testBed = getTestBed();\n  // istanbul ignore else\n  if (testBed.ngModule) {\n    for (const def of flatten<any>(testBed.ngModule)) {\n      ngMocksUniverse.touches.add(funcGetType(def));\n    }\n  }\n};\n","export default (provide: any, bucket: any[], touched: any[]): void => {\n  if (typeof provide === 'function' && touched.indexOf(provide) === -1) {\n    touched.push(provide);\n    bucket.push(provide);\n  }\n};\n","import { ValueProvider } from '@angular/core';\nimport { MetadataOverride } from '@angular/core/testing';\n\nimport { mapValues } from '../../common/core.helpers';\nimport coreReflectMeta from '../../common/core.reflect.meta';\nimport { NG_MOCKS_OVERRIDES } from '../../common/core.tokens';\nimport { Type } from '../../common/core.types';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\n\nimport getOverrideDef from './get-override-def';\nimport skipOverride from './skip-override';\n\nexport default (replaceDef: Set<any>, defValue: Map<any, any>): ValueProvider => {\n  const overrides: Map<Type<any>, [MetadataOverride<any>, MetadataOverride<any>]> = new Map();\n  for (const proto of mapValues(ngMocksUniverse.touches)) {\n    const source: any = proto;\n    const value = ngMocksUniverse.getBuildDeclaration(source) || source;\n    if (skipOverride(replaceDef, defValue, source, value)) {\n      continue;\n    }\n\n    const original = coreReflectMeta(value);\n    const override = getOverrideDef(original);\n    if (!override) {\n      continue;\n    }\n\n    // We need to delete standalone, because Angular was too lazy to check whether it has been really changed.\n    const patchedOriginal: Partial<typeof original> = {};\n    for (const key of Object.keys(override)) {\n      patchedOriginal[key] = original[key];\n    }\n\n    overrides.set(value, [{ set: override }, { set: patchedOriginal }]);\n  }\n\n  return {\n    provide: NG_MOCKS_OVERRIDES,\n    useValue: overrides,\n  };\n};\n","import { ValueProvider } from '@angular/core';\n\nimport { mapEntries } from '../../common/core.helpers';\nimport { NG_MOCKS } from '../../common/core.tokens';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\n\nexport default (): ValueProvider => {\n  const mocks = new Map();\n  for (const [key, value] of [\n    ...mapEntries(ngMocksUniverse.builtProviders),\n    ...mapEntries(ngMocksUniverse.builtDeclarations),\n    ...mapEntries(ngMocksUniverse.cacheDeclarations),\n    ...mapEntries(ngMocksUniverse.cacheProviders),\n  ]) {\n    if (mocks.has(key)) {\n      continue;\n    }\n    mocks.set(key, value);\n  }\n\n  return {\n    provide: NG_MOCKS,\n    useValue: mocks,\n  };\n};\n","import { ValueProvider } from '@angular/core';\n\nimport { mapValues } from '../../common/core.helpers';\nimport { NG_MOCKS_TOUCHES } from '../../common/core.tokens';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\n\nexport default (): ValueProvider => {\n  // Redefining providers for kept declarations.\n  const touches = new Set();\n  for (const proto of mapValues(ngMocksUniverse.touches)) {\n    const source: any = proto;\n    let value = ngMocksUniverse.getBuildDeclaration(source);\n\n    // kept declarations should be based on their source.\n    if (value === undefined) {\n      value = source;\n    }\n\n    touches.add(source);\n    touches.add(value);\n  }\n\n  return {\n    provide: NG_MOCKS_TOUCHES,\n    useValue: touches,\n  };\n};\n","import funcExtractForwardRef from '../../common/func.extract-forward-ref';\n\n// Extracts dependency among flags of parameters.\nexport default (decorators?: any[]): any => {\n  if (!decorators) {\n    return;\n  }\n\n  let provide: any;\n  for (const decorator of decorators) {\n    if (decorator && typeof decorator === 'object' && decorator.token) {\n      provide = decorator.token;\n    }\n    if (!provide && decorator && (typeof decorator !== 'object' || !decorator.ngMetadataName)) {\n      provide = decorator;\n    }\n  }\n\n  return funcExtractForwardRef(provide);\n};\n","import { Directive, NgModule } from '@angular/core';\n\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\nimport mockNgDef from '../../mock-module/mock-ng-def';\n\nexport default (meta?: Directive | NgModule): NgModule | undefined => {\n  if (!meta) {\n    return undefined;\n  }\n\n  const skipMock = ngMocksUniverse.flags.has('skipMock');\n  // istanbul ignore else\n  if (!skipMock) {\n    ngMocksUniverse.flags.add('skipMock');\n  }\n  const [changed, def] = mockNgDef(meta);\n  // istanbul ignore else\n  if (!skipMock) {\n    ngMocksUniverse.flags.delete('skipMock');\n  }\n  if (!changed) {\n    return undefined;\n  }\n\n  return def;\n};\n","import coreReflectParametersResolve from '../../common/core.reflect.parameters-resolve';\nimport { NG_MOCKS_ROOT_PROVIDERS } from '../../common/core.tokens';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\n\nimport addDefToRootProviderParameters from './add-def-to-root-provider-parameters';\nimport checkRootProviderDependency from './check-root-provider-dependency';\nimport extractDep from './extract-dep';\nimport getRootProvidersData from './get-root-providers-data';\nimport handleProvidedInDependency from './handle-provided-in-dependency';\nimport skipRootProviderDependency from './skip-root-provider-dependency';\nimport { BuilderData } from './types';\n\nexport default (mockDef: BuilderData['mockDef']): Set<any> => {\n  const parameters = new Set();\n  const { buckets, touched } = getRootProvidersData();\n\n  for (const bucket of buckets) {\n    for (const def of bucket) {\n      addDefToRootProviderParameters(parameters, mockDef, def);\n\n      for (const decorators of coreReflectParametersResolve(def)) {\n        const provide: any = extractDep(decorators);\n        handleProvidedInDependency(provide);\n        if (skipRootProviderDependency(provide)) {\n          continue;\n        }\n        checkRootProviderDependency(provide, touched, bucket);\n        if (mockDef.has(NG_MOCKS_ROOT_PROVIDERS) || !ngMocksUniverse.config.get('ngMocksDepsSkip').has(def)) {\n          parameters.add(provide);\n        } else {\n          ngMocksUniverse.config.get('ngMocksDepsSkip').add(provide);\n        }\n      }\n    }\n  }\n\n  return parameters;\n};\n","import { mapValues } from '../../common/core.helpers';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\n\nexport default (): {\n  buckets: any[];\n  touched: any[];\n} => {\n  // We need buckets here to process first all depsSkip, then deps and only after that all other defs.\n  const buckets: any[] = [\n    mapValues(ngMocksUniverse.config.get('ngMocksDepsSkip')),\n    mapValues(ngMocksUniverse.config.get('ngMocksDeps')),\n    mapValues(ngMocksUniverse.touches),\n  ];\n\n  // Also, we need to track what has been touched to check params recursively, but avoiding duplicates.\n  const touched: any[] = [].concat(...buckets);\n\n  return {\n    buckets,\n    touched,\n  };\n};\n","import { ComponentFactoryResolver, NgModule, Optional } from '@angular/core';\n\nimport coreDefineProperty from '../../common/core.define-property';\nimport { extendClass } from '../../common/core.helpers';\nimport { NG_MOCKS } from '../../common/core.tokens';\nimport { isNgDef } from '../../common/func.is-ng-def';\nimport helperCreateClone from '../../mock-service/helper.create-clone';\n\nimport { NgMeta } from './types';\n\nclass EntryComponentsModule {\n  public constructor(map: Map<any, any>, componentFactoryResolver?: ComponentFactoryResolver) {\n    // istanbul ignore if\n    if (!componentFactoryResolver) {\n      return;\n    }\n\n    const originCFR = componentFactoryResolver.resolveComponentFactory;\n    componentFactoryResolver.resolveComponentFactory = helperCreateClone(\n      originCFR,\n      undefined,\n      undefined,\n      (component: any, ...args: any[]) =>\n        originCFR.apply(componentFactoryResolver, [map.get(component) ?? component, ...args] as any),\n    );\n  }\n}\ncoreDefineProperty(EntryComponentsModule, 'parameters', [[NG_MOCKS], [ComponentFactoryResolver, new Optional()]]);\n\nclass IvyModule {}\nNgModule()(IvyModule);\n\nexport default (ngModule: NgMeta): void => {\n  const entryComponents: any[] = [];\n  for (const declaration of ngModule.declarations) {\n    if (isNgDef(declaration, 'c')) {\n      entryComponents.push(declaration);\n    }\n  }\n  // the way to cause entryComponents to do its work\n  const entryModule = extendClass(EntryComponentsModule);\n  NgModule({\n    // Ivy knows how to make any component an entry point,\n    // but we still would like to patch resolveComponentFactory in order to provide mocks.\n    // ɵmod is added only if Ivy has been enabled.\n    entryComponents: (IvyModule as any).ɵmod ? [] : /* istanbul ignore next */ entryComponents,\n  } as never)(entryModule);\n  ngModule.imports.push(entryModule);\n};\n","import coreReflectProvidedIn from '../../common/core.reflect.provided-in';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\n\nexport default (provide: any): void => {\n  if (ngMocksUniverse.touches.has(provide)) {\n    return;\n  }\n\n  const providedIn = coreReflectProvidedIn(provide);\n  if (!providedIn) {\n    return;\n  }\n\n  if (ngMocksUniverse.config.get('ngMocksDepsSkip').has(providedIn)) {\n    ngMocksUniverse.config.get('ngMocksDepsSkip').add(provide);\n  }\n};\n","import CoreDefStack from '../../common/core.def-stack';\nimport { mapValues } from '../../common/core.helpers';\nimport { NG_MOCKS_ROOT_PROVIDERS } from '../../common/core.tokens';\nimport { isNgInjectionToken } from '../../common/func.is-ng-injection-token';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\nimport helperResolveProvider from '../../mock-service/helper.resolve-provider';\nimport helperUseFactory from '../../mock-service/helper.use-factory';\n\nimport getRootProviderParameters from './get-root-provider-parameters';\nimport { BuilderData, NgMeta } from './types';\n\n// Mocking root providers.\nexport default (ngModule: NgMeta, { keepDef, mockDef }: BuilderData, resolutions: CoreDefStack<any, any>): void => {\n  // Adding missed providers.\n  const parameters = keepDef.has(NG_MOCKS_ROOT_PROVIDERS) ? new Set() : getRootProviderParameters(mockDef);\n  if (parameters.size > 0) {\n    for (const parameter of mapValues(parameters)) {\n      const mock = helperResolveProvider(parameter, resolutions);\n      if (mock) {\n        ngModule.providers.push(mock);\n      } else if (isNgInjectionToken(parameter)) {\n        const multi =\n          ngMocksUniverse.config.has('ngMocksMulti') && ngMocksUniverse.config.get('ngMocksMulti').has(parameter);\n        ngModule.providers.push(helperUseFactory(parameter, () => (multi ? [] : undefined)));\n      }\n    }\n  }\n};\n","import { mapValues } from '../../common/core.helpers';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\n\nexport default (excludeDef: Set<any>): void => {\n  const builtDeclarations = ngMocksUniverse.builtDeclarations;\n  const builtProviders = ngMocksUniverse.builtProviders;\n  const resolutions = ngMocksUniverse.config.get('ngMocksDepsResolution');\n  for (const def of mapValues(excludeDef)) {\n    builtDeclarations.set(def, null);\n    builtProviders.set(def, null);\n    resolutions.set(def, 'exclude');\n  }\n};\n","import { mapValues } from '../../common/core.helpers';\nimport { funcExtractDeps } from '../../common/func.extract-deps';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\n\nexport default (keepDef: Set<any>, configDef: Map<any, any>): Set<any> => {\n  const dependencies = new Set<any>();\n  const builtDeclarations = ngMocksUniverse.builtDeclarations;\n  const builtProviders = ngMocksUniverse.builtProviders;\n  const resolutions = ngMocksUniverse.config.get('ngMocksDepsResolution');\n  for (const def of mapValues(keepDef)) {\n    builtDeclarations.set(def, def);\n    builtProviders.set(def, def);\n    resolutions.set(def, 'keep');\n\n    const config = configDef.get(def);\n    if (config.shallow) {\n      funcExtractDeps(def, dependencies);\n    }\n  }\n\n  return dependencies;\n};\n","import { mapValues } from '../../common/core.helpers';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\n\nimport tryMockProvider from './try-mock-provider';\n\nexport default (mockDef: Set<any>, defValue: Map<any, any>): void => {\n  const builtDeclarations = ngMocksUniverse.builtDeclarations;\n  const resolutions: Map<any, string> = ngMocksUniverse.config.get('ngMocksDepsResolution');\n  for (const def of mapValues(mockDef)) {\n    const deleteTouch = !ngMocksUniverse.touches.has(def);\n\n    resolutions.set(def, 'mock');\n    builtDeclarations.set(def, undefined);\n    tryMockProvider(def, defValue);\n\n    if (deleteTouch) {\n      ngMocksUniverse.touches.delete(def);\n    }\n  }\n};\n","import { ModuleWithProviders } from '@angular/core';\n\nimport { Type } from '../../common/core.types';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\n\nimport { BuilderData } from './types';\n\nexport default (def: Type<any>, defProviders: BuilderData['defProviders']): Type<any> | ModuleWithProviders<any> => {\n  const loModule = ngMocksUniverse.getBuildDeclaration(def);\n  const loProviders = defProviders.has(def) ? defProviders.get(def) : undefined;\n\n  return loProviders\n    ? {\n        ngModule: loModule,\n        providers: loProviders,\n      }\n    : loModule;\n};\n","import { mapValues } from '../../common/core.helpers';\nimport { isNgDef } from '../../common/func.is-ng-def';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\nimport { MockModule } from '../../mock-module/mock-module';\nimport mockNgDef from '../../mock-module/mock-ng-def';\nimport collectDeclarations from '../../resolve/collect-declarations';\n\nimport tryMockDeclaration from './try-mock-declaration';\n\nexport default (\n  keepDef: Set<any>,\n  mockDef: Set<any>,\n  replaceDef: Set<any>,\n  defProviders: Map<any, any>,\n): Map<any, any> => {\n  const loProviders = new Map();\n\n  for (const def of [...mapValues(keepDef), ...mapValues(mockDef), ...mapValues(replaceDef)]) {\n    const meta = collectDeclarations(def);\n    const providers = [\n      ...(defProviders.get(def) ?? []),\n      ...(meta.Component?.providers ?? []),\n      ...(meta.Directive?.providers ?? []),\n    ];\n\n    const deleteTouch = !ngMocksUniverse.touches.has(def);\n    if (!mockDef.has(def)) {\n      ngMocksUniverse.flags.add('skipMock');\n    }\n\n    const isModule = isNgDef(def, 'm');\n    if (providers.length > 0) {\n      const [, loDef] = mockNgDef({ providers, skipMarkProviders: !isModule, skipExports: true });\n      loProviders.set(def, loDef.providers);\n    }\n    if (isModule) {\n      ngMocksUniverse.builtDeclarations.set(def, MockModule(def));\n    }\n\n    ngMocksUniverse.flags.delete('skipMock');\n    if (deleteTouch) {\n      ngMocksUniverse.touches.delete(def);\n    }\n  }\n  for (const def of mapValues(mockDef)) {\n    tryMockDeclaration(def);\n  }\n\n  return loProviders;\n};\n","import { flatten, mapValues } from '../../common/core.helpers';\nimport coreReflectProvidedIn from '../../common/core.reflect.provided-in';\nimport { AnyDeclaration } from '../../common/core.types';\nimport errorJestMock from '../../common/error.jest-mock';\nimport funcGetName from '../../common/func.get-name';\nimport funcGetType from '../../common/func.get-type';\nimport { isNgDef } from '../../common/func.is-ng-def';\nimport { isNgInjectionToken } from '../../common/func.is-ng-injection-token';\nimport { isStandalone } from '../../common/func.is-standalone';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\nimport markProviders from '../../mock-module/mark-providers';\n\nimport initModule from './init-module';\nimport { BuilderData, NgMeta } from './types';\n\nconst skipDef = (def: any): boolean =>\n  ngMocksUniverse.touches.has(def) || isNgDef(def) || isNgInjectionToken(def) || typeof def === 'string';\n\nconst handleDef = ({ imports, declarations, providers }: NgMeta, def: any, defProviders: Map<any, any>): void => {\n  if (!skipDef(def)) {\n    errorJestMock(def);\n  }\n\n  let touched = false;\n\n  if (isNgDef(def, 'm')) {\n    const extendedDef = initModule(def, defProviders);\n    imports.push(extendedDef);\n    touched = true;\n\n    // adding providers to touches\n    if (typeof extendedDef === 'object' && extendedDef.providers) {\n      for (const provider of flatten(extendedDef.providers)) {\n        ngMocksUniverse.touches.add(funcGetType(provider));\n      }\n    }\n  }\n\n  if (isNgDef(def, 'c') || isNgDef(def, 'd') || isNgDef(def, 'p')) {\n    (isStandalone(def) ? imports : declarations).push(ngMocksUniverse.getBuildDeclaration(def));\n    touched = true;\n  }\n\n  if (isNgDef(def, 'i') || !isNgDef(def)) {\n    const mock = ngMocksUniverse.builtProviders.get(def);\n    if (mock && typeof mock !== 'string' && isNgDef(mock, 't') === false) {\n      providers.push(mock);\n      touched = true;\n    }\n  }\n\n  if (touched) {\n    ngMocksUniverse.touches.add(def);\n  }\n};\n\nexport default (\n  { configDef, configDefault, keepDef, mockDef, replaceDef }: BuilderData,\n  defProviders: Map<any, any>,\n): NgMeta => {\n  const meta: NgMeta = { imports: [], declarations: [], providers: [] };\n\n  const forgotten: AnyDeclaration<any>[] = [];\n\n  // Adding suitable leftovers.\n  for (const def of [...mapValues(mockDef), ...mapValues(keepDef), ...mapValues(replaceDef)]) {\n    const configInstance = ngMocksUniverse.configInstance.get(def);\n    const config = configDef.get(def);\n\n    if (isNgDef(def, 'm') && config.onRoot) {\n      handleDef(meta, def, defProviders);\n    } else if (\n      !config.dependency &&\n      config.export &&\n      !configInstance?.exported &&\n      (isNgDef(def, 'i') || !isNgDef(def))\n    ) {\n      handleDef(meta, def, defProviders);\n      markProviders([def]);\n    } else if (!config.dependency && isNgDef(def, 'm') && defProviders.has(def)) {\n      handleDef(meta, def, defProviders);\n    } else if (!config.dependency && config.export && !configInstance?.exported) {\n      handleDef(meta, def, defProviders);\n    } else if (!ngMocksUniverse.touches.has(def) && !config.dependency) {\n      handleDef(meta, def, defProviders);\n    } else if (\n      config.dependency &&\n      configDefault.dependency &&\n      coreReflectProvidedIn(def) !== 'root' &&\n      (typeof def !== 'object' || !(def as any).__ngMocksSkip)\n    ) {\n      forgotten.push(def);\n    }\n  }\n\n  // Checking missing dependencies\n  const globalFlags = ngMocksUniverse.global.get('flags');\n  for (const def of forgotten) {\n    if (ngMocksUniverse.touches.has(def)) {\n      continue;\n    }\n\n    const errorMessage = [\n      `MockBuilder has found a missing dependency: ${funcGetName(def)}.`,\n      'It means no module provides it.',\n      'Please, use the \"export\" flag if you want to add it explicitly.',\n      'https://ng-mocks.sudo.eu/api/MockBuilder#export-flag',\n    ].join(' ');\n\n    if (globalFlags.onMockBuilderMissingDependency === 'warn') {\n      console.warn(errorMessage);\n    } else if (globalFlags.onMockBuilderMissingDependency === 'throw') {\n      throw new Error(errorMessage);\n    }\n  }\n\n  return meta;\n};\n","import { mapValues } from '../../common/core.helpers';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\n\nexport default (replaceDef: Set<any>, defValue: Map<any, any>): void => {\n  const builtDeclarations = ngMocksUniverse.builtDeclarations;\n  const resolutions = ngMocksUniverse.config.get('ngMocksDepsResolution');\n  for (const def of mapValues(replaceDef)) {\n    builtDeclarations.set(def, defValue.get(def));\n    resolutions.set(def, 'replace');\n  }\n};\n","import { mapEntries, mapValues } from '../../common/core.helpers';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\n\nimport initExcludeDef from './init-exclude-def';\nimport initKeepDef from './init-keep-def';\nimport initMockDeclarations from './init-mock-declarations';\nimport initModules from './init-modules';\nimport initReplaceDef from './init-replace-def';\nimport { BuilderData } from './types';\n\nexport default ({\n  configDef,\n  defProviders,\n  defValue,\n  excludeDef,\n  keepDef,\n  mockDef,\n  replaceDef,\n}: BuilderData): Map<any, any> => {\n  ngMocksUniverse.flags.add('cachePipe');\n\n  // collecting multi flags of providers.\n  ngMocksUniverse.config.set('ngMocksMulti', new Set());\n  // collecting all deps of providers.\n  ngMocksUniverse.config.set('ngMocksDeps', new Set());\n  // collecting all declarations of kept modules.\n  ngMocksUniverse.config.set('ngMocksDepsSkip', new Set());\n  // flags to understand how to mock nested declarations.\n  ngMocksUniverse.config.set('ngMocksDepsResolution', new Map());\n\n  const dependencies = initKeepDef(keepDef, configDef);\n  for (const dependency of mapValues(dependencies)) {\n    ngMocksUniverse.touches.add(dependency);\n\n    // MockBuilder has instruction about the dependency, skipping it.\n    if (configDef.has(dependency)) {\n      continue;\n    }\n\n    // Checking global configuration for the dependency.\n    const resolution = ngMocksUniverse.getResolution(dependency);\n    if (resolution === 'replace') {\n      replaceDef.add(dependency);\n      defValue.set(dependency, ngMocksUniverse.getBuildDeclaration(dependency));\n    } else if (resolution === 'keep') {\n      keepDef.add(dependency);\n    } else if (resolution === 'exclude') {\n      excludeDef.add(dependency);\n    } else {\n      mockDef.add(dependency);\n    }\n\n    configDef.set(dependency, {\n      dependency: true,\n      __internal: true,\n    });\n  }\n\n  for (const [k, v] of mapEntries(configDef)) {\n    ngMocksUniverse.config.set(k, {\n      ...ngMocksUniverse.getConfigMock().get(k),\n      ...v,\n      defValue: defValue.get(k),\n    });\n  }\n\n  initReplaceDef(replaceDef, defValue);\n  initExcludeDef(excludeDef);\n  initMockDeclarations(mockDef, defValue);\n\n  return initModules(keepDef, mockDef, replaceDef, defProviders);\n};\n","import { isNgDef } from '../../common/func.is-ng-def';\n\nexport default (\n  def: any,\n  a1: any,\n  a2: any,\n  defaultMockValue: any,\n): {\n  config: any;\n  mock: any;\n} => {\n  let mock: any = def === a1 ? defaultMockValue : a1;\n  let config: any = a2 ?? (a1 !== defaultMockValue && typeof a1 === 'object' ? a1 : undefined);\n  if (isNgDef(def, 'p') && typeof a1 === 'function' && a1 !== def && !isNgDef(a1, 'p')) {\n    mock = {\n      transform: a1,\n    };\n    config = a2;\n  } else if (isNgDef(def, 'i') || !isNgDef(def)) {\n    config = a2;\n  }\n  mock = mock === config ? defaultMockValue : mock;\n\n  return {\n    config,\n    mock,\n  };\n};\n","import funcGetType from '../../common/func.get-type';\n\nexport default (\n  provider: any,\n): {\n  multi: boolean;\n  provide: any;\n} => {\n  const provide = funcGetType(provider);\n  const multi = provide !== provider && provider.multi;\n\n  return {\n    multi,\n    provide,\n  };\n};\n","import { DOCUMENT } from '@angular/common';\n\nimport coreConfig from '../../common/core.config';\nimport coreReflectProvidedIn from '../../common/core.reflect.provided-in';\nimport { isNgInjectionToken } from '../../common/func.is-ng-injection-token';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\n\nconst skipResolution = (provide: any): boolean | undefined => {\n  const resolution = ngMocksUniverse.getResolution(provide);\n  if (resolution === 'keep' || resolution === 'exclude') {\n    return true;\n  }\n  if (resolution === 'mock') {\n    return false;\n  }\n\n  return undefined;\n};\n\nconst skipSystem = (provide: any): boolean => {\n  if (!provide || provide === DOCUMENT || ngMocksUniverse.touches.has(provide)) {\n    return true;\n  }\n  const skipByResolution = skipResolution(provide);\n  if (skipByResolution !== undefined) {\n    return skipByResolution;\n  }\n\n  if (typeof provide === 'function' && coreConfig.neverMockProvidedFunction.indexOf(provide.name) !== -1) {\n    return true;\n  }\n  // istanbul ignore if because we mock BrowserModule\n  if (isNgInjectionToken(provide) && coreConfig.neverMockToken.indexOf(provide.toString()) !== -1) {\n    return true;\n  }\n\n  return false;\n};\n\n// Checks if we should avoid mocking of the provider.\nexport default (provide: any): boolean => {\n  if (skipSystem(provide)) {\n    return true;\n  }\n\n  // Empty providedIn or things for a platform have to be skipped.\n  const providedIn = coreReflectProvidedIn(provide);\n  const skip = !providedIn || providedIn === 'platform';\n  if (typeof provide === 'function' && skip) {\n    return true;\n  }\n\n  return false;\n};\n","import ngMocksUniverse from '../../common/ng-mocks-universe';\n\nimport { BuilderData } from './types';\n\nexport default (\n  replaceDef: BuilderData['replaceDef'],\n  defValue: BuilderData['defValue'],\n  source: any,\n  value: any,\n): boolean => {\n  // no reason to touch mocks\n  if (ngMocksUniverse.cacheDeclarations.has(value)) {\n    return true;\n  }\n\n  // no customizations in replacements\n  if (replaceDef.has(source) && value === defValue.get(source)) {\n    return true;\n  }\n\n  return false;\n};\n","import ngMocksUniverse from '../../common/ng-mocks-universe';\n\nimport skipDep from './skip-dep';\n\nexport default (provide: any): boolean => {\n  if (skipDep(provide)) {\n    return true;\n  }\n\n  return ngMocksUniverse.config.get('ngMocksDepsSkip').has(provide);\n};\n","import { isNgDef } from '../../common/func.is-ng-def';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\nimport { MockComponent } from '../../mock-component/mock-component';\nimport { MockDirective } from '../../mock-directive/mock-directive';\nimport { MockPipe } from '../../mock-pipe/mock-pipe';\n\nexport default (def: any): void => {\n  if (ngMocksUniverse.builtDeclarations.get(def) !== undefined) {\n    return;\n  }\n\n  if (isNgDef(def, 'c')) {\n    ngMocksUniverse.builtDeclarations.set(def, MockComponent(def));\n  }\n  if (isNgDef(def, 'd')) {\n    ngMocksUniverse.builtDeclarations.set(def, MockDirective(def));\n  }\n  if (isNgDef(def, 'p')) {\n    ngMocksUniverse.builtDeclarations.set(def, MockPipe(def));\n  }\n};\n","import { isNgDef } from '../../common/func.is-ng-def';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\nimport mockHelperStub from '../../mock-helper/mock-helper.stub';\nimport helperUseFactory from '../../mock-service/helper.use-factory';\nimport mockProvider from '../../mock-service/mock-provider';\nimport { IMockBuilderConfigMock } from '../types';\n\nconst createInstance = (existing: any, params: any, config: IMockBuilderConfigMock): any => {\n  if (config.precise) {\n    return params;\n  }\n\n  return mockHelperStub(existing, params);\n};\n\nexport default (def: any, defValue: Map<any, any>): void => {\n  if (isNgDef(def, 'i') && defValue.has(def)) {\n    const config: IMockBuilderConfigMock = ngMocksUniverse.config.get(def);\n    const instance = defValue.get(def);\n    ngMocksUniverse.builtProviders.set(\n      def,\n      helperUseFactory(def, undefined, existing => createInstance(existing, instance, config)),\n    );\n  } else if (isNgDef(def, 'i')) {\n    ngMocksUniverse.builtProviders.set(def, mockProvider(def, true));\n  }\n\n  if (!isNgDef(def) && defValue.has(def)) {\n    const instance = defValue.get(def);\n    ngMocksUniverse.builtProviders.set(\n      def,\n      helperUseFactory(def, undefined, () => instance),\n    );\n  } else if (!isNgDef(def)) {\n    ngMocksUniverse.builtProviders.set(def, mockProvider(def, true));\n  }\n};\n","import {\n  AfterContentInit,\n  ChangeDetectorRef,\n  Component,\n  EmbeddedViewRef,\n  Injector,\n  Optional,\n  QueryList,\n  Self,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\n\nimport coreDefineProperty from '../common/core.define-property';\nimport coreForm from '../common/core.form';\nimport coreReflectDirectiveResolve from '../common/core.reflect.directive-resolve';\nimport { Type } from '../common/core.types';\nimport funcIsMock from '../common/func.is-mock';\nimport { MockConfig } from '../common/mock';\nimport { LegacyControlValueAccessor } from '../common/mock-control-value-accessor';\nimport decorateDeclaration from '../mock/decorate-declaration';\nimport getMock from '../mock/get-mock';\n\nimport generateTemplate from './render/generate-template';\nimport getKey from './render/get-key';\nimport { MockedComponent } from './types';\n\nconst mixRenderPrepareVcr = (\n  instance: MockConfig & Record<keyof any, any>,\n  type: string,\n  selector: string,\n  cdr: ChangeDetectorRef,\n): ViewContainerRef | undefined => {\n  if (!instance[`ngMocksRender_${type}_${selector}`]) {\n    instance[`ngMocksRender_${type}_${selector}`] = true;\n    cdr.detectChanges();\n  }\n\n  return instance[`__mockView_${type}_${selector}`];\n};\n\nconst mixRenderReorderViews = (\n  viewContainer: ViewContainerRef,\n  views: Array<EmbeddedViewRef<any>>,\n  index: number,\n): void => {\n  for (const view of views.splice(index + 1)) {\n    view.destroy();\n  }\n\n  let viewIndex = 0;\n  for (const view of views) {\n    if (!view) {\n      continue;\n    }\n    viewContainer.move(view, viewIndex);\n    viewIndex += 1;\n  }\n};\n\nconst mixRenderApplyContext = (view: EmbeddedViewRef<any>, context: Record<keyof any, any>): void => {\n  for (const contextKey of Object.keys(view.context)) {\n    view.context[contextKey] = undefined;\n  }\n  for (const contextKey of Object.keys(context)) {\n    view.context[contextKey] = (context as any)[contextKey];\n  }\n  view.markForCheck();\n};\n\nconst mixRenderHandleViews = (\n  vcr: ViewContainerRef,\n  cdr: ChangeDetectorRef,\n  templates: any[],\n  views: Array<EmbeddedViewRef<any>>,\n  indices: undefined | number[],\n  context: Record<keyof any, any>,\n): number => {\n  let index = -1;\n\n  for (const templateRef of templates) {\n    index += 1;\n    views[index] = views[index] || undefined;\n    if ((indices && indices.indexOf(index) === -1) || !templateRef) {\n      continue;\n    }\n    if (!(templateRef instanceof TemplateRef)) {\n      throw new Error(`Cannot find TemplateRef`);\n    }\n    if (!views[index]) {\n      views[index] = vcr.createEmbeddedView(templateRef, {});\n    }\n    mixRenderApplyContext(views[index], context);\n  }\n  cdr.detectChanges();\n\n  return index;\n};\n\nconst mixRender = (instance: MockConfig & Record<keyof any, any>, cdr: ChangeDetectorRef): void => {\n  // Providing a method to render any @ContentChild based on its selector.\n  coreDefineProperty(\n    instance,\n    '__render',\n    (contentChildSelector: string | [string, ...number[]], $implicit?: any, variables?: Record<keyof any, any>) => {\n      const [type, key, selector, indices] = getKey(contentChildSelector);\n\n      const vcr = mixRenderPrepareVcr(instance, type, selector, cdr);\n      if (!vcr) {\n        return;\n      }\n\n      const property: any = instance[key];\n      const templates = property instanceof QueryList ? property.toArray() : [property];\n\n      const views = instance[`ngMocksRender_${type}_${selector}_views`] || [];\n      const index = mixRenderHandleViews(vcr, cdr, templates, views, indices, { ...variables, $implicit });\n\n      mixRenderReorderViews(vcr, views, index);\n      instance[`ngMocksRender_${type}_${selector}_views`] = views;\n      cdr.detectChanges();\n    },\n  );\n};\n\nconst mixHideHandler = (\n  instance: MockConfig & Record<keyof any, any>,\n  type: string,\n  selector: string,\n  indices: undefined | number[],\n) => {\n  const views = instance[`ngMocksRender_${type}_${selector}_views`];\n  let index = -1;\n  for (const view of views) {\n    index += 1;\n    if ((indices && indices.indexOf(index) === -1) || !view) {\n      continue;\n    }\n    view.destroy();\n    views[index] = undefined;\n  }\n};\n\nconst mixHide = (instance: MockConfig & Record<keyof any, any>, changeDetector: ChangeDetectorRef): void => {\n  // Providing method to hide any @ContentChild based on its selector.\n  coreDefineProperty(instance, '__hide', (contentChildSelector: string | [string, ...number[]]) => {\n    const [type, , selector, indices] = getKey(contentChildSelector);\n\n    if (!instance[`ngMocksRender_${type}_${selector}`]) {\n      return;\n    }\n    mixHideHandler(instance, type, selector, indices);\n\n    if (!indices) {\n      instance[`ngMocksRender_${type}_${selector}`] = false;\n    }\n    changeDetector.detectChanges();\n  });\n};\n\nclass ComponentMockBase extends LegacyControlValueAccessor implements AfterContentInit {\n  // istanbul ignore next\n  public constructor(\n    injector: Injector,\n    ngControl: any, // NgControl\n    changeDetector: ChangeDetectorRef,\n  ) {\n    super(injector, ngControl);\n    if (funcIsMock(this)) {\n      mixRender(this, changeDetector);\n      mixHide(this, changeDetector);\n    }\n  }\n\n  public ngAfterContentInit(): void {\n    const config = (this.__ngMocksConfig as any).config;\n    if (!(this as any).__rendered && config && config.render) {\n      for (const block of Object.keys(config.render)) {\n        const { $implicit, variables } =\n          config.render[block] === true\n            ? {\n                $implicit: undefined,\n                variables: {},\n              }\n            : config.render[block];\n        (this as any).__render(block, $implicit, variables);\n      }\n      (this as any).__rendered = true;\n    }\n  }\n}\n\ncoreDefineProperty(ComponentMockBase, 'parameters', [\n  [Injector],\n  [coreForm.NgControl || /* istanbul ignore next */ (() => undefined), new Optional(), new Self()],\n  [ChangeDetectorRef],\n]);\n\nconst decorateClass = (component: Type<any>, mock: Type<any>): void => {\n  const meta = coreReflectDirectiveResolve(component);\n  Component(\n    decorateDeclaration(component, mock, meta, {\n      template: generateTemplate(meta.queries),\n    }),\n  )(mock);\n};\n\n/**\n * MockComponents creates an array of mock component classes out of components passed as parameters.\n *\n * @see https://ng-mocks.sudo.eu/api/MockComponent\n *\n * ```ts\n * TestBed.configureTestingModule({\n *   declarations: MockComponents(\n *     Dep1Component,\n *     Dep2Component,\n *   ),\n * });\n * ```\n */\nexport function MockComponents(...components: Array<Type<any>>): Array<Type<MockedComponent<any>>> {\n  return components.map(MockComponent);\n}\n\n/**\n * MockComponent creates a mock component class out of an arbitrary component.\n *\n * @see https://ng-mocks.sudo.eu/api/MockComponent\n *\n * ```ts\n * TestBed.configureTestingModule({\n *   declarations: [\n *     MockComponent(Dep1Component),\n *     MockComponent(Dep2Component),\n *   ],\n * });\n * ```\n */\nexport function MockComponent<TComponent>(component: Type<TComponent>): Type<MockedComponent<TComponent>> {\n  return getMock(component, 'c', 'MockComponent', 'cacheComponent', ComponentMockBase, decorateClass);\n}\n","import { Query, TemplateRef, ViewChild, ViewContainerRef } from '@angular/core';\n\nconst viewChildArgs: any = { read: ViewContainerRef, static: false };\n\nconst viewChildTemplate = (selector: string, key: string): string =>\n  `<div *ngIf=\"ngMocksRender_${key}_${selector}\" data-${key}=\"${selector}\"><ng-template #${key}_${selector}></ng-template></div>`;\n\nconst isTemplateRefQuery = (query: Query): boolean => {\n  if (query.isViewQuery) {\n    return false; // ignoring all internal @ViewChild\n  }\n  if (query.read && query.read !== TemplateRef) {\n    return false; // ignoring read of instances\n  }\n  if (typeof query.selector !== 'string' && !query.read) {\n    return false; // ignoring class selectors if they do not read TemplateRef\n  }\n\n  return true;\n};\n\nexport default (queries?: Record<keyof any, any>): string => {\n  const parts = ['<ng-content></ng-content>'];\n  // istanbul ignore if\n  if (!queries) {\n    return parts.join('');\n  }\n\n  for (const key of Object.keys(queries)) {\n    const query: Query = queries[key];\n    if (!isTemplateRefQuery(query)) {\n      continue;\n    }\n    if (typeof query.selector === 'string') {\n      const selector = query.selector.replace(new RegExp('\\\\W', 'mg'), '_');\n      queries[`__mockView_key_${selector}`] = new ViewChild(`key_${selector}`, viewChildArgs);\n      queries[`__mockTpl_key_${selector}`] = query;\n      parts.push(viewChildTemplate(selector, 'key'));\n    }\n    queries[`__mockView_prop_${key}`] = new ViewChild(`prop_${key}`, viewChildArgs);\n    parts.push(viewChildTemplate(key, 'prop'));\n  }\n\n  return parts.join('');\n};\n","export default (\n  contentChildSelector: string | [string, ...number[]],\n): [string, string, string, undefined | number[]] => {\n  if (typeof contentChildSelector === 'string') {\n    return ['key', `__mockTpl_key_${contentChildSelector}`, contentChildSelector, undefined];\n  }\n\n  const [key, ...indices] = contentChildSelector;\n\n  return ['prop', key, key, indices.length > 0 ? indices : undefined];\n};\n","import { Type } from '../common/core.types';\nimport errorJestMock from '../common/error.jest-mock';\nimport funcGetName from '../common/func.get-name';\nimport { isNgDef } from '../common/func.is-ng-def';\nimport { MockComponent } from '../mock-component/mock-component';\nimport { MockedComponent } from '../mock-component/types';\nimport { MockDirective } from '../mock-directive/mock-directive';\nimport { MockedDirective } from '../mock-directive/types';\nimport { MockPipe } from '../mock-pipe/mock-pipe';\nimport { MockedPipe } from '../mock-pipe/types';\n\n/**\n * MockDeclarations creates an array of mock declaration classes out of declarations passed as parameters.\n *\n * @see https://ng-mocks.sudo.eu/api/MockComponent\n * @see https://ng-mocks.sudo.eu/api/MockDirective\n * @see https://ng-mocks.sudo.eu/api/MockPipe\n *\n * ```ts\n * TestBed.configureTestingModule({\n *   declarations: MockDeclarations(\n *     Dep1Component,\n *     Dep2Directive,\n *     Dep3Pipe,\n *   ),\n * });\n * ```\n */\nexport function MockDeclarations(...declarations: Array<Type<any>>): Array<Type<any>> {\n  return declarations.map(MockDeclaration);\n}\n\n/**\n * MockDeclaration creates a mock declaration class out of an arbitrary declaration.\n *\n * @see https://ng-mocks.sudo.eu/api/MockComponent\n * @see https://ng-mocks.sudo.eu/api/MockDirective\n * @see https://ng-mocks.sudo.eu/api/MockPipe\n *\n * ```ts\n * TestBed.configureTestingModule({\n *   declarations: [\n *     MockDeclaration(Dep1Component),\n *     MockDeclaration(Dep2Directive),\n *     MockDeclaration(Dep3Pipe),\n *   ],\n * });\n * ```\n */\nexport function MockDeclaration<T>(declaration: Type<T>): Type<MockedPipe<T> | MockedDirective<T> | MockedComponent<T>>;\n\nexport function MockDeclaration<T>(\n  declaration: Type<T>,\n): Type<MockedPipe<T> | MockedDirective<T> | MockedComponent<T>> {\n  if (isNgDef(declaration, 'p')) {\n    return MockPipe(declaration);\n  }\n  if (isNgDef(declaration, 'c')) {\n    return MockComponent(declaration);\n  }\n  if (isNgDef(declaration, 'd')) {\n    return MockDirective(declaration);\n  }\n\n  errorJestMock(declaration);\n  throw new Error(\n    [\n      'MockDeclaration does not know how to mock',\n      typeof declaration === 'function' ? funcGetName(declaration) : declaration,\n    ].join(' '),\n  );\n}\n","import {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  Injector,\n  OnInit,\n  Optional,\n  Self,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\n\nimport coreDefineProperty from '../common/core.define-property';\nimport coreForm from '../common/core.form';\nimport coreReflectDirectiveResolve from '../common/core.reflect.directive-resolve';\nimport { Type } from '../common/core.types';\nimport { LegacyControlValueAccessor } from '../common/mock-control-value-accessor';\nimport decorateDeclaration from '../mock/decorate-declaration';\nimport getMock from '../mock/get-mock';\n\nimport { MockedDirective } from './types';\n\nclass DirectiveMockBase extends LegacyControlValueAccessor implements OnInit {\n  // istanbul ignore next\n  public constructor(\n    injector: Injector,\n    ngControl: any, // NgControl\n    cdr: ChangeDetectorRef,\n    vcr: ViewContainerRef,\n    element: ElementRef | null = null,\n    template: TemplateRef<any> | null = null,\n  ) {\n    super(injector, ngControl);\n    this.__ngMocksInstall(vcr, cdr, element, template);\n  }\n\n  public ngOnInit(): void {\n    const config = (this.__ngMocksConfig as any).config;\n    if (config?.render) {\n      const { $implicit, variables } =\n        config.render === true\n          ? {\n              $implicit: undefined,\n              variables: {},\n            }\n          : config.render;\n      (this as any).__render($implicit, variables);\n    }\n  }\n\n  private __ngMocksInstall(\n    vcr: ViewContainerRef,\n    cdr: ChangeDetectorRef,\n    element: ElementRef | null,\n    template: TemplateRef<any> | null,\n  ): void {\n    // Basically any directive on ng-template is treated as structural, even it does not control render process.\n    // In our case we do not if we should render it or not and due to this we do nothing.\n    coreDefineProperty(this, '__element', element);\n    coreDefineProperty(this, '__template', template);\n    coreDefineProperty(this, '__viewContainer', vcr);\n    coreDefineProperty(this, '__vcr', vcr);\n    coreDefineProperty(this, '__cdr', cdr);\n    coreDefineProperty(this, '__isStructural', template && vcr);\n\n    // Providing method to render mock values.\n    coreDefineProperty(this, '__render', ($implicit?: any, variables?: Record<keyof any, any>) => {\n      if (vcr && template) {\n        vcr.clear();\n        vcr.createEmbeddedView(template, { ...variables, $implicit });\n        cdr.detectChanges();\n      }\n    });\n  }\n}\n\ncoreDefineProperty(DirectiveMockBase, 'parameters', [\n  [Injector],\n  [coreForm.NgControl || /* istanbul ignore next */ (() => undefined), new Optional(), new Self()],\n  [ChangeDetectorRef],\n  [ViewContainerRef],\n  [ElementRef, new Optional(), new Self()],\n  [TemplateRef, new Optional(), new Self()],\n]);\n\nconst decorateClass = (directive: Type<any>, mock: Type<any>): void => {\n  const meta = coreReflectDirectiveResolve(directive);\n  const options = decorateDeclaration(directive, mock, meta, {});\n  Directive(options)(mock);\n};\n\n/**\n * MockDirectives creates an array of mock directive classes out of directives passed as parameters.\n *\n * @see https://ng-mocks.sudo.eu/api/MockDirective\n *\n * ```ts\n * TestBed.configureTestingModule({\n *   declarations: MockDirectives(\n *     Dep1Directive,\n *     Dep2Directive,\n *   ),\n * });\n * ```\n */\nexport function MockDirectives(...directives: Array<Type<any>>): Array<Type<MockedDirective<any>>> {\n  return directives.map(MockDirective);\n}\n\n/**\n * MockDirective creates a mock directive class out of an arbitrary directive.\n *\n * @see https://ng-mocks.sudo.eu/api/MockDirective\n *\n * ```ts\n * TestBed.configureTestingModule({\n *   declarations: [\n *     MockDirective(Dep1Directive),\n *     MockDirective(Dep2Directive),\n *   ],\n * });\n * ```\n */\nexport function MockDirective<TDirective>(directive: Type<TDirective>): Type<MockedDirective<TDirective>> {\n  return getMock(directive, 'd', 'MockDirective', 'cacheDirective', DirectiveMockBase, decorateClass);\n}\n","import funcDirectiveIoParse from '../../common/func.directive-io-parse';\nimport { MockedDebugNode } from '../../mock-render/types';\n\nimport funcGetPublicProviderKeys from './func.get-public-provider-keys';\nimport funcParseInputsAndRequiresAttributes from './func.parse-inputs-and-requires-attributes';\n\nconst detectInClassic = (node: MockedDebugNode, attribute: string, value: any): boolean => {\n  for (const key of funcGetPublicProviderKeys(node)) {\n    const [inputs, expectedAttributes, nodeIndex] = funcParseInputsAndRequiresAttributes(node, key);\n    for (const input of inputs) {\n      const { name, alias } = funcDirectiveIoParse(input);\n      if (attribute !== (alias || name) || expectedAttributes.indexOf(name) === -1) {\n        continue;\n      }\n      if (value === (node.injector as any).view.nodes[nodeIndex].instance[name]) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n\nconst detectInIvy = (node: MockedDebugNode, attribute: string, value: any): boolean => {\n  const attrs = (node.injector as any)._tNode?.attrs || [];\n  let step = 2;\n  for (let index = 0; index < attrs.length; index += step) {\n    // 3 is a divider between static and dynamic bindings\n    if (typeof attrs[index] === 'number') {\n      step = 1;\n      continue;\n    }\n    const attr = attrs[index];\n    if (attr !== attribute || !(node.injector as any)._tNode.inputs?.[attr]) {\n      continue;\n    }\n    const [attrIndex, attrProp] = (node.injector as any)._tNode.inputs[attr];\n\n    if (value === (node.injector as any)._lView?.[attrIndex][attrProp]) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nexport default (attribute: string, value: any): ((node: MockedDebugNode) => boolean) =>\n  node => {\n    if (detectInIvy(node, attribute, value)) {\n      return true;\n    }\n\n    return detectInClassic(node, attribute, value);\n  };\n","import { MockedDebugNode } from '../../mock-render/types';\n\nimport detectAttributeInSelectors from './detect-attribute-in-selectors';\nimport detectSelectorsFromNode from './detect-selectors-from-node';\n\nexport default (attribute: string): ((node: MockedDebugNode) => boolean) =>\n  node => {\n    const [selectors, attributes] = detectSelectorsFromNode(node);\n\n    if (attributes.indexOf(attribute) !== -1) {\n      return true;\n    }\n\n    if (detectAttributeInSelectors(selectors, attribute)) {\n      return true;\n    }\n\n    return false;\n  };\n","import coreInjector from '../../common/core.injector';\nimport { AnyType } from '../../common/core.types';\nimport { getSourceOfMock } from '../../common/func.get-source-of-mock';\nimport { MockedDebugNode } from '../../mock-render/types';\n\nexport default (declaration: AnyType<any>): ((node: MockedDebugNode) => boolean) => {\n  const source = getSourceOfMock(declaration);\n\n  return node =>\n    !!node && node.providerTokens.indexOf(source) !== -1 && coreInjector(source, node.injector) !== undefined;\n};\n","import { MockedDebugNode } from '../../mock-render/types';\n\nexport default (id: string): ((node: MockedDebugNode) => boolean) =>\n  node => {\n    return !!node.references[id];\n  };\n","import { MockedDebugNode } from '../../mock-render/types';\n\nimport detectSelectorsFromNode from './detect-selectors-from-node';\nimport detectTagNameInSelectors from './detect-tag-name-in-selectors';\n\nexport default (attribute: string): ((node: MockedDebugNode) => boolean) =>\n  node => {\n    const [selectors] = detectSelectorsFromNode(node);\n\n    return detectTagNameInSelectors(selectors, attribute);\n  };\n","export default (selectors: string[], query: string): boolean => {\n  for (const selector of selectors) {\n    const attributes = selector.match(/\\[([^=\\]]+)/g);\n    if (!attributes) {\n      continue;\n    }\n\n    for (const attribute of attributes) {\n      if (attribute === `[${query}`) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n","import { AnyType } from '../../common/core.types';\nimport { MockedDebugNode } from '../../mock-render/types';\n\nimport crawlByAttribute from './crawl-by-attribute';\nimport crawlByAttributeValue from './crawl-by-attribute-value';\nimport crawlByDeclaration from './crawl-by-declaration';\nimport crawlById from './crawl-by-id';\nimport crawlByTagName from './crawl-by-tag-name';\n\ntype SELECTOR = string | AnyType<any> | [any] | [any, any];\n\nconst isCrawlByAttribute = (selector: SELECTOR): selector is [string] => {\n  return Array.isArray(selector) && selector.length === 1 && typeof selector[0] === 'string';\n};\n\nconst isCrawlByAttributeValue = (selector: SELECTOR): selector is [string, any] => {\n  return Array.isArray(selector) && selector.length === 2 && typeof selector[0] === 'string';\n};\n\nconst isCrawlById = (selector: SELECTOR): selector is string => {\n  return typeof selector === 'string' && selector.indexOf('#') === 0 && selector.length > 1;\n};\n\nconst isCrawlByTagName = (selector: SELECTOR): selector is string => {\n  return typeof selector === 'string' && selector.indexOf('#') !== 0 && selector.length > 0;\n};\n\nconst isCrawlByDeclaration = (selector: SELECTOR): selector is AnyType<any> => {\n  return typeof selector === 'function';\n};\n\nexport default (selector: SELECTOR): ((node: MockedDebugNode) => boolean) => {\n  if (isCrawlByAttribute(selector)) {\n    return crawlByAttribute(selector[0]);\n  }\n  if (isCrawlByAttributeValue(selector)) {\n    return crawlByAttributeValue(selector[0], selector[1]);\n  }\n  if (isCrawlById(selector)) {\n    return crawlById(selector.slice(1));\n  }\n  if (isCrawlByTagName(selector)) {\n    return crawlByTagName(selector);\n  }\n  if (isCrawlByDeclaration(selector)) {\n    return crawlByDeclaration(selector);\n  }\n\n  throw new Error('Unknown selector');\n};\n","import funcDirectiveIoParse from '../../common/func.directive-io-parse';\nimport { MockedDebugNode } from '../../mock-render/types';\nimport funcParseProviderTokensDirectives from '../func.parse-provider-tokens-directives';\n\nimport funcGetPublicProviderKeys from './func.get-public-provider-keys';\nimport funcParseInputsAndRequiresAttributes from './func.parse-inputs-and-requires-attributes';\n\nconst collectSelectors = (node: MockedDebugNode): string[] => {\n  const selectors: string[] = [];\n\n  for (const token of node.providerTokens) {\n    const meta = funcParseProviderTokensDirectives(node, token);\n    if (meta?.selector && selectors.indexOf(meta.selector) === -1) {\n      selectors.push(meta.selector);\n    }\n  }\n\n  return selectors;\n};\n\nconst collectAttributesClassic = (node: MockedDebugNode): string[] => {\n  const result: string[] = [];\n\n  for (const key of funcGetPublicProviderKeys(node)) {\n    const [inputs, expectedAttributes] = funcParseInputsAndRequiresAttributes(node, key);\n    for (const input of inputs) {\n      const { name, alias } = funcDirectiveIoParse(input);\n      const attr = alias || name;\n      if (expectedAttributes.indexOf(name) !== -1 && result.indexOf(attr) === -1) {\n        result.push(attr);\n      }\n    }\n  }\n\n  return result;\n};\n\nconst collectAttributesIvy = (node: MockedDebugNode): string[] => {\n  const result: string[] = [];\n\n  const attrs = (node.injector as any)._tNode?.attrs || [];\n  let step = 2;\n  for (let index = 0; index < attrs.length; index += step) {\n    // 3 is a divider between static and dynamic bindings\n    if (typeof attrs[index] === 'number') {\n      step = 1;\n      continue;\n    }\n    const attr = attrs[index];\n    if ((node.injector as any)._tNode.inputs?.[attr] && result.indexOf(attr) === -1) {\n      result.push(attr);\n    }\n  }\n\n  return result;\n};\n\nexport default (node: MockedDebugNode): [string[], string[]] => {\n  const selectors = collectSelectors(node);\n  const attributes = [...collectAttributesClassic(node), ...collectAttributesIvy(node)];\n\n  return [selectors, attributes];\n};\n","const regExp = new RegExp('\\\\[.*?\\\\]', 'g');\n\nexport default (selectors: string[], query: string): boolean => {\n  for (const selector of selectors) {\n    const attributes = selector.replace(regExp, '').split(',');\n\n    for (const attribute of attributes) {\n      if (attribute.trim() === query) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n","import { MockedDebugNode } from '../../mock-render/types';\n\nexport default (node: MockedDebugNode): boolean => {\n  return node.nativeNode.nodeName === '#text';\n};\n","export default (a: any, b: any): boolean => {\n  if (!a || !b) {\n    return false;\n  }\n\n  return a === b;\n};\n","import detectTextNode from './detect-text-node';\n\nexport default (node: any) => {\n  return detectTextNode(node)\n    ? undefined\n    : node.injector._tNode || // ivy\n        node.injector.elDef || // classic\n        undefined;\n};\n","import { DebugElement, ViewContainerRef } from '@angular/core';\n\nimport coreInjector from '../../common/core.injector';\n\nimport elDefGetNode from './el-def-get-node';\n\nconst getVcr = (node: any, child: any): undefined | ViewContainerRef => {\n  if (node === child) {\n    return undefined;\n  }\n  if (child.nativeNode.nodeName !== '#comment') {\n    return undefined;\n  }\n\n  return coreInjector(ViewContainerRef, child.injector);\n};\n\nconst getScanViewRefRootNodes = (node: any, child: any): Array<[number, any]> => {\n  const vcr = getVcr(node, child);\n  if (!vcr) {\n    return [];\n  }\n\n  const result: Array<[number, any]> = [];\n  for (let vrIndex = 0; vrIndex < vcr.length; vrIndex += 1) {\n    const vr = vcr.get(vrIndex);\n    for (let rnIndex = 0; rnIndex < (vr as any).rootNodes.length; rnIndex += 1) {\n      result.push([rnIndex, (vr as any).rootNodes[rnIndex]]);\n    }\n  }\n\n  return result;\n};\n\nconst scanViewRef = (node: DebugElement) => {\n  let result: any;\n  let index: any;\n\n  for (const child of node.parent?.childNodes || []) {\n    for (const [rnIndex, rootNode] of getScanViewRefRootNodes(node, child)) {\n      if (rootNode === node.nativeNode && (index === undefined || rnIndex < index)) {\n        result = elDefGetNode(child);\n        index = rnIndex;\n      }\n    }\n  }\n\n  return result;\n};\n\nexport default (node: any) => {\n  return (\n    node.injector._tNode?.parent || // ivy\n    node.injector.elDef?.parent || // classic\n    scanViewRef(node) ||\n    node.parent?.injector._tNode || // ivy\n    node.parent?.injector.elDef || // classic\n    undefined\n  );\n};\n","import { MockedDebugNode } from '../../mock-render/types';\n\nexport default (node: MockedDebugNode): string[] => {\n  return (node.injector as any).elDef ? Object.keys((node.injector as any).elDef.element.publicProviders) : [];\n};\n","export default (value: any) => {\n  if (typeof value === 'string') {\n    return true;\n  }\n  if (Array.isArray(value) && typeof value[0] === 'string') {\n    return true;\n  }\n\n  return typeof value === 'function';\n};\n","import { DirectiveIo } from '../../common/core.types';\nimport { MockedDebugNode } from '../../mock-render/types';\nimport funcParseProviderTokensDirectives from '../func.parse-provider-tokens-directives';\n\nexport default (node: MockedDebugNode, key: string): [Array<DirectiveIo>, string[], number] => {\n  const config = (node.injector as any).elDef.element.publicProviders[key];\n  const token = config.provider.value;\n  if (!token) {\n    return [[], [], 0];\n  }\n  const meta = funcParseProviderTokensDirectives(node, token);\n\n  const requiredAttributes = config.bindings.map((binding: any) => binding.nonMinifiedName || binding.name);\n\n  return [meta?.inputs || [], requiredAttributes, config.nodeIndex];\n};\n","import { DebugNode } from '@angular/core';\n\nimport { DebugNodeSelector } from '../../common/core.types';\nimport mockHelperFind from '../find/mock-helper.find';\nimport funcGetLastFixture from '../func.get-last-fixture';\n\nimport nestedCheck from './nested-check';\n\nexport default (\n  sel: DebugNode | DebugNodeSelector,\n  callback: (node: DebugNode, parent?: DebugNode) => void | boolean,\n  includeTextNode = false,\n): void => {\n  const el = mockHelperFind(funcGetLastFixture(), sel, undefined);\n  nestedCheck(el, undefined, callback, includeTextNode);\n};\n","import mockHelperFind from '../find/mock-helper.find';\nimport funcGetLastFixture from '../func.get-last-fixture';\nimport funcParseFindArgs from '../func.parse-find-args';\n\nimport detectCrawler from './detect-crawler';\nimport detectTextNode from './detect-text-node';\nimport funcIsValidRevealSelector from './func.is-valid-reveal-selector';\nimport mockHelperCrawl from './mock-helper.crawl';\n\nexport default (...args: any[]): any[] => {\n  const [el, sel] = funcParseFindArgs(args, funcIsValidRevealSelector);\n  const root = mockHelperFind(funcGetLastFixture(), el, undefined);\n\n  const detector = detectCrawler(sel);\n\n  const result: any[] = [];\n  mockHelperCrawl(root, node => {\n    if (node !== root && !detectTextNode(node) && detector(node)) {\n      result.push(node);\n    }\n  });\n\n  return result;\n};\n","import mockHelperFind from '../find/mock-helper.find';\nimport funcGetLastFixture from '../func.get-last-fixture';\nimport funcParseFindArgs from '../func.parse-find-args';\nimport funcParseFindArgsName from '../func.parse-find-args-name';\n\nimport detectCrawler from './detect-crawler';\nimport detectTextNode from './detect-text-node';\nimport funcIsValidRevealSelector from './func.is-valid-reveal-selector';\nimport mockHelperCrawl from './mock-helper.crawl';\n\nconst defaultNotFoundValue = {}; // simulating Symbol\n\nexport default (...args: any[]): any => {\n  const [el, sel, notFoundValue] = funcParseFindArgs(args, funcIsValidRevealSelector, defaultNotFoundValue);\n  const root = mockHelperFind(funcGetLastFixture(), el, undefined);\n\n  const detector = detectCrawler(sel);\n\n  let result;\n  mockHelperCrawl(root, node => {\n    if (node !== root && !detectTextNode(node) && detector(node)) {\n      result = node;\n\n      return true;\n    }\n\n    return false;\n  });\n  if (result) {\n    return result;\n  }\n  if (notFoundValue !== defaultNotFoundValue) {\n    return notFoundValue;\n  }\n\n  throw new Error(`Cannot find a DebugElement via ngMocks.reveal(${funcParseFindArgsName(sel)})`);\n};\n","import { MockedDebugNode } from '../../mock-render/types';\n\nimport detectTextNode from './detect-text-node';\nimport elDefCompare from './el-def-compare';\nimport elDefGetNode from './el-def-get-node';\nimport elDefGetParent from './el-def-get-parent';\n\nexport default (node: MockedDebugNode): MockedDebugNode[] => {\n  const elDef = elDefGetNode(node);\n  if (!elDef || detectTextNode(node)) {\n    return [];\n  }\n\n  const isDirect = (node as any).childNodes !== undefined;\n  const children: MockedDebugNode[] = [];\n  for (const childNode of (node as any).childNodes || node.parent?.childNodes || []) {\n    const childNodeParent = elDefGetParent(childNode);\n\n    if (!isDirect && !elDefCompare(elDef, childNodeParent)) {\n      continue;\n    }\n    if (childNodeParent && !elDefCompare(elDef, childNodeParent)) {\n      continue;\n    }\n\n    children.push(childNode);\n  }\n\n  if ((node as any).parent?.name === 'BODY') {\n    const childNodes: any[] = (node as any).parent.childNodes;\n    let start = childNodes.length;\n    let end = 0;\n    for (let i = childNodes.length - 1; i >= 0; i -= 1) {\n      const childNode = childNodes[i];\n      if (childNode.nativeNode.nodeName === '#comment') {\n        end = i;\n      } else if (childNode.nativeNode === node.nativeNode) {\n        start = i + 1;\n        break;\n      }\n    }\n    for (let i = start; i < end; i += 1) {\n      children.push(childNodes[i]);\n    }\n  }\n\n  return children;\n};\n","import { MockedDebugNode } from '../../mock-render/types';\n\nimport elDefCompare from './el-def-compare';\nimport elDefGetNode from './el-def-get-node';\nimport elDefGetParent from './el-def-get-parent';\n\nconst detectParent = (node: MockedDebugNode, parent: MockedDebugNode | undefined): MockedDebugNode | undefined => {\n  if (parent) {\n    return parent;\n  }\n\n  const expected = elDefGetParent(node);\n  const currentParent = node.parent ? elDefGetNode(node.parent) : undefined;\n  if (node.parent && elDefCompare(expected, currentParent)) {\n    return node.parent;\n  }\n  for (const childNode of node.parent?.childNodes || []) {\n    const childElDef = elDefGetNode(childNode);\n    if (elDefCompare(expected, childElDef)) {\n      return childNode;\n    }\n  }\n\n  return undefined;\n};\n\nexport default ((): typeof detectParent => detectParent)();\n","import { MockedDebugNode } from '../../mock-render/types';\n\nimport detectTextNode from './detect-text-node';\nimport nestedCheckChildren from './nested-check-children';\nimport nestedCheckParent from './nested-check-parent';\n\nconst nestedCheck = (\n  node: MockedDebugNode | null | undefined,\n  parent: MockedDebugNode | undefined,\n  check: (node: MockedDebugNode, parent?: MockedDebugNode) => void | boolean,\n  includeTextNode = false,\n): boolean => {\n  if (!node) {\n    return false;\n  }\n  if (!includeTextNode && detectTextNode(node)) {\n    return false;\n  }\n  if (check(node, nestedCheckParent(node, parent))) {\n    return true;\n  }\n\n  for (const childNode of nestedCheckChildren(node)) {\n    if (nestedCheck(childNode, node, check, includeTextNode)) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nexport default ((): typeof nestedCheck => nestedCheck)();\n","import { DebugNode } from '@angular/core';\n\nimport coreForm from '../../common/core.form';\nimport coreInjector from '../../common/core.injector';\n\nconst message = [\n  'Cannot find ControlValueAccessor on the element.',\n  'If it is a mock input with [formControlName],',\n  'you need either to avoid mocking ReactiveFormsModule',\n  'or to avoid accessing the control in such a way,',\n  'because this tests ReactiveFormsModule instead of own implementation.',\n].join(' ');\n\nexport default (el: DebugNode): Record<keyof any, any> => {\n  const ngControl = coreForm && coreInjector(coreForm.NgControl, el.injector);\n  const valueAccessor = ngControl?.valueAccessor;\n  if (valueAccessor) {\n    return valueAccessor;\n  }\n\n  const formControlDirective = coreForm && coreInjector(coreForm.FormControlDirective, el.injector);\n  if (formControlDirective?.form) {\n    return formControlDirective.form;\n  }\n\n  const ngModel = coreForm && coreInjector(coreForm.NgModel, el.injector);\n  if (ngModel) {\n    return ngModel;\n  }\n\n  throw new Error(message);\n};\n","import { DebugElement } from '@angular/core';\n\nimport coreForm from '../../common/core.form';\nimport { DebugNodeSelector } from '../../common/core.types';\nimport { isMockControlValueAccessor } from '../../common/func.is-mock-control-value-accessor';\nimport helperDefinePropertyDescriptor from '../../mock-service/helper.define-property-descriptor';\nimport helperExtractMethodsFromPrototype from '../../mock-service/helper.extract-methods-from-prototype';\nimport mockHelperTrigger from '../events/mock-helper.trigger';\nimport mockHelperFind from '../find/mock-helper.find';\nimport funcGetLastFixture from '../func.get-last-fixture';\nimport funcParseFindArgsName from '../func.parse-find-args-name';\nimport mockHelperStubMember from '../mock-helper.stub-member';\n\nimport funcGetVca from './func.get-vca';\n\n// default html behavior\nconst triggerInput = (el: DebugElement, value: any): void => {\n  mockHelperTrigger(el, 'focus');\n\n  const descriptor = Object.getOwnPropertyDescriptor(el.nativeElement, 'value');\n  mockHelperStubMember(el.nativeElement, 'value', value);\n  mockHelperTrigger(el, 'input');\n  mockHelperTrigger(el, 'change');\n  if (descriptor) {\n    helperDefinePropertyDescriptor(el.nativeElement, 'value', descriptor);\n    el.nativeElement.value = value;\n  }\n\n  mockHelperTrigger(el, 'blur');\n};\n\nconst handleKnown = (valueAccessor: any, value: any): boolean => {\n  if (coreForm && valueAccessor instanceof coreForm.AbstractControl) {\n    valueAccessor.setValue(value);\n\n    return true;\n  }\n\n  if (coreForm && valueAccessor instanceof coreForm.NgModel) {\n    valueAccessor.update.emit(value);\n\n    return true;\n  }\n\n  if (isMockControlValueAccessor(valueAccessor.instance)) {\n    valueAccessor.instance.__simulateChange(value);\n\n    return true;\n  }\n\n  return false;\n};\n\nconst hasListener = (el: DebugElement): boolean =>\n  el.listeners.some(listener => listener.name === 'input' || listener.name === 'change');\n\nconst keys = [\n  'onChange',\n  'onChangeCallback',\n  'onChangeCb',\n  'onChangeClb',\n  'onChangeFn',\n\n  '_onChange',\n  '_onChangeCallback',\n  '_onChangeCb',\n  '_onChangeClb',\n  '_onChangeFn',\n\n  'changeFn',\n  '_changeFn',\n\n  'onModelChange',\n\n  'cvaOnChange',\n  'cvaOnChangeCallback',\n  'cvaOnChangeCb',\n  'cvaOnChangeClb',\n  'cvaOnChangeFn',\n\n  '_cvaOnChange',\n  '_cvaOnChangeCallback',\n  '_cvaOnChangeCb',\n  '_cvaOnChangeClb',\n  '_cvaOnChangeFn',\n];\n\nexport default (selector: DebugNodeSelector, value: any, methodName?: string): void => {\n  const el = mockHelperFind(funcGetLastFixture(), selector, undefined);\n  if (!el) {\n    throw new Error(`Cannot find an element via ngMocks.change(${funcParseFindArgsName(selector)})`);\n  }\n\n  const valueAccessor = funcGetVca(el);\n  if (handleKnown(valueAccessor, value) || hasListener(el)) {\n    triggerInput(el, value);\n\n    return;\n  }\n\n  for (const key of methodName ? [methodName] : keys) {\n    if (typeof valueAccessor[key] === 'function') {\n      valueAccessor.writeValue(value);\n      valueAccessor[key](value);\n\n      return;\n    }\n  }\n\n  const methods = helperExtractMethodsFromPrototype(valueAccessor);\n  throw new Error(\n    [\n      'Unsupported type of ControlValueAccessor,',\n      `please ensure it has '${methodName || 'onChange'}' method.`,\n      `If it is a 3rd-party library, please provide the correct name of the method in the 'methodName' parameter.`,\n      'Possible Names: ' + methods.join(', ') + '.',\n    ].join(' '),\n  );\n};\n","import { DebugElement } from '@angular/core';\n\nimport coreForm from '../../common/core.form';\nimport { DebugNodeSelector } from '../../common/core.types';\nimport { isMockControlValueAccessor } from '../../common/func.is-mock-control-value-accessor';\nimport helperExtractMethodsFromPrototype from '../../mock-service/helper.extract-methods-from-prototype';\nimport mockHelperTrigger from '../events/mock-helper.trigger';\nimport mockHelperFind from '../find/mock-helper.find';\nimport funcGetLastFixture from '../func.get-last-fixture';\nimport funcParseFindArgsName from '../func.parse-find-args-name';\n\nimport funcGetVca from './func.get-vca';\n\n// default html behavior\nconst triggerTouch = (el: DebugElement): void => {\n  mockHelperTrigger(el, 'focus');\n  mockHelperTrigger(el, 'blur');\n};\n\nconst handleKnown = (valueAccessor: any): boolean => {\n  if (coreForm && valueAccessor instanceof coreForm.AbstractControl) {\n    valueAccessor.markAsTouched();\n\n    return true;\n  }\n\n  if (isMockControlValueAccessor(valueAccessor.instance)) {\n    valueAccessor.instance.__simulateTouch();\n\n    return true;\n  }\n\n  return false;\n};\n\nconst hasListener = (el: DebugElement): boolean =>\n  el.listeners.some(listener => listener.name === 'focus' || listener.name === 'blur');\n\nconst keys = [\n  'onTouched',\n  'onTouchedCallback',\n  'onTouchedCb',\n  'onTouchedClb',\n  'onTouchedFn',\n\n  '_onTouched',\n  '_onTouchedCallback',\n  '_onTouchedCb',\n  '_onTouchedClb',\n  '_onTouchedFn',\n\n  'markAsTouched',\n  '_markAsTouched',\n\n  'onModelTouched',\n\n  'cvaOnTouch',\n  'cvaOnTouchCallback',\n  'cvaOnTouchCb',\n  'cvaOnTouchClb',\n  'cvaOnTouchFn',\n\n  '_cvaOnTouch',\n  '_cvaOnTouchCallback',\n  '_cvaOnTouchCb',\n  '_cvaOnTouchClb',\n  '_cvaOnTouchFn',\n];\n\nexport default (sel: DebugElement | DebugNodeSelector, methodName?: string): void => {\n  const el = mockHelperFind(funcGetLastFixture(), sel, undefined);\n  if (!el) {\n    throw new Error(`Cannot find an element via ngMocks.touch(${funcParseFindArgsName(sel)})`);\n  }\n\n  const valueAccessor = funcGetVca(el);\n  if (handleKnown(valueAccessor) || hasListener(el)) {\n    triggerTouch(el);\n\n    return;\n  }\n\n  for (const key of methodName ? [methodName] : keys) {\n    if (typeof valueAccessor[key] === 'function') {\n      valueAccessor[key]();\n\n      return;\n    }\n  }\n\n  const methods = helperExtractMethodsFromPrototype(valueAccessor);\n  throw new Error(\n    [\n      'Unsupported type of ControlValueAccessor,',\n      `please ensure it has '${methodName || 'onTouched'}' method.`,\n      `If it is a 3rd-party library, please provide the correct name of the method in the 'methodName' parameter.`,\n      'Possible Names: ' + methods.join(', ') + '.',\n    ].join(' '),\n  );\n};\n","import { DebugNodeSelector } from '../../common/core.types';\n\nimport mockHelperTrigger from './mock-helper.trigger';\n\nexport default (selector: DebugNodeSelector, payload?: object) => {\n  mockHelperTrigger(selector, 'click', payload);\n};\n","import mockHelperStub from '../mock-helper.stub';\n\n/**\n * @see https://developer.mozilla.org/de/docs/Web/Events\n */\nconst preventBubble = ['focus', 'blur', 'load', 'unload', 'change', 'reset', 'scroll'];\n\n// istanbul ignore next\nconst customEvent = (event: string, params?: EventInit) => {\n  const initParams = {\n    bubbles: false,\n    cancelable: false,\n    ...params,\n  };\n  const eventObj = document.createEvent('CustomEvent');\n  eventObj.initCustomEvent(event, initParams.bubbles, initParams.cancelable, null);\n\n  return eventObj;\n};\n\nconst eventCtor =\n  typeof (Event as any) === 'function'\n    ? (event: string, init?: EventInit): CustomEvent => new CustomEvent(event, init)\n    : /* istanbul ignore next */ customEvent;\n\nconst keyMap: Record<string, object> = {\n  alt: {\n    altKey: true,\n    code: 'AltLeft',\n    key: 'Alt',\n    location: 1,\n    which: 18,\n  },\n  arrowdown: {\n    code: 'ArrowDown',\n    key: 'ArrowDown',\n    location: 0,\n    which: 40,\n  },\n  arrowleft: {\n    code: 'ArrowLeft',\n    key: 'ArrowLeft',\n    location: 0,\n    which: 37,\n  },\n  arrowright: {\n    code: 'ArrowRight',\n    key: 'ArrowRight',\n    location: 0,\n    which: 39,\n  },\n  arrowup: {\n    code: 'ArrowUp',\n    key: 'ArrowUp',\n    location: 0,\n    which: 38,\n  },\n  backspace: {\n    code: 'Backspace',\n    key: 'Backspace',\n    location: 0,\n    which: 8,\n  },\n  control: {\n    code: 'ControlLeft',\n    ctrlKey: true,\n    key: 'Control',\n    location: 1,\n    which: 17,\n  },\n  enter: {\n    code: 'Enter',\n    key: 'Enter',\n    location: 0,\n    which: 13,\n  },\n  esc: {\n    code: 'Escape',\n    key: 'Escape',\n    location: 0,\n    which: 27,\n  },\n  meta: {\n    code: 'MetaLeft',\n    key: 'Meta',\n    location: 1,\n    metaKey: true,\n    which: 91,\n  },\n  shift: {\n    code: 'ShiftLeft',\n    key: 'Shift',\n    location: 1,\n    shiftKey: true,\n    which: 16,\n  },\n  space: {\n    code: 'Space',\n    key: ' ',\n    location: 0,\n    which: 32,\n  },\n  tab: {\n    code: 'Tab',\n    key: 'Tab',\n    location: 0,\n    which: 9,\n  },\n};\nfor (let f = 1; f <= 12; f += 1) {\n  keyMap[`f${f}`] = {\n    code: `F${f}`,\n    key: `F${f}`,\n    location: 0,\n    which: f + 111,\n  };\n}\n\nconst getCode = (char: string): string => {\n  const code = char.codePointAt(0);\n  // a-z\n  if (code && code >= 97 && code <= 122) {\n    return `Key${char.toUpperCase()}`;\n  }\n  // A-Z\n  if (code && code >= 65 && code <= 90) {\n    return `Key${char.toUpperCase()}`;\n  }\n  // A-Z\n  if (code && code >= 48 && code <= 57) {\n    return `Digit${char}`;\n  }\n\n  return 'Unknown';\n};\n\nconst applyPayload = (event: Event, payload?: string): void => {\n  const keyData: object = {};\n  for (const key of payload ? payload.split('.') : []) {\n    let map = keyMap[key];\n    if (!map && key.length === 1) {\n      map = {\n        code: getCode(key),\n        key,\n      };\n    }\n\n    if (!map) {\n      throw new Error(`Unknown event part ${key}`);\n    }\n\n    mockHelperStub(keyData, map);\n  }\n\n  if (payload) {\n    mockHelperStub(event, keyData);\n  }\n};\n\nexport default (\n  event: string,\n  init?: EventInit,\n  overrides?: Partial<UIEvent | KeyboardEvent | MouseEvent | TouchEvent | Event>,\n): CustomEvent => {\n  const dot = event.indexOf('.');\n  const [eventName, eventPayload] = dot === -1 ? [event] : [event.slice(0, Math.max(0, dot)), event.slice(dot + 1)];\n  const eventObj = eventCtor(eventName, {\n    bubbles: preventBubble.indexOf(event) === -1,\n    cancelable: true,\n    ...init,\n  });\n  applyPayload(eventObj, eventPayload);\n\n  if (overrides) {\n    mockHelperStub(eventObj, overrides);\n  }\n\n  return eventObj;\n};\n","import { DebugElement } from '@angular/core';\nimport { ComponentFixture } from '@angular/core/testing';\n\nimport { DebugNodeSelector } from '../../common/core.types';\nimport mockHelperFind from '../find/mock-helper.find';\nimport isDebugNode from '../format/is-debug-node';\nimport isFixture from '../format/is-fixture';\nimport isHtmlElement from '../format/is-html-element';\nimport funcGetLastFixture from '../func.get-last-fixture';\nimport mockHelperStub from '../mock-helper.stub';\n\nimport mockHelperEvent from './mock-helper.event';\n\n/**\n * @see https://developer.mozilla.org/de/docs/Web/Events\n */\nconst preventBubble = ['focus', 'blur', 'load', 'unload', 'change', 'reset', 'scroll'];\n\nconst toEventObj = (event: string | UIEvent | KeyboardEvent | MouseEvent | TouchEvent | Event): Event => {\n  return typeof event === 'string'\n    ? mockHelperEvent(event, {\n        bubbles: preventBubble.indexOf(event) === -1,\n        cancelable: true,\n      })\n    : event;\n};\n\nconst getNativeElement = (\n  debugElement: DebugElement | HTMLElement | ComponentFixture<any> | undefined | null,\n): HTMLElement | undefined => {\n  if (isDebugNode(debugElement) || isFixture(debugElement)) {\n    return debugElement.nativeElement;\n  }\n  if (isHtmlElement(debugElement)) {\n    return debugElement;\n  }\n\n  return undefined;\n};\n\nexport default (\n  selector: DebugElement | HTMLElement | ComponentFixture<any> | DebugNodeSelector,\n  eventName: string | UIEvent | KeyboardEvent | MouseEvent | TouchEvent | Event,\n  payload?: Partial<UIEvent | KeyboardEvent | MouseEvent | TouchEvent | Event>,\n) => {\n  const debugElement = isHtmlElement(selector) ? selector : mockHelperFind(funcGetLastFixture(), selector, undefined);\n  const nativeElement = getNativeElement(debugElement);\n\n  if (!nativeElement) {\n    throw new Error(\n      `Cannot trigger ${typeof eventName === 'string' ? eventName : eventName.type} event undefined element`,\n    );\n  }\n\n  // nothing to emit on disabled elements\n  if ((nativeElement as HTMLInputElement).disabled) {\n    return;\n  }\n\n  const event = toEventObj(eventName);\n  if (!event.target) {\n    mockHelperStub(event, {\n      target: nativeElement,\n    });\n  }\n  if (payload) {\n    mockHelperStub(event, payload);\n  }\n  nativeElement.dispatchEvent(event);\n};\n","import { isNgDef } from '../../common/func.is-ng-def';\n\nexport default (value: any): boolean => {\n  return typeof value === 'function' || isNgDef(value, 't');\n};\n","import { getInjection } from '../../common/core.helpers';\nimport { Type } from '../../common/core.types';\nimport { getSourceOfMock } from '../../common/func.get-source-of-mock';\nimport { isNgDef } from '../../common/func.is-ng-def';\nimport mockHelperCrawl from '../crawl/mock-helper.crawl';\nimport mockHelperFind from '../find/mock-helper.find';\nimport funcGetFromNode from '../func.get-from-node';\nimport funcGetLastFixture from '../func.get-last-fixture';\nimport funcParseFindArgs from '../func.parse-find-args';\nimport funcParseFindArgsName from '../func.parse-find-args-name';\n\nimport funcIsValidFindInstanceSelector from './func.is-valid-find-instance-selector';\n\nconst defaultNotFoundValue = {}; // simulating Symbol\n\nexport default <T>(...args: any[]): T => {\n  const [el, sel, notFoundValue] = funcParseFindArgs(args, funcIsValidFindInstanceSelector, defaultNotFoundValue);\n  if (typeof sel !== 'function' && !isNgDef(sel, 't') && typeof sel !== 'string') {\n    throw new Error('Only classes or tokens are accepted');\n  }\n\n  const declaration: Type<T> = getSourceOfMock(sel);\n  const result: T[] = [];\n  const fixture = funcGetLastFixture();\n  if (fixture) {\n    mockHelperCrawl(\n      mockHelperFind(fixture, el, undefined),\n      (node, parent) => {\n        funcGetFromNode(result, node, declaration);\n        if (result.length === 0 && parent && parent.nativeNode.nodeName === '#comment') {\n          funcGetFromNode(result, parent, declaration);\n        }\n\n        return result.length > 0;\n      },\n      true,\n    );\n  } else {\n    try {\n      result.push(getInjection(declaration));\n    } catch {\n      // nothing to do\n    }\n  }\n\n  if (result.length > 0) {\n    return result[0];\n  }\n  if (notFoundValue !== defaultNotFoundValue) {\n    return notFoundValue;\n  }\n  throw new Error(`Cannot find an instance via ngMocks.findInstance(${funcParseFindArgsName(sel)})`);\n};\n","import { getInjection } from '../../common/core.helpers';\nimport { Type } from '../../common/core.types';\nimport { getSourceOfMock } from '../../common/func.get-source-of-mock';\nimport { isNgDef } from '../../common/func.is-ng-def';\nimport mockHelperCrawl from '../crawl/mock-helper.crawl';\nimport mockHelperFindAll from '../find/mock-helper.find-all';\nimport funcGetFromNode from '../func.get-from-node';\nimport funcGetLastFixture from '../func.get-last-fixture';\nimport funcParseFindArgs from '../func.parse-find-args';\n\nimport funcIsValidFindInstanceSelector from './func.is-valid-find-instance-selector';\n\nexport default <T>(...args: any[]): T[] => {\n  const [el, sel] = funcParseFindArgs(args, funcIsValidFindInstanceSelector);\n  if (typeof sel !== 'function' && !isNgDef(sel, 't') && typeof sel !== 'string') {\n    throw new Error('Only classes or tokens are accepted');\n  }\n\n  const declaration: Type<T> = getSourceOfMock(sel);\n  const result: T[] = [];\n  const scanned: any[] = [];\n  const fixture = funcGetLastFixture();\n  if (fixture) {\n    const elements = mockHelperFindAll(fixture, el, undefined);\n    for (const element of elements) {\n      mockHelperCrawl(\n        element,\n        (node, parent) => {\n          if (scanned.indexOf(node) === -1) {\n            funcGetFromNode(result, node, declaration);\n            scanned.push(node);\n          }\n          if (parent && parent.nativeNode.nodeName === '#comment' && scanned.indexOf(parent) === -1) {\n            funcGetFromNode(result, parent, declaration);\n            scanned.push(parent);\n          }\n        },\n        true,\n      );\n    }\n  } else {\n    try {\n      result.push(getInjection(declaration));\n    } catch {\n      // nothing to do\n    }\n  }\n\n  return result;\n};\n","import { DebugElement } from '@angular/core';\n\nimport isFixture from '../format/is-fixture';\nimport funcGetLastFixture from '../func.get-last-fixture';\n\nconst findDebugElement = (el: any): DebugElement | undefined => {\n  if (isFixture(el)) {\n    return findDebugElement(el.debugElement);\n  }\n  if (el && el.injector && el.query) {\n    return el;\n  }\n\n  return undefined;\n};\n\nexport default (args: any[], defaultNotFoundValue?: any): [any, any, any] => {\n  let el;\n  let sel;\n  let notFoundValue = defaultNotFoundValue;\n  if (args.length === 3) {\n    el = findDebugElement(args[0]);\n    sel = args[1];\n    notFoundValue = args[2];\n  } else if (args.length === 1) {\n    el = findDebugElement(funcGetLastFixture());\n    [sel] = args;\n  } else if (args[0]) {\n    el = findDebugElement(args[0]);\n    if (el) {\n      sel = args[1];\n    } else {\n      el = findDebugElement(funcGetLastFixture());\n      [sel, notFoundValue] = args;\n    }\n  } else {\n    sel = args[1];\n  }\n  sel = findDebugElement(sel) ?? sel;\n\n  return [el, sel, notFoundValue];\n};\n","import { DebugElement, Predicate } from '@angular/core';\nimport { By } from '@angular/platform-browser';\n\nimport { AnyType } from '../../common/core.types';\nimport { getSourceOfMock } from '../../common/func.get-source-of-mock';\n\nexport default (selector: string | AnyType<any> | [string] | [string, any]): Predicate<DebugElement> => {\n  return Array.isArray(selector)\n    ? By.css(selector.length === 1 ? `[${selector[0]}]` : `[${selector[0]}=\"${selector[1]}\"]`)\n    : typeof selector === 'string'\n    ? By.css(selector)\n    : By.directive(getSourceOfMock(selector));\n};\n","import { DebugElement } from '@angular/core';\n\nimport isDebugNode from '../format/is-debug-node';\n\nimport funcParseFindArgs from './func.parse-find-args';\nimport funcParseFindTerm from './func.parse-find-term';\n\nexport default (...args: any[]): DebugElement[] => {\n  const [el, sel] = funcParseFindArgs(args);\n  if (isDebugNode(sel)) {\n    return [sel as any];\n  }\n\n  return el?.queryAll(funcParseFindTerm(sel)) || [];\n};\n","import { DebugElement } from '@angular/core';\n\nimport isDebugNode from '../format/is-debug-node';\nimport funcParseFindArgsName from '../func.parse-find-args-name';\n\nimport funcParseFindArgs from './func.parse-find-args';\nimport funcParseFindTerm from './func.parse-find-term';\n\nconst defaultNotFoundValue = {}; // simulating Symbol\n\nexport default (...args: any[]): DebugElement => {\n  const [el, sel, notFoundValue] = funcParseFindArgs(args, defaultNotFoundValue);\n  const result = isDebugNode(sel) ? sel : el?.query(funcParseFindTerm(sel));\n  if (result) {\n    return result;\n  }\n  if (notFoundValue !== defaultNotFoundValue) {\n    return notFoundValue;\n  }\n  throw new Error(`Cannot find an element via ngMocks.find(${funcParseFindArgsName(sel)})`);\n};\n","import nestedCheckChildren from '../crawl/nested-check-children';\n\nimport handleArray from './handle-array';\nimport isDebugNode from './is-debug-node';\nimport isFixture from './is-fixture';\nimport { FORMAT_SET, FORMAT_SINGLE } from './types';\n\nexport default (handlePrimitives: any) =>\n  (html: any, outer = false) => {\n    const format = (value: Text | Comment | FORMAT_SINGLE | FORMAT_SET, innerOuter = false): any => {\n      if (Array.isArray(value)) {\n        return handleArray(format, value);\n      }\n      if (isFixture(value)) {\n        return format(value.debugElement, outer);\n      }\n      const result = handlePrimitives(format, value, innerOuter);\n      if (result !== undefined) {\n        return result;\n      }\n\n      if (isDebugNode(value) && value.nativeNode.nodeName === '#comment') {\n        return format(nestedCheckChildren(value), true);\n      }\n\n      return isDebugNode(value) ? format(value.nativeNode, innerOuter) : '';\n    };\n\n    return Array.isArray(html) ? html.map((item: any) => format(item, outer)) : format(html, outer);\n  };\n","export default (format: any, html: any) => {\n  return format((html as any[]).map(item => format(item, true)).join(''));\n};\n","export default (html: Text): string => html.nodeValue ?? html.textContent ?? html.wholeText;\n","import { MockedDebugNode } from '../../mock-render/types';\n\nexport default (value: any): value is MockedDebugNode => {\n  return !!value?.nativeElement || !!value?.nativeNode;\n};\n","import { MockedDebugNode } from '../../mock-render/types';\n\nexport default (value: any): value is { debugElement: MockedDebugNode } => {\n  return !!value && typeof value === 'object' && value.debugElement !== undefined;\n};\n","export default (value: any): value is HTMLElement => {\n  return !!value && typeof value === 'object' && value.innerHTML !== undefined;\n};\n","export default (value: any): value is Text => {\n  return !!value && typeof value === 'object' && value.nodeName === '#text';\n};\n","import formatHandler from './format-handler';\nimport handleText from './handle-text';\nimport isHtmlElement from './is-html-element';\nimport isText from './is-text';\n\nconst normalizeValue = (html: string | undefined): string =>\n  html\n    ? html\n        .replace(new RegExp('\\\\s+', 'mg'), ' ')\n        .replace(new RegExp('<!--(.|\\\\n|\\\\r)*?-->|<!--(.|\\\\n|\\\\r)*', 'mg'), '')\n        .replace(new RegExp('\\\\s+', 'mg'), ' ')\n        .replace(new RegExp('>\\\\s+<', 'mg'), '><')\n        .replace(new RegExp('\"\\\\s+>', 'mg'), '\">')\n    : '';\n\nconst normalizeText = (text: string): string =>\n  text\n    .replace(new RegExp('&', 'mg'), '&amp;')\n    .replace(new RegExp('\"', 'mg'), '&quot;')\n    .replace(new RegExp('<', 'mg'), '&lt;')\n    .replace(new RegExp('>', 'mg'), '&gt;')\n    .replace(new RegExp(\"'\", 'mg'), '&#39;');\n\nconst getElementValue = (element: HTMLElement, outer: boolean): string =>\n  outer ? element.outerHTML : element.innerHTML;\n\nconst handlePrimitives = (format: any, value: any, outer: boolean): string | undefined => {\n  if (typeof value === 'string' || value === undefined) {\n    const result = normalizeValue(value);\n\n    return outer ? result : result.trim();\n  }\n  if (isHtmlElement(value)) {\n    return format(getElementValue(value, outer));\n  }\n  if (isText(value)) {\n    return handlePrimitives(format, normalizeText(handleText(value)), outer);\n  }\n\n  return undefined;\n};\n\nexport default (() => formatHandler(handlePrimitives))();\n","import formatHandler from './format-handler';\nimport handleText from './handle-text';\nimport isHtmlElement from './is-html-element';\nimport isText from './is-text';\n\nconst normalizeValue = (html: string | undefined): string => (html ? html.replace(new RegExp('\\\\s+', 'mg'), ' ') : '');\n\nconst getElementValue = (element: HTMLElement, outer: boolean): string => {\n  const value = element.textContent ?? '';\n\n  return outer ? value : value.trim();\n};\n\nconst handlePrimitives = (format: any, value: any, outer: boolean): string | undefined => {\n  if (typeof value === 'string' || value === undefined) {\n    const result = normalizeValue(value);\n\n    return outer ? result : result.trim();\n  }\n  if (isHtmlElement(value)) {\n    return format(getElementValue(value, outer));\n  }\n  if (isText(value)) {\n    return handlePrimitives(format, handleText(value), outer);\n  }\n\n  return undefined;\n};\n\nexport default (() => formatHandler(handlePrimitives))();\n","import { DebugNode } from '@angular/core';\n\nexport default (node: DebugNode): DebugNode =>\n  node.nativeNode?.nodeName === '#text' && node.parent ? node.parent : node;\n","import { DebugNode, Injector } from '@angular/core';\n\nimport coreInjector from '../common/core.injector';\nimport { AnyDeclaration } from '../common/core.types';\nimport { isNgDef } from '../common/func.is-ng-def';\n\nimport { Node } from './func.get-from-node';\n\nconst getParentWithInjector = (node: (DebugNode & Node) | null): Injector | undefined => {\n  let parent: DebugNode | null = node;\n  while (parent?.injector.constructor.name === 'NullInjector') {\n    parent = parent.parent;\n  }\n\n  if (parent) {\n    return parent.injector;\n  }\n\n  return undefined;\n};\n\nexport default <T>(result: T[], node: DebugNode & Node, proto: AnyDeclaration<T>): void => {\n  if (!node.injector || node.injector.constructor.name === 'NullInjector') {\n    return;\n  }\n\n  const parentInjector = getParentWithInjector(node.parent);\n  const parentInstance = parentInjector ? coreInjector(proto, parentInjector) : undefined;\n  const instance = coreInjector(proto, node.injector);\n  // a way to avoid inherited injections\n  if (parentInstance === instance) {\n    return;\n  }\n\n  if (isNgDef(proto, 't') && instance !== undefined) {\n    result.push(instance);\n  } else if (instance !== undefined && result.indexOf(instance) === -1) {\n    result.push(instance);\n  }\n};\n","import { DebugNode } from '@angular/core';\n\nimport { AnyType } from '../common/core.types';\n\nimport { Node } from './func.get-from-node';\nimport funcGetFromNodeElement from './func.get-from-node-element';\nimport funcGetFromNodeScan from './func.get-from-node-scan';\n\nconst detectContextByIndex = (rootView: any, index: number) => {\n  if (typeof rootView[1] === 'object' && rootView[20] === index) {\n    return rootView;\n  }\n\n  for (let i = 21; i < rootView.length; i += 1) {\n    const item = rootView[i];\n    if (Array.isArray(item) && typeof item[1] === 'object' && item[20] === index) {\n      return item;\n    }\n  }\n\n  return undefined;\n};\n\nconst detectContext = (node: DebugNode): any => {\n  let current = node;\n  let context = current.nativeNode?.__ngContext__;\n  while (context === undefined && current.parent) {\n    current = current.parent;\n    context = current.nativeNode.__ngContext__;\n  }\n  if (typeof context !== 'number') {\n    return context;\n  }\n  // welcome to A12 and its optimization\n  // https://github.com/angular/angular/pull/41358\n\n  const rootView = (current.injector as any)._lView;\n  if (Array.isArray(rootView)) {\n    return detectContextByIndex(rootView, context);\n  }\n\n  return undefined;\n};\n\nconst contextToNodes = (context: any): any => (Array.isArray(context) ? context : context?.lView);\n\nexport default <T>(result: T[], node: (DebugNode & Node) | null | undefined, proto: AnyType<T>): void => {\n  if (!node || node._debugContext) {\n    return;\n  }\n\n  const el = funcGetFromNodeElement(node);\n  funcGetFromNodeScan(\n    {\n      el,\n      nodes: contextToNodes(detectContext(node)) || [],\n      normalize: item => item,\n      proto,\n      result,\n    },\n    true,\n  );\n};\n","import { DebugNode } from '@angular/core';\n\nimport { AnyType } from '../common/core.types';\n\nconst detectGatherFlag = (gather: boolean, el: DebugNode | null, node: any): boolean => {\n  // LContainer for structural directives can be a trigger for pipes.\n  if (\n    el &&\n    el.nativeNode &&\n    el.nativeNode.nodeName === '#comment' &&\n    Array.isArray(node) &&\n    node[0] === el.nativeNode\n  ) {\n    return true;\n  }\n\n  // LContainer should stop the scan.\n  if (Array.isArray(node)) {\n    return false;\n  }\n\n  if (!el || !node.nodeName) {\n    return gather;\n  }\n\n  // checking if a commentNode belongs to the current element.\n  // it comes from structural directives.\n  if (node.nodeName === '#comment') {\n    return node === el.nativeNode;\n  }\n\n  // checking if a textNode belongs to the current element.\n  if (node.nodeName === '#text') {\n    return node.parentNode === el.nativeNode;\n  }\n\n  return false;\n};\n\nconst isNotObject = <T>(node: T): boolean => !node || typeof node !== 'object';\n\nconst shouldBeScanned = (scanned: any[], node: any): boolean => scanned.indexOf(node) === -1 && Array.isArray(node);\n\nconst scan = <T>(\n  {\n    result,\n    el,\n    nodes,\n    normalize,\n    proto,\n  }: {\n    el: DebugNode | null;\n    nodes: any[];\n    normalize: (item: T) => T;\n    proto: AnyType<T>;\n    result: T[];\n  },\n  gatherDefault: boolean,\n  scanned: any[] = [],\n): void => {\n  scanned.push(nodes);\n  let gather = gatherDefault;\n\n  let nodesLength = nodes.length;\n  if (nodes.length > 1 && nodes[1] && typeof nodes[1] === 'object' && nodes[1].bindingStartIndex) {\n    nodesLength = nodes[1].bindingStartIndex;\n  }\n\n  for (let index = 0; index < nodesLength; index += 1) {\n    const node = normalize(nodes[index]);\n    if (isNotObject(node)) {\n      continue;\n    }\n\n    if (shouldBeScanned(scanned, node) && Array.isArray(node)) {\n      scan({ result, el, nodes: node, normalize, proto }, gather, scanned);\n    }\n\n    gather = detectGatherFlag(gather, el, node);\n    if (!gather) {\n      continue;\n    }\n\n    if (result.indexOf(node) === -1 && node instanceof proto) {\n      result.push(node);\n    }\n  }\n};\n\nexport default (() => scan)();\n","import { DebugNode } from '@angular/core';\n\nimport { AnyType } from '../common/core.types';\n\nimport { Node } from './func.get-from-node';\nimport funcGetFromNodeElement from './func.get-from-node-element';\nimport funcGetFromNodeScan from './func.get-from-node-scan';\n\nconst normalize = (item: any): any => {\n  if (!item || typeof item !== 'object') {\n    return item;\n  }\n\n  for (const key of ['renderElement', 'renderText', 'instance']) {\n    if (item[key]) {\n      return item[key];\n    }\n  }\n\n  return null;\n};\n\nexport default <T>(result: T[], node: (DebugNode & Node) | null | undefined, proto: AnyType<T>): void => {\n  if (!node || !node._debugContext) {\n    return;\n  }\n\n  const el = funcGetFromNodeElement(node);\n\n  funcGetFromNodeScan(\n    {\n      el,\n      nodes: node._debugContext.view.nodes,\n      normalize,\n      proto,\n      result,\n    },\n    true,\n  );\n};\n","import { DebugNode } from '@angular/core';\n\nimport { AnyDeclaration } from '../common/core.types';\nimport { isNgDef } from '../common/func.is-ng-def';\n\nimport funcGetFromNodeInjector from './func.get-from-node-injector';\nimport funcGetFromNodeIvy from './func.get-from-node-ivy';\nimport funcGetFromNodeStandard from './func.get-from-node-standard';\n\nexport interface Node {\n  _debugContext?: {\n    elDef: {\n      nodeIndex: number;\n    };\n    nodeDef: {\n      nodeIndex: number;\n    };\n    nodeIndex: number;\n    view: {\n      nodes: Array<{\n        instance?: any;\n        renderElement?: any;\n        renderText?: any;\n        value?: any;\n      }>;\n    };\n  };\n  parent?: (DebugNode & Node) | null;\n}\n\nexport default <T>(result: T[], node: DebugNode & Node, proto: AnyDeclaration<T>): T[] => {\n  funcGetFromNodeInjector(result, node, proto);\n  if (!isNgDef(proto, 't') && typeof proto !== 'string') {\n    funcGetFromNodeStandard(result, node, proto);\n    funcGetFromNodeIvy(result, node, proto);\n  }\n\n  return result;\n};\n","import { ComponentFixture, getTestBed } from '@angular/core/testing';\n\nexport default () => {\n  const fixtures: Array<ComponentFixture<any>> = (getTestBed() as any)._activeFixtures;\n\n  return fixtures[fixtures.length - 1];\n};\n","import ngMocksUniverse from '../common/ng-mocks-universe';\n\nexport default () => {\n  ngMocksUniverse.cacheDeclarations.clear();\n  ngMocksUniverse.config.get('ngMocksDepsSkip')?.clear();\n};\n","import { AnyType, DebugNodeSelector } from '../common/core.types';\nimport { isNgDef } from '../common/func.is-ng-def';\n\nexport default (selector: AnyType<any> | DebugNodeSelector): string => {\n  if (typeof selector === 'string') {\n    return selector;\n  }\n  if (typeof selector === 'function') {\n    return selector.name;\n  }\n  if (isNgDef(selector, 't')) {\n    return (selector as any)._desc;\n  }\n  if (Array.isArray(selector)) {\n    return selector[0];\n  }\n  if (!selector) {\n    return '<EMPTY>';\n  }\n\n  return '<UNKNOWN>';\n};\n","import isDebugNode from './format/is-debug-node';\nimport isFixture from './format/is-fixture';\nimport funcGetLastFixture from './func.get-last-fixture';\n\nconst isSelector = (value: any): boolean => {\n  if (typeof value === 'string') {\n    return true;\n  }\n  if (Array.isArray(value) && typeof value[0] === 'string') {\n    return true;\n  }\n  if (isFixture(value)) {\n    return true;\n  }\n  if (isDebugNode(value)) {\n    return true;\n  }\n\n  return true;\n};\n\nexport default (args: any[], isValidValue: (value: any) => boolean, defaultNotFoundValue?: any): [any, any, any] => {\n  let el;\n  let sel;\n  let notFoundValue = defaultNotFoundValue;\n  if (args.length === 3) {\n    [el, sel, notFoundValue] = args;\n  } else if (args.length === 1) {\n    el = funcGetLastFixture();\n    [sel] = args;\n  } else if (isValidValue(args[1]) && isSelector(args[0])) {\n    [el, sel] = args;\n  } else {\n    el = funcGetLastFixture();\n    [sel, notFoundValue] = args;\n  }\n\n  return [el, sel, notFoundValue];\n};\n","import { DebugNode, Directive } from '@angular/core';\n\nimport coreInjector from '../common/core.injector';\nimport coreReflectDirectiveResolve from '../common/core.reflect.directive-resolve';\nimport funcGetType from '../common/func.get-type';\n\nconst getMeta = (token: any): Directive | undefined => {\n  try {\n    return coreReflectDirectiveResolve(token);\n  } catch {\n    return undefined;\n  }\n};\n\nexport default (el: DebugNode | null | undefined, token: any): Directive | undefined => {\n  // istanbul ignore if\n  if (!el) {\n    return undefined;\n  }\n\n  try {\n    const provider = funcGetType(token);\n    const instance = coreInjector(provider, el.injector);\n\n    return getMeta(instance.constructor);\n  } catch {\n    return undefined;\n  }\n};\n","import { DirectiveIo } from '../common/core.types';\nimport funcDirectiveIoParse from '../common/func.directive-io-parse';\nimport { MockedDebugElement } from '../mock-render/types';\n\nimport mockHelperFind from './find/mock-helper.find';\nimport funcGetLastFixture from './func.get-last-fixture';\nimport funcParseProviderTokensDirectives from './func.parse-provider-tokens-directives';\nimport mockHelperGet from './mock-helper.get';\n\nconst defaultNotFoundValue = {}; // simulating Symbol\n\nconst parseArgs = (args: any[]): [MockedDebugElement | null | undefined, string, any] => [\n  args[0],\n  args[1],\n  args.length === 3 ? args[2] : defaultNotFoundValue,\n];\n\nconst attrMatches = (attribute: DirectiveIo, selector: string): string | undefined => {\n  const { name, alias = '' } = funcDirectiveIoParse(attribute);\n\n  if ((!alias && name === selector) || (!!alias && alias === selector)) {\n    return name;\n  }\n\n  return undefined;\n};\n\nconst detectAttribute = (el: MockedDebugElement | null | undefined, attr: 'inputs' | 'outputs', sel: string) => {\n  for (const token of el?.providerTokens || []) {\n    const meta = funcParseProviderTokensDirectives(el, token);\n    if (!meta) {\n      continue;\n    }\n\n    for (const attrDef of meta[attr] || /* istanbul ignore next */ []) {\n      const prop = attrMatches(attrDef, sel);\n      if (prop) {\n        return mockHelperGet(el, token)[prop];\n      }\n    }\n  }\n\n  throw new Error('Not found');\n};\n\nexport default (label: string, attr: 'inputs' | 'outputs', ...args: any[]) => {\n  const [el, sel, notFoundValue] = parseArgs(args);\n\n  try {\n    return detectAttribute(mockHelperFind(funcGetLastFixture(), el, undefined), attr, sel);\n  } catch {\n    // nothing to do\n  }\n  if (notFoundValue !== defaultNotFoundValue) {\n    return notFoundValue;\n  }\n  throw new Error(`Cannot find ${sel} ${label} via ngMocks.${label}`);\n};\n","import { registerMockFunction } from '../mock-service/helper.mock-service';\nimport { CustomMockFunction } from '../mock-service/types';\n\ntype param = 'jasmine' | 'jest' | 'default' | 'reset' | CustomMockFunction;\n\nconst calls: param[] = [];\n\nexport default (type: param) => {\n  if (type === 'reset') {\n    calls.pop();\n  } else {\n    calls.push(type);\n  }\n  const action: param | undefined = calls[calls.length - 1];\n\n  if (action === 'jasmine') {\n    return registerMockFunction(mockName => jasmine.createSpy(mockName));\n  }\n  // istanbul ignore if: because it is run with jasmine\n  if (action === 'jest') {\n    return registerMockFunction(name => jest.fn().mockName(name));\n  }\n  if (!action || action === 'default' || action === 'reset') {\n    return registerMockFunction();\n  }\n\n  return registerMockFunction(action);\n};\n","import helperMockService from '../mock-service/helper.mock-service';\n\nimport mockHelperConsole from './mock-helper.console';\n\nconst factory = (propName: string) => helperMockService.mockFunction(`console.${propName}`);\n\n// Thanks Ivy, it does not throw an error, and we have to use injector.\nexport default mockHelperConsole(['log'], factory);\n","import coreDefineProperty from '../common/core.define-property';\n\nimport mockHelperConsole from './mock-helper.console';\n\nconst factory =\n  (propName: string) =>\n  (...args: any[]) => {\n    const error = new Error(args.join(' '));\n    coreDefineProperty(error, 'ngMocksConsoleCatch', propName);\n    throw error;\n  };\n\n// Thanks Ivy, it does not throw an error, and we have to use injector.\nexport default mockHelperConsole(['warn', 'error'], factory);\n","/* eslint-disable no-console */\n\nimport coreDefineProperty from '../common/core.define-property';\n\n// Thanks Ivy, it does not throw an error, and we have to use injector.\nexport default (defaultMethods: Array<keyof typeof console>, factory: (name: string) => any) =>\n  (...methods: Array<keyof typeof console>): void => {\n    const backup: Array<keyof typeof console> = [];\n\n    beforeEach(() => {\n      for (const method of defaultMethods) {\n        if (methods.indexOf(method) === -1) {\n          methods.push(method);\n        }\n      }\n\n      for (const method of methods) {\n        coreDefineProperty(console, `__ngMocksBackup_${method}`, (console as any)[`__ngMocksBackup_${method}`] || []);\n        (console as any)[`__ngMocksBackup_${method}`].push(console[method]);\n        backup.push(method);\n        console[method] = factory(method) as never;\n      }\n    });\n\n    afterEach(() => {\n      for (const method of backup) {\n        console[method] = (console as any)[`__ngMocksBackup_${method}`].pop();\n      }\n      backup.splice(0, backup.length);\n    });\n  };\n","import { flatten } from '../common/core.helpers';\nimport { AnyDeclaration } from '../common/core.types';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\nimport { IMockBuilderConfig } from '../mock-builder/types';\n\nexport default <T>(\n  def: AnyDeclaration<T> | string | Array<AnyDeclaration<T> | string>,\n  config?: IMockBuilderConfig,\n): void => {\n  const map = ngMocksUniverse.getConfigMock();\n  for (const item of flatten(def)) {\n    if (config) {\n      map.set(item, config);\n    } else {\n      map.delete(item);\n    }\n  }\n};\n","import { Injector } from '@angular/core';\n\nimport { flatten } from '../common/core.helpers';\nimport { AnyDeclaration } from '../common/core.types';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nexport default <T>(\n  def: AnyDeclaration<T> | string | Array<AnyDeclaration<T> | string>,\n  callback?: (instance: undefined | T, injector: Injector) => void | Partial<T>,\n): void => {\n  const map = ngMocksUniverse.getOverrides();\n  for (const item of flatten(def)) {\n    if (callback) {\n      const set: Set<any> = map.has(item) ? map.get(item) : new Set();\n      set.add(callback);\n      map.set(item, set);\n    } else {\n      map.delete(item);\n    }\n  }\n};\n","import { getTestBed, TestBed, TestBedStatic, TestModuleMetadata } from '@angular/core/testing';\n\nimport coreDefineProperty from '../common/core.define-property';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nconst hooks: {\n  after: Array<\n    (original: TestBedStatic['resetTestingModule'], instance: TestBedStatic) => TestBedStatic['resetTestingModule']\n  >;\n  before: Array<\n    (\n      original: TestBedStatic['configureTestingModule'],\n      instance: TestBedStatic,\n    ) => TestBedStatic['configureTestingModule']\n  >;\n} = ngMocksUniverse.global.get('faster-hooks') || {\n  after: [],\n  before: [],\n};\nngMocksUniverse.global.set('faster-hooks', hooks);\n\nconst configureTestingModule =\n  (\n    original: TestBedStatic['configureTestingModule'],\n    instance: TestBedStatic,\n  ): TestBedStatic['configureTestingModule'] =>\n  (moduleDef: TestModuleMetadata) => {\n    if ((TestBed as any).ngMocksFasterLock) {\n      return original.call(instance, moduleDef);\n    }\n\n    ngMocksUniverse.global.set('bullet:customized', true);\n\n    let final = original;\n    for (const callback of hooks.before) {\n      final = callback(final, instance);\n    }\n\n    try {\n      coreDefineProperty(TestBed, 'ngMocksFasterLock', true);\n\n      return final.call(instance, moduleDef);\n    } finally {\n      coreDefineProperty(TestBed, 'ngMocksFasterLock', undefined);\n    }\n  };\n\nconst resetTestingModule =\n  (original: TestBedStatic['resetTestingModule'], instance: TestBedStatic): TestBedStatic['resetTestingModule'] =>\n  () => {\n    if ((TestBed as any).ngMocksFasterLock) {\n      return original.call(instance);\n    }\n\n    if (ngMocksUniverse.global.has('bullet')) {\n      if (ngMocksUniverse.global.has('bullet:customized')) {\n        ngMocksUniverse.global.set('bullet:reset', true);\n      }\n\n      return instance;\n    }\n    ngMocksUniverse.global.delete('bullet:customized');\n    ngMocksUniverse.global.delete('bullet:reset');\n\n    let final = original;\n    for (const callback of hooks.after) {\n      final = callback(final, instance);\n    }\n\n    try {\n      coreDefineProperty(TestBed, 'ngMocksFasterLock', true);\n\n      return final.call(instance);\n    } finally {\n      coreDefineProperty(TestBed, 'ngMocksFasterLock', undefined);\n    }\n  };\n\nexport default () => {\n  if (!(TestBed as any).ngMocksFasterInstalled) {\n    TestBed.configureTestingModule = configureTestingModule(TestBed.configureTestingModule as never, TestBed as never);\n    TestBed.resetTestingModule = resetTestingModule(TestBed.resetTestingModule as never, TestBed as never);\n    coreDefineProperty(TestBed, 'ngMocksFasterInstalled', true);\n  }\n\n  const testBed = getTestBed();\n  if (!(testBed as any).ngMocksFasterInstalled) {\n    testBed.configureTestingModule = configureTestingModule(testBed.configureTestingModule as never, testBed as never);\n    testBed.resetTestingModule = resetTestingModule(testBed.resetTestingModule as never, testBed as never);\n    coreDefineProperty(testBed, 'ngMocksFasterInstalled', true);\n  }\n\n  return hooks;\n};\n","import { ComponentFixture, getTestBed, TestBed } from '@angular/core/testing';\n\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nimport mockHelperFasterInstall from './mock-helper.faster-install';\nimport mockHelperFlushTestBed from './mock-helper.flush-test-bed';\n\nconst resetFixtures = (id: never) => {\n  const activeFixtures: Array<ComponentFixture<any> & { ngMocksStackId?: any }> =\n    (getTestBed() as any)._activeFixtures || /* istanbul ignore next */ [];\n\n  let active = 0;\n  for (let i = activeFixtures.length - 1; i >= 0; i -= 1) {\n    if (!activeFixtures[i].ngMocksStackId || activeFixtures[i].ngMocksStackId === id) {\n      activeFixtures[i].ngMocksStackId = undefined;\n      activeFixtures[i].destroy();\n      activeFixtures.splice(i, 1);\n    } else {\n      active += 1;\n    }\n  }\n  if (active === 0) {\n    mockHelperFlushTestBed();\n  }\n};\n\nconst idAdd = (id: any) => {\n  const bulletStack: any[] = ngMocksUniverse.global.get('bullet:stack') ?? [];\n  bulletStack.push(id);\n  ngMocksUniverse.global.set('bullet:stack', bulletStack);\n  ngMocksUniverse.global.set('bullet:stack:id', id);\n};\nconst idRemove = (id: any) => {\n  const bulletStack: any[] = ngMocksUniverse.global.get('bullet:stack');\n  bulletStack.splice(bulletStack.indexOf(id), 1);\n  if (bulletStack.length > 0) {\n    ngMocksUniverse.global.set('bullet:stack:id', bulletStack[bulletStack.length - 1]);\n  } else {\n    ngMocksUniverse.global.delete('bullet:stack:id');\n  }\n\n  resetFixtures(id as never);\n};\n\nexport default () => {\n  mockHelperFasterInstall();\n\n  const idAll = {};\n  const idEach = {};\n\n  beforeAll(() => {\n    if (ngMocksUniverse.global.has('bullet:customized')) {\n      TestBed.resetTestingModule();\n    }\n    ngMocksUniverse.global.set('bullet', true);\n    idAdd(idAll);\n  });\n\n  beforeEach(() => {\n    idAdd(idEach);\n  });\n  afterEach(() => {\n    idRemove(idEach);\n  });\n\n  afterAll(() => {\n    idRemove(idAll);\n    ngMocksUniverse.global.delete('bullet');\n    if (ngMocksUniverse.global.has('bullet:reset')) {\n      TestBed.resetTestingModule();\n    }\n  });\n};\n","import { getTestBed } from '@angular/core/testing';\n\nexport default (): void => {\n  const testBed: any = getTestBed();\n  testBed._instantiated = false;\n  testBed._moduleFactory = undefined;\n  testBed._testModuleRef = null;\n};\n","import { DebugElement } from '@angular/core';\nimport { TestBed } from '@angular/core/testing';\n\nimport { Type } from '../common/core.types';\nimport funcGetName from '../common/func.get-name';\nimport { getSourceOfMock } from '../common/func.get-source-of-mock';\nimport { MockedDebugElement } from '../mock-render/types';\n\nimport nestedCheckParent from './crawl/nested-check-parent';\nimport mockHelperFind from './find/mock-helper.find';\nimport funcGetFromNode from './func.get-from-node';\nimport funcGetLastFixture from './func.get-last-fixture';\nimport funcParseFindArgsName from './func.parse-find-args-name';\n\nconst defaultNotFoundValue = {}; // simulating Symbol\n\nconst parseArgs = <T>(\n  args: any[],\n): {\n  el: MockedDebugElement | null | undefined;\n  notFoundValue: any;\n  sel: Type<T>;\n} => ({\n  el: args[0],\n  notFoundValue: args.length === 3 ? args[2] : defaultNotFoundValue,\n  sel: args[1],\n});\n\nexport default <T>(...args: any[]) => {\n  if (args.length === 1) {\n    try {\n      return TestBed.inject ? TestBed.inject(args[0]) : /* istanbul ignore next */ TestBed.get(args[0]);\n    } catch {\n      throw new Error(`Cannot find an instance via ngMocks.get(${funcParseFindArgsName(args[0])})`);\n    }\n  }\n\n  const { el, sel, notFoundValue } = parseArgs<T>(args);\n  const root: DebugElement | undefined = mockHelperFind(funcGetLastFixture(), el, undefined);\n  const source = getSourceOfMock(sel);\n\n  // Looking in the root.\n  if (root) {\n    const result = funcGetFromNode([], root, source);\n    if (result.length > 0) {\n      return result[0];\n    }\n  }\n\n  // Looking for a related structural directive.\n  if (root) {\n    const parent = nestedCheckParent(root, undefined);\n    if (parent && parent.nativeNode.nodeName === '#comment') {\n      const result = funcGetFromNode([], parent, source);\n      if (result.length > 0) {\n        return result[0];\n      }\n    }\n  }\n\n  if (notFoundValue !== defaultNotFoundValue) {\n    return notFoundValue;\n  }\n  throw new Error(`Cannot find ${funcGetName(sel)} instance via ngMocks.get`);\n};\n","import { AnyDeclaration } from '../common/core.types';\nimport funcIterateDeclaration from '../common/func.iterate-declaration';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nimport funcGlobalPrepare from './func.global-prepare';\n\nconst action = (source: AnyDeclaration<any>): void => {\n  ngMocksUniverse.getDefaults().set(source, ['exclude']);\n};\nexport default (source: AnyDeclaration<any>, recursively = false): void => {\n  funcGlobalPrepare();\n  action(source);\n\n  if (recursively) {\n    funcIterateDeclaration(source, action);\n  }\n};\n","import { AnyDeclaration } from '../common/core.types';\nimport funcIterateDeclaration from '../common/func.iterate-declaration';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nimport funcGlobalPrepare from './func.global-prepare';\n\nconst action = (source: AnyDeclaration<any>): void => {\n  ngMocksUniverse.getDefaults().set(source, ['keep']);\n};\nexport default (source: AnyDeclaration<any>, recursively = false): void => {\n  funcGlobalPrepare();\n  action(source);\n\n  if (recursively) {\n    funcIterateDeclaration(source, action);\n  }\n};\n","import { AnyDeclaration } from '../common/core.types';\nimport funcIterateDeclaration from '../common/func.iterate-declaration';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nimport funcGlobalPrepare from './func.global-prepare';\n\nconst action = (source: AnyDeclaration<any>): void => {\n  ngMocksUniverse.getDefaults().set(source, ['mock']);\n};\nexport default (source: AnyDeclaration<any>, recursively = false): void => {\n  funcGlobalPrepare();\n  action(source);\n\n  if (recursively) {\n    funcIterateDeclaration(source, action);\n  }\n};\n","import { AnyType } from '../common/core.types';\nimport { isNgDef } from '../common/func.is-ng-def';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nimport funcGlobalPrepare from './func.global-prepare';\n\nexport default (source: AnyType<any>, destination: AnyType<any>): void => {\n  let fail = true;\n  if (isNgDef(source, 'm') && isNgDef(destination, 'm')) {\n    fail = false;\n  } else if (isNgDef(source, 'c') && isNgDef(destination, 'c')) {\n    fail = false;\n  } else if (isNgDef(source, 'd') && isNgDef(destination, 'd')) {\n    fail = false;\n  } else if (isNgDef(source, 'p') && isNgDef(destination, 'p')) {\n    fail = false;\n  }\n\n  if (fail) {\n    throw new Error('Cannot replace the declaration, both have to be a Module, a Component, a Directive or a Pipe');\n  }\n\n  funcGlobalPrepare();\n  ngMocksUniverse.getDefaults().set(source, ['replace', destination]);\n};\n","import { AnyDeclaration } from '../common/core.types';\nimport funcIterateDeclaration from '../common/func.iterate-declaration';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nimport funcGlobalPrepare from './func.global-prepare';\nimport mockHelperDefaultMock from './mock-helper.default-mock';\n\nconst action = (source: AnyDeclaration<any>): void => {\n  ngMocksUniverse.getDefaults().delete(source);\n  mockHelperDefaultMock(source);\n};\n\nexport default (source: AnyDeclaration<any>, recursively = false): void => {\n  funcGlobalPrepare();\n  action(source);\n\n  if (recursively) {\n    funcIterateDeclaration(source, action);\n  }\n};\n","import { TestModuleMetadata } from '@angular/core/testing';\n\nimport CoreDefStack from '../common/core.def-stack';\nimport { flatten, mapKeys, mapValues } from '../common/core.helpers';\nimport coreReflectModuleResolve from '../common/core.reflect.module-resolve';\nimport funcGetType from '../common/func.get-type';\nimport { isNgDef } from '../common/func.is-ng-def';\nimport { isNgInjectionToken } from '../common/func.is-ng-injection-token';\nimport { isNgModuleDefWithProviders } from '../common/func.is-ng-module-def-with-providers';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\nimport { MockComponent } from '../mock-component/mock-component';\nimport { MockDirective } from '../mock-directive/mock-directive';\nimport { MockModule } from '../mock-module/mock-module';\nimport { MockPipe } from '../mock-pipe/mock-pipe';\nimport mockProvider from '../mock-service/mock-provider';\n\ntype Data = {\n  declarations: any[];\n  exclude: Set<any>;\n  imports: any[];\n  keep: Set<any>;\n  mock: Set<any>;\n  optional: Map<any, any>;\n  providers: any[];\n  skip: Set<any>;\n};\n\nconst skipDef = (def: any, skip: Set<any>, exclude: Set<any>): boolean => {\n  if (skip.has(def)) {\n    return true;\n  }\n  skip.add(def);\n\n  return exclude.has(def);\n};\n\nconst createMetaHandler = (\n  optional: Map<any, any>,\n  proto: any,\n  imports: any[],\n  declarations: any[],\n  providers: any[],\n): void => {\n  const def = optional.get(proto) || proto;\n\n  if (isNgDef(def, 'm')) {\n    imports.push(def);\n  } else if (isNgDef(def, 'c') || isNgDef(def, 'd')) {\n    declarations.push(def);\n  } else if (isNgDef(def, 'p')) {\n    declarations.push(def);\n    providers.push(def);\n  } else if (!isNgInjectionToken(def)) {\n    providers.push(def);\n  }\n};\n\nconst createMeta = ({ keep, skip, optional, exclude, imports, declarations, providers }: Data): TestModuleMetadata => {\n  for (const proto of keep) {\n    if (skip.has(proto) || exclude.has(proto) || optional.has(proto)) {\n      continue;\n    }\n    createMetaHandler(optional, proto, imports, declarations, providers);\n  }\n\n  return { declarations, imports, providers };\n};\n\nconst typeMap: Array<[any, string]> = [\n  ['m', 'module'],\n  ['c', 'component'],\n  ['d', 'directive'],\n  ['p', 'pipe'],\n];\n\nconst getType = (def: any, keep: Set<any>): string => {\n  if (isNgModuleDefWithProviders(def)) {\n    return 'module-with-providers';\n  }\n  for (const [flag, value] of typeMap) {\n    if (isNgDef(def, flag)) {\n      return flag === 'm' && keep.has(def) ? `${value}-keep` : value;\n    }\n  }\n\n  return '';\n};\n\nconst handleModuleWithProviders = (data: Data, def: any): void => {\n  if (data.skip.has(def.ngModule)) {\n    return;\n  }\n  data.skip.add(def.ngModule);\n  if (data.exclude.has(def.ngModule)) {\n    return;\n  }\n\n  data.imports.push(data.keep.has(def.ngModule) ? def : MockModule(def));\n};\n\nconst handleDeclaration = (data: Data, def: any, callback: any, bucket: any[]): void => {\n  if (skipDef(def, data.skip, data.exclude)) {\n    return;\n  }\n\n  bucket.push(data.keep.has(def) ? def : callback(def));\n};\n\nconst handleDestructuring = (data: Data, def: any, callback: any): void => {\n  if (skipDef(def, data.skip, data.exclude)) {\n    return;\n  }\n\n  const meta = coreReflectModuleResolve(def);\n  for (const toMock of flatten([meta.declarations, meta.imports])) {\n    callback(data, toMock);\n  }\n  for (const toMock of meta.providers ? flatten(meta.providers) : []) {\n    resolveProvider(data, toMock);\n  }\n};\n\nconst resolveProvider = ({ skip, keep, providers, exclude }: Data, def: any): void => {\n  const provider = funcGetType(def);\n  skip.add(provider);\n  if (exclude.has(provider)) {\n    return;\n  }\n\n  const providerDef = keep.has(provider) ? def : mockProvider(def);\n  if (providerDef) {\n    providers.push(providerDef);\n  }\n};\n\nconst resolveMap: Record<string, any> = {\n  component: MockComponent,\n  directive: MockDirective,\n  pipe: MockPipe,\n};\n\nconst resolveHandler = (data: Data, type: string, def: any, skipDestruction: boolean): void => {\n  if (type === 'module-with-providers') {\n    handleModuleWithProviders(data, def);\n  } else if (type === 'module-keep') {\n    handleDeclaration(data, def, MockModule, data.imports); // MockModule will not be called because the def is kept.\n  } else if (type === 'module' && skipDestruction) {\n    handleDeclaration(data, def, MockModule, data.imports);\n  } else if (type === 'module') {\n    handleDestructuring(data, def, resolve);\n  } else if (resolveMap[type]) {\n    handleDeclaration(data, def, resolveMap[type], data.declarations);\n  } else {\n    resolveProvider(data, def);\n  }\n};\n\nconst resolve = (data: Data, proto: any, skipDestruction = true): void => {\n  if (!proto) {\n    return;\n  }\n\n  const type = getType(proto, data.keep);\n  let def: any;\n\n  // an attempt to replace declarations.\n  if (type !== 'module-with-providers') {\n    const value = data.optional.get(proto);\n    if (value && value !== proto) {\n      def = value;\n      data.keep.add(def);\n    }\n  }\n  if (!def) {\n    def = proto;\n  }\n\n  resolveHandler(data, type, def, skipDestruction);\n};\n\nconst generateDataWithUniverse = (keep: Set<any>, mock: Set<any>, exclude: Set<any>, optional: Map<any, any>): void => {\n  for (const k of mapKeys(ngMocksUniverse.getDefaults())) {\n    const v = ngMocksUniverse.getBuildDeclaration(k);\n    if (keep.has(k) || mock.has(k) || exclude.has(k)) {\n      continue;\n    }\n    optional.set(k, v);\n\n    if (v === null) {\n      exclude.add(k);\n    } else if (v === undefined) {\n      mock.add(k);\n    } else if (k === v) {\n      keep.add(k);\n    }\n  }\n};\n\nconst generateData = (protoKeep: any, protoMock: any, protoExclude: any): Data => {\n  const keep = new Set(flatten(protoKeep || []));\n  const mock = new Set(flatten(protoMock || []));\n  const exclude = new Set(flatten(protoExclude || []));\n  const optional = new Map();\n  generateDataWithUniverse(keep, mock, exclude, optional);\n\n  return {\n    declarations: [],\n    exclude,\n    imports: [],\n    keep,\n    mock,\n    optional,\n    providers: [],\n    skip: new Set(),\n  };\n};\n\nexport default (keep: any, mock: any = null, exclude: any = null): TestModuleMetadata => {\n  const data: Data = generateData(keep, mock, exclude);\n\n  const resolutions = new Map();\n  ngMocksUniverse.config.set('ngMocksDepsResolution', resolutions);\n  for (const mockDef of mapValues(data.keep)) {\n    resolutions.set(mockDef, 'keep');\n  }\n  for (const mockDef of mapValues(data.exclude)) {\n    resolutions.set(mockDef, 'exclude');\n  }\n\n  ngMocksUniverse.config.set('mockNgDefResolver', new CoreDefStack());\n  for (const def of mapValues(data.mock)) {\n    resolutions.set(def, 'mock');\n    if (data.optional.has(def)) {\n      continue;\n    }\n    resolve(data, def, false);\n  }\n  const meta = createMeta(data);\n  ngMocksUniverse.config.delete('mockNgDefResolver');\n  ngMocksUniverse.config.delete('ngMocksDepsResolution');\n\n  return meta;\n};\n","import mockHelperAttributes from './mock-helper.attributes';\n\nexport default (...args: any[]) => mockHelperAttributes('input', 'inputs', ...args);\n","import coreConfig from '../common/core.config';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nimport mockHelperCrawl from './crawl/mock-helper.crawl';\nimport mockHelperReveal from './crawl/mock-helper.reveal';\nimport mockHelperRevealAll from './crawl/mock-helper.reveal-all';\nimport mockHelperChange from './cva/mock-helper.change';\nimport mockHelperTouch from './cva/mock-helper.touch';\nimport mockHelperClick from './events/mock-helper.click';\nimport mockHelperEvent from './events/mock-helper.event';\nimport mockHelperTrigger from './events/mock-helper.trigger';\nimport mockHelperFind from './find/mock-helper.find';\nimport mockHelperFindAll from './find/mock-helper.find-all';\nimport mockHelperFindInstance from './find-instance/mock-helper.find-instance';\nimport mockHelperFindInstances from './find-instance/mock-helper.find-instances';\nimport mockHelperFormatHtml from './format/mock-helper.format-html';\nimport mockHelperFormatText from './format/mock-helper.format-text';\nimport mockHelperAutoSpy from './mock-helper.auto-spy';\nimport mockHelperConsoleIgnore from './mock-helper.console-ignore';\nimport mockHelperConsoleThrow from './mock-helper.console-throw';\nimport mockHelperDefaultConfig from './mock-helper.default-config';\nimport mockHelperDefaultMock from './mock-helper.default-mock';\nimport mockHelperFaster from './mock-helper.faster';\nimport mockHelperFlushTestBed from './mock-helper.flush-test-bed';\nimport mockHelperGet from './mock-helper.get';\nimport mockHelperGlobalExclude from './mock-helper.global-exclude';\nimport mockHelperGlobalKeep from './mock-helper.global-keep';\nimport mockHelperGlobalMock from './mock-helper.global-mock';\nimport mockHelperGlobalReplace from './mock-helper.global-replace';\nimport mockHelperGlobalWipe from './mock-helper.global-wipe';\nimport mockHelperGuts from './mock-helper.guts';\nimport mockHelperInput from './mock-helper.input';\nimport mockHelperOutput from './mock-helper.output';\nimport mockHelperReset from './mock-helper.reset';\nimport mockHelperStub from './mock-helper.stub';\nimport mockHelperStubMember from './mock-helper.stub-member';\nimport mockHelperHide from './render/mock-helper.hide';\nimport mockHelperRender from './render/mock-helper.render';\nimport mockHelperFindTemplateRef from './template-ref/mock-helper.find-template-ref';\nimport mockHelperFindTemplateRefs from './template-ref/mock-helper.find-template-refs';\n\nconst flagNames = ['onMockBuilderMissingDependency', 'onMockInstanceRestoreNeed', 'onTestBedFlushNeed'] as const;\n\nexport default {\n  autoSpy: mockHelperAutoSpy,\n  change: mockHelperChange,\n  click: mockHelperClick,\n  config: (config: {\n    mockRenderCacheSize?: number | null;\n    onMockBuilderMissingDependency?: 'throw' | 'warn' | 'i-know-but-disable' | null;\n    onMockInstanceRestoreNeed?: 'throw' | 'warn' | 'i-know-but-disable' | null;\n    onTestBedFlushNeed?: 'throw' | 'warn' | 'i-know-but-disable' | null;\n  }) => {\n    const flags = ngMocksUniverse.global.get('flags');\n    for (const flag of flagNames) {\n      if (config[flag] === null) {\n        flags[flag] = coreConfig[flag];\n      } else if (config[flag] !== undefined) {\n        flags[flag] = config[flag];\n      }\n    }\n    if (config.mockRenderCacheSize === null) {\n      ngMocksUniverse.global.delete('mockRenderCacheSize');\n    } else if (config.mockRenderCacheSize !== undefined) {\n      ngMocksUniverse.global.set('mockRenderCacheSize', config.mockRenderCacheSize);\n    }\n  },\n  crawl: mockHelperCrawl,\n  defaultConfig: mockHelperDefaultConfig,\n  defaultMock: mockHelperDefaultMock,\n  event: mockHelperEvent,\n  faster: mockHelperFaster,\n  find: mockHelperFind,\n  findAll: mockHelperFindAll,\n  findInstance: mockHelperFindInstance,\n  findInstances: mockHelperFindInstances,\n  findTemplateRef: mockHelperFindTemplateRef,\n  findTemplateRefs: mockHelperFindTemplateRefs,\n  flushTestBed: mockHelperFlushTestBed,\n  formatHtml: mockHelperFormatHtml,\n  formatText: mockHelperFormatText,\n  get: mockHelperGet,\n  globalExclude: mockHelperGlobalExclude,\n  globalKeep: mockHelperGlobalKeep,\n  globalMock: mockHelperGlobalMock,\n  globalReplace: mockHelperGlobalReplace,\n  globalWipe: mockHelperGlobalWipe,\n  guts: mockHelperGuts,\n  hide: mockHelperHide,\n  ignoreOnConsole: mockHelperConsoleIgnore,\n  input: mockHelperInput,\n  output: mockHelperOutput,\n  render: mockHelperRender,\n  reset: mockHelperReset,\n  reveal: mockHelperReveal,\n  revealAll: mockHelperRevealAll,\n  stub: mockHelperStub,\n  stubMember: mockHelperStubMember,\n  throwOnConsole: mockHelperConsoleThrow,\n  touch: mockHelperTouch,\n  trigger: mockHelperTrigger,\n};\n","import mockHelperAttributes from './mock-helper.attributes';\n\nexport default (...args: any[]) => mockHelperAttributes('output', 'outputs', ...args);\n","import coreConfig from '../common/core.config';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nexport default (): void => {\n  ngMocksUniverse.builtDeclarations = new Map();\n  ngMocksUniverse.builtProviders = new Map();\n  ngMocksUniverse.cacheDeclarations = new Map();\n  ngMocksUniverse.cacheProviders = new Map();\n  ngMocksUniverse.config = new Map();\n  ngMocksUniverse.configInstance = new Map();\n  ngMocksUniverse.flags = new Set(coreConfig.flags);\n  ngMocksUniverse.touches = new Set();\n};\n","import helperExtractPropertyDescriptor from '../mock-service/helper.extract-property-descriptor';\n\nexport default <T extends object>(\n  instance: T & { __ngMocks__source?: object },\n  key: any,\n  value: any,\n  encapsulation?: 'get' | 'set',\n): any => {\n  const def = helperExtractPropertyDescriptor(instance, key) ?? {};\n\n  if (!encapsulation && def.set && (def.set as any).__ngMocksProxy) {\n    def.set(value);\n\n    return value;\n  }\n\n  const descriptor: PropertyDescriptor = {\n    configurable: true,\n    enumerable: true,\n  };\n  if (encapsulation === 'get' && def.set) {\n    descriptor.set = def.set;\n  } else if (encapsulation === 'set' && def.get) {\n    descriptor.get = def.get;\n  }\n  if (encapsulation) {\n    descriptor[encapsulation] = value;\n  } else {\n    descriptor.writable = true;\n    descriptor.value = value;\n  }\n\n  Object.defineProperty(instance, key, descriptor);\n\n  return value;\n};\n","import helperMockService from '../mock-service/helper.mock-service';\nimport { MockedFunction } from '../mock-service/types';\n\nexport default <T = MockedFunction>(instance: any, override: any, style?: 'get' | 'set'): T => {\n  if (typeof override === 'string') {\n    return helperMockService.mock(instance, override, style);\n  }\n\n  // if someone is giving us a function, then we should swap instance and overrides.\n  // so in the end the function can be called, but it also has all desired properties.\n  let correctInstance = instance;\n  let applyOverrides = override;\n  const skipProps = ['__zone_symbol__unconfigurables'];\n  if (typeof override === 'function') {\n    correctInstance = helperMockService.createClone(override);\n    applyOverrides = instance;\n    skipProps.push(...Object.getOwnPropertyNames(correctInstance));\n  }\n\n  for (const key of Object.getOwnPropertyNames(applyOverrides)) {\n    const desc = skipProps.indexOf(key) === -1 ? Object.getOwnPropertyDescriptor(applyOverrides, key) : undefined;\n    if (desc && Object.prototype.hasOwnProperty.call(desc, 'value') && desc.value === undefined) {\n      continue;\n    }\n    helperMockService.definePropertyDescriptor(correctInstance, key, desc);\n  }\n\n  return correctInstance;\n};\n","/* eslint-disable max-lines */\n\nimport { DebugNode, EventEmitter, InjectionToken, Injector, Provider, TemplateRef } from '@angular/core';\nimport { ComponentFixture, TestModuleMetadata } from '@angular/core/testing';\n\nimport { AnyDeclaration, AnyType, DebugNodeSelector, Type } from '../common/core.types';\nimport { NgModuleWithProviders } from '../common/func.is-ng-module-def-with-providers';\nimport { IMockBuilderConfig } from '../mock-builder/types';\nimport { MockedDebugElement, MockedDebugNode } from '../mock-render/types';\nimport { CustomMockFunction, MockedFunction } from '../mock-service/types';\n\nimport { FORMAT_SET, FORMAT_SINGLE } from './format/types';\nimport mockHelperObject from './mock-helper.object';\n\n/**\n * ngMocks provides a lot of tools to simply testing.\n *\n * @see https://ng-mocks.sudo.eu/api/ngMocks\n */\nexport const ngMocks: {\n  /**\n   * ngMocks.autoSpy installs proper spies instead of empty functions.\n   *\n   * @see https://ng-mocks.sudo.eu/extra/auto-spy\n   */\n  autoSpy(type: 'jasmine' | 'jest' | 'default' | 'reset'): void;\n\n  /**\n   * ngMocks.autoSpy installs proper spies instead of empty functions.\n   *\n   * @see https://ng-mocks.sudo.eu/extra/auto-spy\n   */\n  autoSpy(type: CustomMockFunction): void;\n\n  /**\n   * ngMocks.defaultConfig sets the default config of declarations for MockBuilder.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/defaultConfig\n   */\n  defaultConfig<T>(token: string | AnyDeclaration<T>, config?: IMockBuilderConfig): void;\n\n  /**\n   * ngMocks.defaultMock sets default customizations of mock tokens.\n   * It helps to avoid repetitions from test to test.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/defaultMock\n   */\n  defaultMock<T>(\n    token: InjectionToken<T>,\n    handler?: (value: undefined | T, injector: Injector) => undefined | Partial<T>,\n    config?: IMockBuilderConfig,\n  ): void;\n\n  /**\n   * ngMocks.defaultMock sets default customizations of mock string tokens.\n   * It helps to avoid repetitions from test to test.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/defaultMock\n   */\n  defaultMock<T = any>(\n    token: string,\n    handler?: (value: undefined | T, injector: Injector) => undefined | Partial<T>,\n    config?: IMockBuilderConfig,\n  ): void;\n\n  /**\n   * ngMocks.defaultMock sets default customizations of mock declarations.\n   * It helps to avoid repetitions from test to test.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/defaultMock\n   */\n  defaultMock<T>(\n    def: AnyType<T>,\n    handler?: (value: T, injector: Injector) => void | Partial<T>,\n    config?: IMockBuilderConfig,\n  ): void;\n\n  /**\n   * ngMocks.defaultMock sets default customizations of mock declarations and tokens.\n   * It helps to avoid repetitions from test to test.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/defaultMock\n   */\n  defaultMock<T = any>(\n    defs: Array<AnyDeclaration<T>>,\n    handler?: (value: undefined | T, injector: Injector) => undefined | Partial<T>,\n    config?: IMockBuilderConfig,\n  ): void;\n\n  /**\n   * ngMocks.globalExclude configures which declarations, providers and tokens\n   * should be excluded from mocks.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/globalExclude\n   *\n   * ```ts\n   * ngMocks.globalExclude(TranslationModule);\n   * ```\n   */\n  globalExclude(source: AnyDeclaration<any>, recursively?: boolean): void;\n\n  /**\n   * ngMocks.globalKeep configures which declarations, providers and tokens\n   * should not be mocked and will stay as they are in mocks.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/globalKeep\n   *\n   * ```ts\n   * ngMocks.globalKeep(TranslationModule);\n   * ```\n   */\n  globalKeep(source: AnyDeclaration<any>, recursively?: boolean): void;\n\n  /**\n   * ngMocks.globalMock configures which declarations, providers and tokens\n   * should be mocked in kept declarations.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/globalMock\n   *\n   * ```ts\n   * ngMocks.globalMock(TranslationModule);\n   * ```\n   */\n  globalMock(source: AnyDeclaration<any>, recursively?: boolean): void;\n\n  /**\n   * ngMocks.globalReplace configures which declarations, providers and tokens\n   * should be substituted in mocks.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/globalReplace\n   *\n   * ```ts\n   * ngMocks.globalReplace(BrowserAnimationsModule, NoopAnimationsModule);\n   * ```\n   */\n  globalReplace(source: AnyType<any>, destination: AnyType<any>): void;\n\n  /**\n   * ngMocks.globalWipe resets all customizations of ngMocks.global* and mgMocks.default* functions.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/globalWipe\n   *\n   * ```ts\n   * ngMocks.globalWipe(TranslationModule);\n   * ngMocks.globalWipe(BrowserAnimationsModule);\n   * ```\n   */\n  globalWipe(source: AnyDeclaration<any>, recursively?: boolean): void;\n\n  /**\n   * ngMocks.change triggers ControlValueAccessor update.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/change\n   */\n  change(elSelector: DebugNodeSelector, value: any, methodName?: string): void;\n\n  /**\n   * ngMocks.touch triggers ControlValueAccessor touch.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/touch\n   */\n  touch(elSelector: DebugNode | DebugNodeSelector, methodName?: string): void;\n\n  /**\n   * ngMocks.click properly simulates a click on an element.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/click\n   */\n  click(elSelector: HTMLElement | DebugNodeSelector, payload?: Partial<MouseEvent>): void;\n\n  /**\n   * ngMocks.trigger lets trigger custom events on DebugElements.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/trigger\n   *\n   * ```ts\n   * ngMocks.trigger(el, new CustomEvent('my-event'));\n   * ```\n   */\n  trigger(elSelector: DebugNodeSelector, event: Event): void;\n\n  /**\n   * ngMocks.trigger lets trigger custom events on DebugElements.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/trigger\n   *\n   * ```ts\n   * ngMocks.trigger(el, 'click');\n   * ngMocks.trigger(el, 'keydown.control.shift.z');\n   * ```\n   */\n  trigger(\n    elSelector: HTMLElement | DebugNodeSelector,\n    event: string,\n    payload?: Partial<UIEvent | KeyboardEvent | MouseEvent | TouchEvent>,\n  ): void;\n\n  /**\n   * ngMocks.event builds correct event objects.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/event\n   */\n  event(\n    event: string,\n    init?: EventInit,\n    overrides?: Partial<UIEvent | KeyboardEvent | MouseEvent | TouchEvent | Event>,\n  ): Event;\n\n  /**\n   * ngMocks.render renders a templateRef or DebugElement.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/render\n   *\n   * ```ts\n   * ngMocks.header(component, headerEl);\n   * ```\n   */\n  render(\n    instance: object,\n    template: TemplateRef<any> | DebugNode,\n    $implicit?: any,\n    variables?: Record<keyof any, any>,\n  ): void;\n\n  /**\n   * ngMocks.render renders a structural directive.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/render\n   *\n   * ```ts\n   * ngMocks.render(component, directiveInstance);\n   * ```\n   */\n  render(instance: object, directive: object, $implicit?: any, variables?: Record<keyof any, any>): void;\n\n  /**\n   * ngMocks.hide hides a rendered templateRef or DebugElement.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/hide\n   *\n   * ```ts\n   * ngMocks.hide(component, headerEl);\n   * ```\n   */\n  hide(instance: object, tpl?: TemplateRef<any> | DebugNode): void;\n\n  /**\n   * ngMocks.hide hides a rendered structural directive.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/hide\n   *\n   * ```ts\n   * ngMocks.hide(component, directiveInstance);\n   * ```\n   */\n  hide(instance: object, directive: object): void;\n\n  /**\n   * ngMocks.input allows to get an input value without knowing\n   * which component / directive it belongs to.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/input\n   *\n   * ```ts\n   * const input = ngMocks.input('app-component', 'version');\n   * ```\n   */\n  input<T = any>(elSelector: DebugNodeSelector, input: string): T;\n\n  /**\n   * ngMocks.input allows to get an input value without knowing\n   * which component / directive it belongs to, otherwise the notFoundValue.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/input\n   *\n   * ```ts\n   * const input = ngMocks.input('app-component', 'version', undefined);\n   * ```\n   */\n  input<T = any, D = undefined>(elSelector: DebugNodeSelector, input: string, notFoundValue: D): D | T;\n\n  /**\n   * ngMocks.output allows to get an output emitter without knowing\n   * which component / directive it belongs to.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/output\n   *\n   * ```ts\n   * const outputEmitter = ngMocks.output('app-component', 'update');\n   * ```\n   */\n  output<T = any>(elSelector: DebugNodeSelector, output: string): EventEmitter<T>;\n\n  /**\n   * ngMocks.output allows to get an output emitter without knowing\n   * which component / directive it belongs to, otherwise the notFoundValue.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/output\n   *\n   * ```ts\n   * const outputEmitter = ngMocks.output('app-component', 'update', undefined);\n   * ```\n   */\n  output<T = any, D = undefined>(elSelector: DebugNodeSelector, output: string, notFoundValue: D): D | EventEmitter<T>;\n\n  /**\n   * ngMocks.find searches for the DebugElement of a particular component,\n   * and returns the first found.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/find\n   *\n   * ```ts\n   * const el = ngMocks.find(MyComponent);\n   * ```\n   */\n  find<T>(component: Type<T>): MockedDebugElement<T>;\n\n  /**\n   * ngMocks.find searches for the DebugElement of a particular component\n   * starting from an element, and returns the first found.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/find\n   *\n   * ```ts\n   * const el = ngMocks.find(fixture.debugElement, MyComponent);\n   * ```\n   */\n  find<T>(\n    debugElement: MockedDebugElement | ComponentFixture<any> | undefined | null,\n    component: Type<T>,\n  ): MockedDebugElement<T>;\n\n  /**\n   * ngMocks.find searches for the DebugElement of a particular component,\n   * and returns the first found, otherwise the notFoundValue.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/find\n   *\n   * ```ts\n   * const el = ngMocks.find(MyComponent, undefined);\n   * ```\n   */\n  find<T, D>(component: Type<T>, notFoundValue: D): D | MockedDebugElement<T>;\n\n  /**\n   * ngMocks.find searches for the DebugElement of a particular component\n   * starting from an element, and returns the first found, otherwise the notFoundValue.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/find\n   *\n   * ```ts\n   * const el = ngMocks.find(fixture, MyComponent, undefined);\n   * ```\n   */\n  find<T, D>(\n    debugElement: MockedDebugElement | ComponentFixture<any> | undefined | null,\n    component: Type<T>,\n    notFoundValue: D,\n  ): D | MockedDebugElement<T>;\n\n  /**\n   * ngMocks.find searches for the DebugElement based on css selector,\n   * and returns the first found.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/find\n   *\n   * ```ts\n   * const el = ngMocks.find('.header');\n   * const el = ngMocks.find('[data-key=5]');\n   * const el = ngMocks.find(['data-key', 5]);\n   * ```\n   */\n  find<T = any>(cssSelector: string | [string] | [string, string | number]): MockedDebugElement<T>;\n\n  /**\n   * ngMocks.find searches for the DebugElement based on css selector\n   * starting from an element, and returns the first found.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/find\n   *\n   * ```ts\n   * const el = ngMocks.find(fixture.debugElement, '.header');\n   * const el = ngMocks.find(fixture, '[data-key=5]');\n   * const el = ngMocks.find(debugElement, ['data-key', 5]);\n   * ```\n   */\n  find<T = any>(\n    debugElement: MockedDebugElement | ComponentFixture<any> | undefined | null,\n    cssSelector: string | [string] | [string, string | number],\n  ): MockedDebugElement<T>;\n\n  /**\n   * ngMocks.find searches for the DebugElement based on css selector,\n   * and returns the first found, otherwise the notFoundValue.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/find\n   *\n   * ```ts\n   * const el = ngMocks.find('.header', undefined);\n   * const el = ngMocks.find('[data-key=5]', null);\n   * const el = ngMocks.find(['data-key', 5], null);\n   * ```\n   */\n  find<T = any, D = undefined>(\n    cssSelector: string | [string] | [string, string | number],\n    notFoundValue: D,\n  ): D | MockedDebugElement<T>;\n\n  /**\n   * ngMocks.find searches for the DebugElement based on css selector\n   * starting from an element, and returns the first found, otherwise the notFoundValue.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/find\n   *\n   * ```ts\n   * const el = ngMocks.find(fixture.debugElement, '.header', undefined);\n   * const el = ngMocks.find(fixture, '[data-key=5]', null);\n   * const el = ngMocks.find(debugElement, ['data-key', 5], null);\n   * ```\n   */\n  find<T = any, D = undefined>(\n    debugElement: MockedDebugElement | ComponentFixture<any> | undefined | null,\n    cssSelector: string | [string] | [string, string | number],\n    notFoundValue: D,\n  ): D | MockedDebugElement<T>;\n\n  /**\n   * ngMocks.findAll searches for all DebugElements of a particular component,\n   * and returns an array of them.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/findAll\n   *\n   * ```ts\n   * const all = ngMocks.findAll(MyComponent);\n   * ```\n   */\n  findAll<T>(component: Type<T>): Array<MockedDebugElement<T>>;\n\n  /**\n   * ngMocks.findAll searches for all DebugElements of a particular component\n   * starting from an element, and returns an array of them.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/findAll\n   *\n   * ```ts\n   * const all = ngMocks.findAll(fixture.debugElement, MyComponent);\n   * ```\n   */\n  findAll<T>(\n    debugElement: MockedDebugElement | ComponentFixture<any> | undefined | null,\n    component: Type<T>,\n  ): Array<MockedDebugElement<T>>;\n\n  /**\n   * ngMocks.findAll searches for all DebugElements based on css selector,\n   * and returns an array of them.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/findAll\n   *\n   * ```ts\n   * const all = ngMocks.findAll('.header');\n   * const all = ngMocks.findAll('[data-key=5]');\n   * const all = ngMocks.findAll(['data-key', 5]);\n   * ```\n   */\n  findAll<T = any>(cssSelector: string | [string] | [string, string | number]): Array<MockedDebugElement<T>>;\n\n  /**\n   * ngMocks.findAll searches for all DebugElements based on css selector\n   * starting from an element, and returns an array of them.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/findAll\n   *\n   * ```ts\n   * const all = ngMocks.findAll(fixture.debugElement, '.header');\n   * const all = ngMocks.findAll(fixture, '[data-key=5]');\n   * const all = ngMocks.findAll(debugElement, ['data-key', 5]);\n   * ```\n   */\n  findAll<T = any>(\n    debugElement: MockedDebugElement | ComponentFixture<any> | undefined | null,\n    cssSelector: string | [string] | [string, string | number],\n  ): Array<MockedDebugElement<T>>;\n\n  /**\n   * ngMocks.reveal allows finding DebugNodes which belong to ng-container or ng-template.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/reveal\n   *\n   * ```ts\n   * const ngContainer = ngMocks.reveal(HeaderComponent);\n   * ```\n   */\n  reveal<T>(selector: AnyType<T>): MockedDebugNode<T> | MockedDebugElement<T>;\n\n  /**\n   * ngMocks.reveal allows finding DebugNodes which belong to ng-container or ng-template\n   * starting from an element.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/reveal\n   *\n   * ```ts\n   * const ngContainer = ngMocks.reveal('header', HeaderComponent);\n   * ```\n   */\n  reveal<T>(elSelector: DebugNodeSelector, selector: AnyType<T>): MockedDebugNode<T> | MockedDebugElement<T>;\n\n  /**\n   * ngMocks.reveal allows finding DebugNodes which belong to ng-container or ng-template.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/reveal\n   *\n   * ```ts\n   * const ngContainer = ngMocks.reveal(['tpl', 'header']);\n   * ```\n   */\n  reveal<T = any>(selector: string | [string] | [string, any]): MockedDebugNode<T> | MockedDebugElement<T>;\n\n  /**\n   * ngMocks.reveal allows finding DebugNodes which belong to ng-container or ng-template\n   * starting from an element.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/reveal\n   *\n   * ```ts\n   * const ngContainer = ngMocks.reveal('header', ['tpl', 'header']);\n   * ```\n   */\n  reveal<T = any>(\n    elSelector: DebugNodeSelector,\n    selector: string | [string] | [string, any],\n  ): MockedDebugNode<T> | MockedDebugElement<T>;\n\n  /**\n   * ngMocks.reveal allows finding DebugNodes which belong to ng-container or ng-template,\n   * otherwise the notFoundValue.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/reveal\n   *\n   * ```ts\n   * const ngContainer = ngMocks.reveal(HeaderComponent, undefined);\n   * ```\n   */\n  reveal<T, D>(selector: AnyType<T>, notFoundValue: D): D | MockedDebugNode<T> | MockedDebugElement<T>;\n\n  /**\n   * ngMocks.reveal allows finding DebugNodes which belong to ng-container or ng-template\n   * starting from an element, otherwise the notFoundValue.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/reveal\n   *\n   * ```ts\n   * const ngContainer = ngMocks.reveal('sidebar', HeaderComponent, undefined);\n   * ```\n   */\n  reveal<T, D>(\n    elSelector: DebugNodeSelector,\n    selector: AnyType<T>,\n    notFoundValue: D,\n  ): D | MockedDebugNode<T> | MockedDebugElement<T>;\n\n  /**\n   * ngMocks.reveal allows finding DebugNodes which belong to ng-container or ng-template,\n   * otherwise the notFoundValue.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/reveal\n   *\n   * ```ts\n   * const ngContainer = ngMocks.reveal(['tpl', 'header'], undefined);\n   * ```\n   */\n  reveal<T = any, D = undefined>(\n    selector: string | [string] | [string, any],\n    notFoundValue: D,\n  ): D | MockedDebugNode<T> | MockedDebugElement<T>;\n\n  /**\n   * ngMocks.reveal allows finding DebugNodes which belong to ng-container or ng-template\n   * starting from an element, otherwise the notFoundValue.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/reveal\n   *\n   * ```ts\n   * const ngContainer = ngMocks.reveal('sidebar', ['tpl', 'header'], undefined);\n   * ```\n   */\n  reveal<T = any, D = undefined>(\n    elSelector: DebugNodeSelector,\n    selector: string | [string] | [string, any],\n    notFoundValue: D,\n  ): D | MockedDebugNode<T> | MockedDebugElement<T>;\n\n  /**\n   * ngMocks.revealAll allows finding all DebugNodes which belong to ng-container or ng-template.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/revealAll\n   *\n   * ```ts\n   * const ngContainers = ngMocks.revealAll(HeaderComponent);\n   * ```\n   */\n  revealAll<T>(selector: AnyType<T>): Array<MockedDebugNode<T> | MockedDebugElement<T>>;\n\n  /**\n   * ngMocks.reveal allows finding all DebugNodes which belong to ng-container or ng-template.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/revealAll\n   *\n   * ```ts\n   * const ngContainers = ngMocks.revealAll(['tpl', 'header']);\n   * ```\n   */\n  revealAll<T = any>(selector: string | [string] | [string, any]): Array<MockedDebugNode<T> | MockedDebugElement<T>>;\n\n  /**\n   * ngMocks.reveal allows finding all DebugNodes which belong to ng-container or ng-template\n   * starting from an element.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/revealAll\n   *\n   * ```ts\n   * const ngContainers = ngMocks.revealAll('sidebar', HeaderComponent);\n   * ```\n   */\n  revealAll<T>(elSelector: DebugNodeSelector, selector: AnyType<T>): Array<MockedDebugNode<T> | MockedDebugElement<T>>;\n\n  /**\n   * ngMocks.reveal allows finding all DebugNodes which belong to ng-container or ng-template\n   * starting from an element.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/revealAll\n   *\n   * ```ts\n   * const ngContainers = ngMocks.revealAll('sidebar', ['tpl', 'header']);\n   * ```\n   */\n  revealAll<T = any>(\n    elSelector: DebugNodeSelector,\n    selector: string | [string] | [string, any],\n  ): Array<MockedDebugNode<T> | MockedDebugElement<T>>;\n\n  /**\n   * ngMocks.get tries to get an instance of declaration, provider or token\n   * from the element which is matching a selector.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/get\n   *\n   * ```ts\n   * const myComponent = ngMocks.get('my-component', MyComponent);\n   * const myDirective = ngMocks.get('my-component', MyDirective);\n   * ```\n   */\n  get<T>(elSelector: DebugNodeSelector, provider: AnyDeclaration<T>): T;\n\n  /**\n   * ngMocks.get tries to get an instance of declaration, provider or token\n   * from the element which is matching a selector, otherwise the notFoundValue.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/get\n   *\n   * ```ts\n   * const myComponent = ngMocks.get('my-component', MyComponent, undefined);\n   * const myDirective = ngMocks.get('my-component', MyDirective, null);\n   * ```\n   */\n  get<T, D>(elSelector: DebugNodeSelector, provider: AnyDeclaration<T>, notFoundValue: D): D | T;\n\n  /**\n   * ngMocks.get tries to get an instance of provider or token for TestBed.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/get\n   *\n   * ```ts\n   * const myComponent = ngMocks.get(MyComponent);\n   * const myDirective = ngMocks.get(MyDirective);\n   * ```\n   */\n  get<T>(provider: AnyDeclaration<T>): T;\n\n  /**\n   * ngMocks.findInstance searches for an instance of declaration, provider or token,\n   * and returns the first one.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/findInstance\n   *\n   * ```ts\n   * const component = ngMocks.findInstance(SidebarComponent);\n   * const service = ngMocks.findInstance(AuthService);\n   * const config = ngMocks.findInstance(APP_CONFIG);\n   * ```\n   */\n  findInstance<T>(instanceClass: AnyDeclaration<T>): T;\n\n  /**\n   * ngMocks.findInstance searches for an instance of declaration, provider or token\n   * starting from an element, and returns the first one.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/findInstance\n   *\n   * ```ts\n   * const component = ngMocks.findInstance(fixture, SidebarComponent);\n   * const service = ngMocks.findInstance('header', AuthService);\n   * const config = ngMocks.findInstance(debugElement, APP_CONFIG);\n   * ```\n   */\n  findInstance<T>(elSelector: DebugNodeSelector, instanceClass: AnyDeclaration<T>): T;\n\n  /**\n   * ngMocks.findInstance searches for an instance of declaration, provider or token,\n   * and returns the first one, otherwise the notFoundValue.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/findInstance\n   *\n   * ```ts\n   * const component = ngMocks.findInstance(SidebarComponent, undefined);\n   * const service = ngMocks.findInstance(AuthService, null);\n   * const config = ngMocks.findInstance(APP_CONFIG, false);\n   */\n  findInstance<T, D>(instanceClass: AnyDeclaration<T>, notFoundValue: D): D | T;\n\n  /**\n   * ngMocks.findInstance searches for an instance of declaration, provider or token\n   * starting from an element, and returns the first one, otherwise the notFoundValue.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/findInstance\n   *\n   * ```ts\n   * const component = ngMocks.findInstance(fixture, SidebarComponent, undefined);\n   * const service = ngMocks.findInstance('header', AuthService, null);\n   * const config = ngMocks.findInstance(debugElement, APP_CONFIG, false);\n   * ```\n   */\n  findInstance<T, D>(elSelector: DebugNodeSelector, instanceClass: AnyDeclaration<T>, notFoundValue: D): D | T;\n\n  /**\n   * ngMocks.findInstances searches for all instances of declaration, provider or token,\n   * and returns an array of them.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/findInstances\n   *\n   * ```ts\n   * const components = ngMocks.findInstances(SidebarComponent);\n   * const services = ngMocks.findInstances(AuthService);\n   * const configs = ngMocks.findInstances(APP_CONFIG);\n   * ```\n   */\n  findInstances<T>(instanceClass: AnyDeclaration<T>): T[];\n\n  /**\n   * ngMocks.findInstances searches for all instances of declaration, provider or token\n   * starting from an element, and returns an array of them.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/findInstances\n   *\n   * ```ts\n   * const components = ngMocks.findInstances(fixture, SidebarComponent);\n   * const services = ngMocks.findInstances('header', AuthService);\n   * const configs = ngMocks.findInstances(debugElement, APP_CONFIG);\n   * ```\n   */\n  findInstances<T>(elSelector: DebugNodeSelector, instanceClass: AnyDeclaration<T>): T[];\n\n  /**\n   * ngMocks.findTemplateRef searches for a TemplateRef which is matching the selector,\n   * and returns the first found, otherwise the notFoundValue.\n   * The TemplateRef can be rendered later on.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/findTemplateRef\n   *\n   * ```ts\n   * const templateRef = ngMocks.findTemplateRef('sidebar', StructuralDirective, undefined);\n   * ```\n   */\n  findTemplateRef<T = any, D = undefined>(\n    elSelector: DebugNodeSelector,\n    selector: string | [string] | [string, any] | AnyType<any>,\n    notFoundValue: D,\n  ): D | TemplateRef<T>;\n\n  /**\n   * ngMocks.findTemplateRef searches for a TemplateRef which is matching the selector,\n   * and returns the first found.\n   * The TemplateRef can be rendered later on.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/findTemplateRef\n   *\n   * ```ts\n   * const templateRef = ngMocks.findTemplateRef('sidebar', StructuralDirective);\n   * ```\n   */\n  findTemplateRef<T = any>(\n    elSelector: DebugNodeSelector,\n    selector: string | [string] | [string, any] | AnyType<any>,\n  ): TemplateRef<T>;\n\n  /**\n   * ngMocks.findTemplateRef searches for a TemplateRef which is matching the selector,\n   * and returns the first found, otherwise the notFoundValue.\n   * The TemplateRef can be rendered later on.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/findTemplateRef\n   *\n   * ```ts\n   * const templateRef = ngMocks.findTemplateRef(['mat-row'], null);\n   * ```\n   */\n  findTemplateRef<T = any, D = undefined>(\n    selector: string | [string] | [string, any] | AnyType<any>,\n    notFoundValue: D,\n  ): D | TemplateRef<T>;\n\n  /**\n   * ngMocks.findTemplateRef searches for a TemplateRef which is matching the selector,\n   * and returns the first found.\n   * The TemplateRef can be rendered later on.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/findTemplateRef\n   *\n   * ```ts\n   * const templateRef = ngMocks.findTemplateRef(['mat-row']);\n   * ```\n   */\n  findTemplateRef<T = any>(selector: string | [string] | [string, any] | AnyType<any>): TemplateRef<T>;\n\n  /**\n   * ngMocks.findTemplateRefs searches for all TemplateRefs which is matching the selector\n   * starting from an element, and returns an array of them.\n   * The TemplateRef can be rendered later on.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/findTemplateRefs\n   *\n   * ```ts\n   * const templateRefs = ngMocks.findTemplateRefs('header', StructuralDirective);\n   * ```\n   */\n  findTemplateRefs<T = any>(\n    elSelector: DebugNodeSelector,\n    selector: string | [string] | [string, any] | AnyType<any>,\n  ): Array<TemplateRef<T>>;\n\n  /**\n   * ngMocks.findTemplateRefs searches for all TemplateRefs which is matching the selector,\n   * and returns an array of them.\n   * The TemplateRef can be rendered later on.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/findTemplateRefs\n   *\n   * ```ts\n   * const templateRefs = ngMocks.findTemplateRefs(['mat-row']);\n   * ```\n   */\n  findTemplateRefs<T = any>(selector: string | [string] | [string, any] | AnyType<any>): Array<TemplateRef<T>>;\n\n  /**\n   * ngMocks.crawl correctly crawls through Angular DOM with respect of TemplateRefs and ng-containers.\n   * Usually, it's used internally.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/crawl\n   */\n  crawl(\n    elSelector: DebugNodeSelector,\n    callback: (\n      node: MockedDebugNode | MockedDebugElement,\n      parent?: MockedDebugNode | MockedDebugElement,\n    ) => boolean | void,\n    includeTextNodes?: boolean,\n  ): void;\n\n  /**\n   * ngMocks.stub lets replace a method, getter or setter with a dummy callback.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/stub\n   *\n   * ```ts\n   * ngMocks.stub(instance, 'save'); // save is an empty callback now.\n   * ngMocks.stub(instance, 'user', 'get'); // getter is an empty callback now.\n   * ngMocks.stub(instance, 'user', 'set'); // setter is an empty callback now.\n   * ```\n   */\n  stub<T = MockedFunction, I = any>(instance: I, name: keyof I, style?: 'get' | 'set'): T;\n\n  /**\n   * ngMocks.stub lets apply partial customizations to an instance.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/stub\n   *\n   * ```ts\n   * ngMocks.stub(instance, {\n   *   save: () => undefined,\n   *   user: null,\n   * });\n   * ```\n   */\n  stub<I extends object>(instance: I, overrides: Partial<I>): I;\n\n  /**\n   * ngMocks.stubMember lets inject spies it to getters of properties of an instance.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/stubMember\n   *\n   * ```ts\n   * ngMocks.stubMember(instance, 'user', jasmine.createSpy(), 'get')\n   *   .and.returnValue(null);\n   * ```\n   */\n  stubMember<T extends object, K extends keyof T, S extends () => T[K]>(\n    instance: T,\n    name: K,\n    stub: S,\n    encapsulation: 'get',\n  ): S;\n\n  /**\n   * ngMocks.stubMember lets inject spies it to setters of properties of an instance.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/stubMember\n   *\n   * ```ts\n   * ngMocks.stubMember(instance, 'user', jasmine.createSpy(), 'set')\n   *   .and.throwError('setter is forbidden');\n   * ```\n   */\n  stubMember<T extends object, K extends keyof T, S extends (value: T[K]) => void>(\n    instance: T,\n    name: K,\n    stub: S,\n    encapsulation: 'set',\n  ): S;\n\n  /**\n   * ngMocks.stubMember lets inject spies it to an instance.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/stubMember\n   *\n   * ```ts\n   * ngMocks.stubMember(instance, 'save', jasmine.createSpy());\n   * ngMocks.stubMember(instance, 'user', null);\n   * ```\n   */\n  stubMember<T extends object, K extends keyof T, S extends T[K]>(instance: T, name: K, stub: S): S;\n\n  /**\n   * ngMocks.guts provides a simple way to configure complex mocks.\n   * Please check documentation.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/guts\n   */\n  guts(\n    keep: AnyDeclaration<any> | Provider | Array<AnyDeclaration<any> | Provider> | null | undefined,\n    mock?:\n      | AnyDeclaration<any>\n      | NgModuleWithProviders\n      | Provider\n      | Array<AnyDeclaration<any> | NgModuleWithProviders | Provider>\n      | null\n      | undefined,\n    exclude?: AnyDeclaration<any> | Array<AnyDeclaration<any>> | null | undefined,\n  ): TestModuleMetadata;\n\n  /**\n   * ngMocks.faster lets reuse the same TestBed between tests instead of resetting it.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/faster\n   */\n  faster(): void;\n\n  /**\n   * ignoreOnConsole suppresses any log calls, other methods can be suppressed too.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/ignoreOnConsole\n   */\n  ignoreOnConsole(...args: Array<keyof typeof console>): void;\n\n  /**\n   * Thanks Ivy, it does not throw an error, and we have to use injector.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/throwOnConsole\n   */\n  throwOnConsole(...args: Array<keyof typeof console>): void;\n\n  /**\n   * ngMocks.formatHtml normalizes html for a DebugElement, fixture or html string.\n   * It removes redundant spaces, comments etc.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/formatHtml\n   *\n   * ```ts\n   * const html = ngMocks.formatHTML(fixture);\n   * const html = ngMocks.formatHTML(debugElement);\n   * const html = ngMocks.formatHTML('<div>   </div>');\n   * ```\n   */\n  formatHtml(html: FORMAT_SINGLE, outer?: boolean): string;\n\n  /**\n   * ngMocks.formatHtml normalizes html for an array of DebugElements, fixtures or html strings.\n   * It removes redundant spaces, comments etc.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/formatHtml\n   *\n   * const [html1, html2] = ngMocks.formatHTML([fixture1, fixture2]);\n   * const htmlStrings = ngMocks.formatHTML(debugElements);\n   */\n  formatHtml(html: FORMAT_SET, outer?: boolean): string[];\n\n  /**\n   * ngMocks.formatText normalizes text for a DebugElement, fixture or html string.\n   * It removes tags, redundant spaces, comments etc.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/formatText\n   *\n   * ```ts\n   * const txt = ngMocks.formatText(fixture);\n   * const txt = ngMocks.formatText(debugElement);\n   * const txt = ngMocks.formatText('<div>   </div>');\n   * ```\n   */\n  formatText(text: FORMAT_SINGLE, outer?: boolean): string;\n\n  /**\n   * ngMocks.formatText normalizes text for an array of DebugElements, fixtures or html strings.\n   * It removes tags, redundant spaces, comments etc.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/formatText\n   *\n   * const [txt1, txt2] = ngMocks.formatText([fixture1, fixture2]);\n   * const txtStrings = ngMocks.formatText(debugElements);\n   */\n  formatText(text: FORMAT_SET, outer?: boolean): string[];\n\n  /**\n   * ngMocks.flushTestBed resets TestBed.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/flushTestBed\n   */\n  flushTestBed(): void;\n\n  /**\n   * ngMocks.reset resets cache of ng-mocks.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/reset\n   */\n  reset(): void;\n\n  /**\n   * ngMocks.config lets customize default behavior of error reporting.\n   */\n  config(config: {\n    mockRenderCacheSize?: number | null;\n    onMockBuilderMissingDependency?: 'throw' | 'warn' | 'i-know-but-disable' | null;\n    onMockInstanceRestoreNeed?: 'throw' | 'warn' | 'i-know-but-disable' | null;\n    onTestBedFlushNeed?: 'throw' | 'warn' | 'i-know-but-disable' | null;\n  }): void;\n} = mockHelperObject;\n","import { QueryList, TemplateRef, ViewContainerRef } from '@angular/core';\n\nimport funcIsMock from '../../common/func.is-mock';\nimport { MockConfig } from '../../common/mock';\n\nconst getValVcr = (entryPoint: MockConfig): Array<[any, ViewContainerRef]> => {\n  const result: Array<[any, ViewContainerRef]> = [];\n\n  for (const key of entryPoint.__ngMocksConfig.queryScanKeys || /* istanbul ignore next */ []) {\n    const value = (entryPoint as any)[key];\n    const vcr = (entryPoint as any)[`__ngMocksVcr_${key}`];\n\n    const scanValue = value instanceof QueryList ? value.toArray() : [value];\n    const scanVcr = vcr instanceof QueryList ? vcr.toArray() : [vcr];\n\n    for (let index = 0; index < scanValue.length; index += 1) {\n      result.push([scanValue[index], scanVcr[index]]);\n    }\n  }\n\n  return result;\n};\n\nconst handleDirective = (\n  entryPoint: {\n    __template?: TemplateRef<any>;\n    __vcr?: ViewContainerRef;\n  },\n  isExpectedTemplate: (tpl: TemplateRef<any>) => boolean,\n  callback: (vcr: ViewContainerRef, tpl: TemplateRef<any>) => boolean,\n): boolean => {\n  return (\n    !!entryPoint.__template &&\n    !!entryPoint.__vcr &&\n    isExpectedTemplate(entryPoint.__template) &&\n    callback(entryPoint.__vcr, entryPoint.__template)\n  );\n};\n\nconst isRightTemplate = (\n  localVcr: ViewContainerRef | undefined,\n  localValue: any,\n  isExpectedTemplate: (tpl: TemplateRef<any>) => boolean,\n): boolean => {\n  return !!localVcr && localValue instanceof TemplateRef && isExpectedTemplate(localValue);\n};\n\nconst findDeep = (\n  entryPoint: object,\n  isExpectedTemplate: (tpl: TemplateRef<any>) => boolean,\n  callback: (vcr: ViewContainerRef, tpl: TemplateRef<any>) => boolean,\n): boolean => {\n  if (!funcIsMock(entryPoint)) {\n    throw new Error('Only instances of mock declarations are accepted');\n  }\n\n  // structural directive\n  if (handleDirective(entryPoint, isExpectedTemplate, callback)) {\n    return true;\n  }\n\n  for (const [localValue, localVcr] of getValVcr(entryPoint)) {\n    if (funcIsMock(localValue) && findDeep(localValue, isExpectedTemplate, callback)) {\n      return true;\n    }\n    if (isRightTemplate(localVcr, localValue, isExpectedTemplate)) {\n      return callback(localVcr, localValue);\n    }\n  }\n\n  return false;\n};\n\nexport default ((): typeof findDeep => findDeep)();\n","import { TemplateRef } from '@angular/core';\n\nimport coreInjector from '../../common/core.injector';\nimport funcIsMock from '../../common/func.is-mock';\n\nexport default (param: any): TemplateRef<any> => {\n  if (param instanceof TemplateRef) {\n    return param;\n  }\n  if (funcIsMock(param) && param.__template) {\n    return param.__template;\n  }\n\n  const injector = param?.nativeNode && param.injector;\n  if (injector) {\n    const template = coreInjector(TemplateRef, injector);\n\n    if (template) {\n      return template;\n    }\n  }\n\n  const error = new Error(\n    'Unknown template has been passed, only TemplateRef or a mock structural directive are supported',\n  );\n  (error as any).param = param;\n\n  throw error;\n};\n","import funcFindDeep from './func.find-deep';\nimport funcParseTemplate from './func.parse-template';\n\nexport default (instance: object, param?: object) => {\n  const template = param ? funcParseTemplate(param) : undefined;\n\n  let result = false;\n  funcFindDeep(\n    instance,\n    tpl => {\n      if (!template) {\n        return true;\n      }\n\n      return tpl.elementRef.nativeElement === template.elementRef.nativeElement;\n    },\n    vcr => {\n      vcr.clear();\n      result = true;\n\n      return false;\n    },\n  );\n\n  if (!result) {\n    throw new Error('Cannot find path to the TemplateRef');\n  }\n};\n","import funcFindDeep from './func.find-deep';\nimport funcParseTemplate from './func.parse-template';\n\nexport default (instance: object, param: object, $implicit?: any, variables?: Record<keyof any, any>) => {\n  const template = funcParseTemplate(param);\n\n  const result = funcFindDeep(\n    instance,\n    tpl => tpl.elementRef.nativeElement === template.elementRef.nativeElement,\n    (vcr, tpl) => {\n      const context = {\n        ...variables,\n        $implicit,\n      };\n      vcr.clear();\n      vcr.createEmbeddedView(tpl, context).detectChanges();\n\n      return true;\n    },\n  );\n\n  if (!result) {\n    throw new Error('Cannot find path to the TemplateRef');\n  }\n};\n","import { Type } from '../../common/core.types';\nimport crawlByAttribute from '../crawl/crawl-by-attribute';\nimport crawlByAttributeValue from '../crawl/crawl-by-attribute-value';\nimport crawlByDeclaration from '../crawl/crawl-by-declaration';\nimport crawlById from '../crawl/crawl-by-id';\n\nexport default (selector: string | Type<any> | [string] | [string, any] | any) => {\n  if (typeof selector === 'string') {\n    return crawlById(selector);\n  }\n  if (Array.isArray(selector) && selector.length === 1 && typeof selector[0] === 'string') {\n    return crawlByAttribute(selector[0]);\n  }\n  if (Array.isArray(selector) && selector.length === 2 && typeof selector[0] === 'string') {\n    return crawlByAttributeValue(selector[0], selector[1]);\n  }\n  if (typeof selector === 'function') {\n    return crawlByDeclaration(selector);\n  }\n\n  throw new Error('Unknown selector');\n};\n","import { TemplateRef } from '@angular/core';\n\nimport coreInjector from '../../common/core.injector';\nimport { MockedDebugNode } from '../../mock-render/types';\nimport detectTextNode from '../crawl/detect-text-node';\n\nexport default (\n    result: Array<TemplateRef<any>>,\n    detector: (node: MockedDebugNode) => boolean,\n    limit = 0,\n  ): ((node: MockedDebugNode) => boolean) =>\n  node => {\n    try {\n      const instance = !detectTextNode(node) && detector(node) ? coreInjector(TemplateRef, node.injector) : undefined;\n      if (instance) {\n        result.push(instance);\n      }\n    } catch {\n      // nothing to do\n    }\n\n    return !!limit && result.length === limit;\n  };\n","export default (value: any): boolean => {\n  if (typeof value === 'string') {\n    return true;\n  }\n  if (Array.isArray(value) && typeof value[0] === 'string') {\n    return true;\n  }\n  if (typeof value === 'function') {\n    return true;\n  }\n\n  return false;\n};\n","import { TemplateRef } from '@angular/core';\n\nimport nestedCheck from '../crawl/nested-check';\nimport mockHelperFind from '../find/mock-helper.find';\nimport funcGetLastFixture from '../func.get-last-fixture';\nimport funcParseFindArgs from '../func.parse-find-args';\nimport funcParseFindArgsName from '../func.parse-find-args-name';\n\nimport detectCrawler from './detect-crawler';\nimport detectTemplateRef from './detect-template-ref';\nimport funcIsValidTemplateRefSelector from './func.is-valid-template-ref-selector';\n\nconst defaultNotFoundValue = {}; // simulating Symbol\n\nexport default (...args: any[]) => {\n  const [el, sel, notFoundValue] = funcParseFindArgs(args, funcIsValidTemplateRefSelector, defaultNotFoundValue);\n\n  const result: Array<TemplateRef<any>> = [];\n  const detector = detectCrawler(sel);\n  nestedCheck(mockHelperFind(funcGetLastFixture(), el, undefined), undefined, detectTemplateRef(result, detector, 1));\n  if (result.length > 0) {\n    return result[0];\n  }\n  if (notFoundValue !== defaultNotFoundValue) {\n    return notFoundValue;\n  }\n\n  throw new Error(`Cannot find a TemplateRef via ngMocks.findTemplateRef(${funcParseFindArgsName(sel)})`);\n};\n","import { TemplateRef } from '@angular/core';\n\nimport nestedCheck from '../crawl/nested-check';\nimport mockHelperFind from '../find/mock-helper.find';\nimport funcGetLastFixture from '../func.get-last-fixture';\nimport funcParseFindArgs from '../func.parse-find-args';\n\nimport detectCrawler from './detect-crawler';\nimport detectTemplateRef from './detect-template-ref';\nimport funcIsValidTemplateRefSelector from './func.is-valid-template-ref-selector';\n\nexport default (...args: any[]): Array<TemplateRef<any>> => {\n  const [el, sel] = funcParseFindArgs(args, funcIsValidTemplateRefSelector);\n\n  const result: Array<TemplateRef<any>> = [];\n  const detector = detectCrawler(sel);\n  nestedCheck(mockHelperFind(funcGetLastFixture(), el, undefined), undefined, detectTemplateRef(result, detector));\n\n  return result;\n};\n","import ngMocksUniverse from '../common/ng-mocks-universe';\nimport mockHelperStubMember from '../mock-helper/mock-helper.stub-member';\n\nexport default (def: any): any[] => {\n  const callbacks = [];\n\n  const config = ngMocksUniverse.configInstance.get(def);\n  if (config?.overloads) {\n    for (const [name, stub, encapsulation] of config.overloads) {\n      if (name) {\n        callbacks.push((instance: any) => {\n          mockHelperStubMember(instance, name, stub, encapsulation);\n        });\n      } else {\n        callbacks.push(stub);\n      }\n    }\n  }\n\n  return callbacks;\n};\n","import funcGetName from '../common/func.get-name';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nexport default (checkReset: Array<[any, any, any?]>) => {\n  const showError: string[] = [];\n\n  // istanbul ignore next: because of the installed global scope switcher we cannot test this part\n  while (checkReset.length > 0) {\n    const [declaration, config] = checkReset.pop() || /* istanbul ignore next */ [];\n    if (config === ngMocksUniverse.configInstance.get(declaration)) {\n      showError.push(typeof declaration === 'function' ? funcGetName(declaration) : declaration);\n    }\n  }\n\n  // istanbul ignore if: because of the installed global scope switcher we cannot test this part\n  if (showError.length > 0) {\n    const globalFlags = ngMocksUniverse.global.get('flags');\n    const errorMessage = [\n      `MockInstance: side effects have been detected (${showError.join(', ')}).`,\n      'Forgot to add MockInstance.scope() or to call MockInstance.restore()?',\n    ].join(' ');\n    if (globalFlags.onMockInstanceRestoreNeed === 'warn') {\n      console.warn(errorMessage);\n    } else if (globalFlags.onMockInstanceRestoreNeed === 'throw') {\n      throw new Error(errorMessage);\n    }\n  }\n};\n","import { InjectionToken, Injector } from '@angular/core';\n\nimport { AnyDeclaration, AnyType } from '../common/core.types';\nimport funcImportExists from '../common/func.import-exists';\nimport ngMocksStack, { NgMocksStack } from '../common/ng-mocks-stack';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nimport mockInstanceForgotReset from './mock-instance-forgot-reset';\n\nlet currentStack: NgMocksStack;\nngMocksStack.subscribePush(state => {\n  currentStack = state;\n});\nngMocksStack.subscribePop((state, stack) => {\n  for (const declaration of state.mockInstance || /* istanbul ignore next */ []) {\n    if (ngMocksUniverse.configInstance.has(declaration)) {\n      const universeConfig = ngMocksUniverse.configInstance.get(declaration);\n      universeConfig.overloads.pop();\n      ngMocksUniverse.configInstance.set(declaration, {\n        ...universeConfig,\n      });\n    }\n  }\n  currentStack = stack[stack.length - 1];\n});\n\ninterface MockInstanceArgs {\n  accessor?: 'get' | 'set';\n  data?: any;\n  key?: string;\n  value?: any;\n}\n\nconst parseMockInstanceArgs = (args: any[]): MockInstanceArgs => {\n  const set: MockInstanceArgs = {};\n\n  if (typeof args[0] === 'string') {\n    set.key = args[0];\n    set.value = args[1];\n    set.accessor = args[2];\n  } else {\n    set.value = args[0];\n    if (set.value && typeof set.value === 'object') {\n      set.value = set.value.init;\n    }\n  }\n\n  return set;\n};\n\nconst checkReset: Array<[any, any, any?]> = [];\nlet checkCollect = false;\n\n// istanbul ignore else: maybe a different runner is used\nif (typeof beforeEach !== 'undefined') {\n  beforeEach(() => (checkCollect = true));\n  beforeEach(() => mockInstanceForgotReset(checkReset));\n  afterEach(() => (checkCollect = false));\n}\n\nconst mockInstanceConfig = <T>(\n  declaration: AnyDeclaration<T>,\n  name: string | undefined,\n  stub: any,\n  encapsulation?: 'get' | 'set',\n) => {\n  const config = ngMocksUniverse.configInstance.has(declaration) ? ngMocksUniverse.configInstance.get(declaration) : {};\n  const overloads = config.overloads || [];\n  overloads.push([name, stub, encapsulation]);\n  config.overloads = overloads;\n  ngMocksUniverse.configInstance.set(declaration, {\n    ...config,\n  });\n  const mockInstances = currentStack.mockInstance ?? [];\n  mockInstances.push(declaration);\n  currentStack.mockInstance = mockInstances;\n\n  if (checkCollect) {\n    checkReset.push([declaration, ngMocksUniverse.configInstance.get(declaration), currentStack]);\n  }\n\n  return stub;\n};\n\n/**\n * This signature of MockInstance lets customize the getter of a property.\n *\n * @see https://ng-mocks.sudo.eu/api/MockInstance\n *\n * ```ts\n * MockInstance(ArbitraryComponent, 'currentUser$', () => mockUser$, 'get');\n * MockInstance(ArbitraryService, 'enabled', () => false, 'get');\n * ```\n */\nexport function MockInstance<T extends object, K extends keyof T, S extends () => T[K]>(\n  instance: AnyType<T>,\n  name: K,\n  stub: S,\n  encapsulation: 'get',\n): S;\n\n/**\n * This signature of MockInstance lets customize the setters of a property.\n *\n * @see https://ng-mocks.sudo.eu/api/MockInstance\n *\n * ```ts\n * const currentUserSetterSpy = jasmine.createSpy();\n * MockInstance(ArbitraryComponent, 'currentUser', currentUserSetterSpy, 'set');\n *\n * let relServiceEnabled: boolean;\n * MockInstance(ArbitraryService, 'enabled', value => relServiceEnabled = value, 'set');\n * ```\n */\nexport function MockInstance<T extends object, K extends keyof T, S extends (value: T[K]) => void>(\n  instance: AnyType<T>,\n  name: K,\n  stub: S,\n  encapsulation: 'set',\n): S;\n\n/**\n * This signature of MockInstance lets customize the properties and methods.\n *\n * @see https://ng-mocks.sudo.eu/api/MockInstance\n *\n * ```ts\n * MockInstance(ArbitraryComponent, 'onInit', onInitSpy);\n * MockInstance(ArbitraryDirective, 'onDestroy', () => {});\n * MockInstance(ArbitraryService, 'currentDate', new Date());\n * MockInstance(ArbitraryModule, 'currentUser', mockUser);\n * ```\n */\nexport function MockInstance<T extends object, K extends keyof T, S extends T[K]>(\n  instance: AnyType<T>,\n  name: K,\n  stub: S,\n): S;\n\n/**\n * This signature of MockInstance lets customize tokens with a callback.\n *\n * @see https://ng-mocks.sudo.eu/api/MockInstance\n *\n * ```ts\n * MockInstance(webSocketToken, () => mockWebSocket);\n * ```\n */\nexport function MockInstance<T>(\n  declaration: InjectionToken<T>,\n  init?: (instance: T | undefined, injector: Injector | undefined) => Partial<T>,\n): void;\n\n/**\n * This signature of MockInstance lets customize tokens with a callback.\n *\n * @deprecated please pass the callback directly instead of config.\n * @see https://ng-mocks.sudo.eu/api/MockInstance\n *\n * ```ts\n * MockInstance(webSocketToken, {\n *   init: () => mockWebSocket,\n * });\n * ```\n */\nexport function MockInstance<T>(\n  declaration: InjectionToken<T>,\n  config?: {\n    init?: (instance: T | undefined, injector: Injector | undefined) => Partial<T>;\n  },\n): void;\n\n/**\n * This signature of MockInstance lets customize the instances of mock classes with a callback.\n * You can return a shape or change the instance.\n *\n * @see https://ng-mocks.sudo.eu/api/MockInstance\n *\n * ```ts\n * MockInstance(ArbitraryComponent, (instance, injector) => {\n *   instance.enabled = true;\n *   instance.db = injector.get(DatabaseService);\n * });\n * MockInstance(ArbitraryDirective, () => {\n *   return {\n *     someProperty: true,\n *   };\n * });\n * ```\n */\nexport function MockInstance<T>(\n  declaration: AnyType<T>,\n  init?: (instance: T, injector: Injector | undefined) => void | Partial<T>,\n): void;\n\n/**\n * This signature of MockInstance lets customize the instances of mock classes with a callback.\n * You can return a shape or change the instance.\n *\n * @deprecated please pass the callback directly instead of config.\n * @see https://ng-mocks.sudo.eu/api/MockInstance\n *\n * ```ts\n * MockInstance(ArbitraryComponent, {\n *   init: (instance, injector) => {\n *     instance.enabled = true;\n *     instance.db = injector.get(DatabaseService);\n *   },\n * });\n * MockInstance(ArbitraryDirective, {\n *   init: () => {\n *     return {\n *       someProperty: true,\n *     };\n *   },\n * });\n * ```\n */\nexport function MockInstance<T>(\n  declaration: AnyType<T>,\n  config?: {\n    init?: (instance: T, injector: Injector | undefined) => void | Partial<T>;\n  },\n): void;\n\nexport function MockInstance<T>(declaration: AnyDeclaration<T>, ...args: any[]) {\n  funcImportExists(declaration, 'MockInstance');\n\n  if (args.length > 0) {\n    const { key, value, accessor } = parseMockInstanceArgs(args);\n\n    return mockInstanceConfig(declaration, key, value, accessor);\n  }\n\n  const config = ngMocksUniverse.configInstance.get(declaration) || /* istanbul ignore next */ {};\n\n  ngMocksUniverse.configInstance.set(declaration, {\n    ...config,\n    overloads: [],\n  });\n\n  // When we are calling MockInstance without a config we need to reset it from the checks too.\n  for (let i = checkReset.length - 1; i >= 0; i -= 1) {\n    if (checkReset[i][0] === declaration && checkReset[i][2] === currentStack) {\n      checkReset.splice(i, 1);\n    }\n  }\n}\n\n/**\n * Interface describes how to configure scopes for MockInstance.\n *\n * @see https://ng-mocks.sudo.eu/api/MockInstance#customization-scopes\n */\n// istanbul ignore next: issue in istanbul https://github.com/istanbuljs/nyc/issues/1209\nexport namespace MockInstance {\n  /**\n   * Creates a scope which remembers all future customizations of MockInstance.\n   * It allows to reset them afterwards.\n   *\n   * @see https://ng-mocks.sudo.eu/api/MockInstance#remember\n   */\n  export function remember() {\n    ngMocksStack.stackPush();\n  }\n\n  /**\n   * Resets all changes in the current scope.\n   *\n   * @see https://ng-mocks.sudo.eu/api/MockInstance#restore\n   */\n  export function restore() {\n    ngMocksStack.stackPop();\n  }\n\n  /**\n   * Creates a local scope in `beforeEach` and `afterEach`.\n   * If `suite` has been passed, then `beforeAll` and `afterAll` are used.\n   *\n   * @see https://ng-mocks.sudo.eu/api/MockInstance#scope\n   */\n  export function scope(scope: 'all' | 'suite' | 'case' = 'case') {\n    if (scope === 'all' || scope === 'suite') {\n      beforeAll(MockInstance.remember);\n      afterAll(MockInstance.restore);\n    }\n    if (scope === 'all' || scope === 'case') {\n      beforeEach(MockInstance.remember);\n      afterEach(MockInstance.restore);\n    }\n  }\n}\n\n/**\n * MockReset resets everything what has been configured in MockInstance.\n * Please consider using MockInstance.scope() instead,\n * which respects customizations between tests.\n *\n * https://ng-mocks.sudo.eu/api/MockInstance#resetting-customization\n * https://ng-mocks.sudo.eu/api/MockInstance#scope\n */\nexport function MockReset() {\n  ngMocksUniverse.configInstance.clear();\n}\n","import { Provider } from '@angular/core';\n\nimport CoreDefStack from '../common/core.def-stack';\nimport funcGetType from '../common/func.get-type';\nimport { isNgDef } from '../common/func.is-ng-def';\nimport { isNgModuleDefWithProviders } from '../common/func.is-ng-module-def-with-providers';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\nimport { MockComponent } from '../mock-component/mock-component';\nimport { MockDirective } from '../mock-directive/mock-directive';\nimport { MockPipe } from '../mock-pipe/mock-pipe';\nimport helperMockService from '../mock-service/helper.mock-service';\n\nimport { MockModule } from './mock-module';\n\nconst processDefMap: Array<[any, any]> = [\n  ['c', MockComponent],\n  ['d', MockDirective],\n  ['p', MockPipe],\n];\n\nconst processDef = (def: any) => {\n  if (isNgDef(def, 'm') || isNgModuleDefWithProviders(def)) {\n    return MockModule(def as any);\n  }\n  if (ngMocksUniverse.hasBuildDeclaration(def)) {\n    return ngMocksUniverse.getBuildDeclaration(def);\n  }\n  if (ngMocksUniverse.flags.has('skipMock') && ngMocksUniverse.getResolution(def) !== 'mock') {\n    return def;\n  }\n  for (const [flag, func] of processDefMap) {\n    if (isNgDef(def, flag)) {\n      return func(def);\n    }\n  }\n};\n\n// resolveProvider is a special case because of the def structure.\nconst createResolveProvider =\n  (resolutions: CoreDefStack<any, any>, change: () => void): ((def: Provider) => any) =>\n  (def: Provider) =>\n    helperMockService.resolveProvider(def, resolutions, change);\n\nconst createResolveWithProviders = (def: any, mockDef: any): boolean =>\n  isNgModuleDefWithProviders(mockDef) && isNgModuleDefWithProviders(def);\n\nconst createResolveExisting = (\n  def: any,\n  resolutions: CoreDefStack<any, any>,\n  change: (flag?: boolean) => void,\n): any => {\n  const mockDef = resolutions.get(def);\n  if (def !== mockDef) {\n    change();\n  }\n\n  return mockDef;\n};\n\nconst createResolveExcluded = (\n  def: any,\n  resolutions: CoreDefStack<any, any>,\n  change: (flag?: boolean) => void,\n): void => {\n  resolutions.set(def, undefined);\n\n  change();\n};\n\nconst createResolve =\n  (resolutions: CoreDefStack<any, any>, change: (flag?: boolean) => void): ((def: any) => any) =>\n  (def: any) => {\n    if (resolutions.has(def)) {\n      return createResolveExisting(def, resolutions, change);\n    }\n\n    const detectedDef = funcGetType(def);\n    if (ngMocksUniverse.isExcludedDef(detectedDef)) {\n      return createResolveExcluded(def, resolutions, change);\n    }\n    ngMocksUniverse.touches.add(detectedDef);\n\n    const mockDef = processDef(def);\n    if (createResolveWithProviders(def, mockDef)) {\n      resolutions.set(def.ngModule, mockDef.ngModule);\n    }\n    if (ngMocksUniverse.flags.has('skipMock')) {\n      ngMocksUniverse.config.get('ngMocksDepsSkip')?.add(mockDef);\n    }\n    resolutions.set(def, mockDef);\n    change(mockDef !== def);\n\n    return mockDef;\n  };\n\nexport default (\n  change: () => void,\n  resolutions: CoreDefStack<any, any>,\n): {\n  resolve: (def: any) => any;\n  resolveProvider: (def: Provider) => any;\n} => {\n  const resolve = createResolve(resolutions, change);\n  const resolveProvider = createResolveProvider(resolutions, change);\n\n  return {\n    resolve,\n    resolveProvider,\n  };\n};\n","import { flatten } from '../common/core.helpers';\nimport funcGetType from '../common/func.get-type';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nexport default (providers?: any[]): void => {\n  for (const provider of flatten(providers ?? [])) {\n    const provide = funcGetType(provider);\n\n    const config = ngMocksUniverse.configInstance.get(provide) ?? {};\n    if (!config.exported) {\n      config.exported = true;\n    }\n    ngMocksUniverse.configInstance.set(provide, config);\n  }\n};\n","import { NgModule } from '@angular/core';\n\nimport coreConfig from '../common/core.config';\nimport coreDefineProperty from '../common/core.define-property';\nimport { extendClass } from '../common/core.helpers';\nimport coreReflectModuleResolve from '../common/core.reflect.module-resolve';\nimport { AnyType, Type } from '../common/core.types';\nimport decorateMock from '../common/decorate.mock';\nimport funcGetName from '../common/func.get-name';\nimport funcImportExists from '../common/func.import-exists';\nimport { isMockNgDef } from '../common/func.is-mock-ng-def';\nimport { isNgDef } from '../common/func.is-ng-def';\nimport { isNgModuleDefWithProviders, NgModuleWithProviders } from '../common/func.is-ng-module-def-with-providers';\nimport { Mock } from '../common/mock';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\nimport returnCachedMock from '../mock/return-cached-mock';\n\nimport mockNgDef from './mock-ng-def';\n\nconst flagMock = (resolution?: string): boolean => resolution === 'mock' && ngMocksUniverse.flags.has('skipMock');\n\nconst flagKeep = (resolution?: string): boolean => resolution === 'keep' && !ngMocksUniverse.flags.has('skipMock');\n\nconst flagReplace = (resolution?: string): boolean =>\n  resolution === 'replace' && !ngMocksUniverse.flags.has('skipMock');\n\nconst flagNever = (ngModule?: any): boolean =>\n  coreConfig.neverMockModule.indexOf(funcGetName(ngModule)) !== -1 && !ngMocksUniverse.flags.has('skipMock');\n\nconst preProcessFlags = (ngModule: AnyType<any>): { isRootModule: boolean; toggleSkipMockFlag: boolean } => {\n  let toggleSkipMockFlag = false;\n  let isRootModule = true;\n\n  if (ngMocksUniverse.flags.has('hasRootModule')) {\n    isRootModule = false;\n  } else {\n    ngMocksUniverse.flags.add('hasRootModule');\n  }\n\n  const resolution = ngMocksUniverse.getResolution(ngModule);\n  if (flagMock(resolution)) {\n    toggleSkipMockFlag = true;\n    ngMocksUniverse.flags.delete('skipMock');\n  }\n  if (flagNever(ngModule)) {\n    toggleSkipMockFlag = true;\n    ngMocksUniverse.flags.add('skipMock');\n  }\n  if (!isRootModule && (flagKeep(resolution) || flagReplace(resolution))) {\n    toggleSkipMockFlag = true;\n    ngMocksUniverse.flags.add('skipMock');\n  }\n\n  return {\n    isRootModule,\n    toggleSkipMockFlag,\n  };\n};\n\nconst postProcessFlags = ({\n  isRootModule,\n  toggleSkipMockFlag,\n}: {\n  isRootModule: boolean;\n  toggleSkipMockFlag: boolean;\n}): void => {\n  if (toggleSkipMockFlag && ngMocksUniverse.flags.has('skipMock')) {\n    ngMocksUniverse.flags.delete('skipMock');\n  } else if (toggleSkipMockFlag && !ngMocksUniverse.flags.has('skipMock')) {\n    ngMocksUniverse.flags.add('skipMock');\n  }\n  if (isRootModule) {\n    ngMocksUniverse.flags.delete('hasRootModule');\n  }\n};\n\nconst extractModuleAndProviders = (\n  module: any,\n): {\n  ngModule: Type<any>;\n  ngModuleProviders: NgModule['providers'];\n} => {\n  let ngModule: Type<any>;\n  let ngModuleProviders: NgModule['providers'];\n\n  if (isNgModuleDefWithProviders(module)) {\n    ngModule = module.ngModule;\n    if (module.providers) {\n      ngModuleProviders = module.providers;\n    }\n  } else {\n    ngModule = module;\n  }\n\n  return {\n    ngModule,\n    ngModuleProviders,\n  };\n};\n\nconst getExistingMockModule = (ngModule: Type<any>, isRootModule: boolean): Type<any> | undefined => {\n  if (isMockNgDef(ngModule, 'm')) {\n    return ngModule;\n  }\n\n  // Every module should be replaced with its mock copy only once to avoid errors like:\n  // Failed: Type ...Component is part of the declarations of 2 modules: ...Module and ...Module...\n  if (ngMocksUniverse.flags.has('cacheModule') && ngMocksUniverse.cacheDeclarations.has(ngModule)) {\n    return returnCachedMock(ngModule);\n  }\n\n  // Now we check if we need to keep the original module or to replace it with some other.\n  // and there is no override in its resolution.\n  if (isRootModule || ngMocksUniverse.config.get('ngMocksDepsResolution')?.get(ngModule) === 'mock') {\n    return undefined;\n  }\n  if (ngMocksUniverse.hasBuildDeclaration(ngModule)) {\n    const instance = ngMocksUniverse.getBuildDeclaration(ngModule);\n    if (isNgDef(instance, 'm') && instance !== ngModule) {\n      return instance;\n    }\n  }\n\n  return undefined;\n};\n\nconst detectMockModule = (ngModule: Type<any>, mockModule?: Type<any>): Type<any> => {\n  const [changed, ngModuleDef, resolutions] = mockModule\n    ? [false]\n    : mockNgDef(coreReflectModuleResolve(ngModule), ngModule);\n  if (resolutions) {\n    coreDefineProperty(ngModule, '__ngMocksResolutions', resolutions);\n  }\n\n  if (changed) {\n    const parent = ngMocksUniverse.flags.has('skipMock') ? ngModule : Mock;\n    const mock = extendClass(parent);\n\n    // the last thing is to apply decorators.\n    NgModule(ngModuleDef)(mock);\n    decorateMock(mock, ngModule);\n\n    return mock;\n  }\n\n  return mockModule || ngModule;\n};\n\nconst getMockProviders = (ngModuleProviders: NgModule['providers']): NgModule['providers'] => {\n  if (ngModuleProviders) {\n    const [changed, ngModuleDef] = mockNgDef({ providers: ngModuleProviders, skipExports: true });\n\n    return changed ? ngModuleDef.providers : ngModuleProviders;\n  }\n\n  return undefined;\n};\n\nconst generateReturn = (\n  module: any,\n  ngModule: AnyType<any>,\n  ngModuleProviders: NgModule['providers'],\n  mockModule: AnyType<any>,\n  mockModuleProviders: NgModule['providers'],\n): any =>\n  mockModule === ngModule && mockModuleProviders === ngModuleProviders\n    ? module\n    : isNgModuleDefWithProviders(module)\n    ? { ngModule: mockModule, ...(mockModuleProviders ? { providers: mockModuleProviders } : {}) }\n    : mockModule;\n\n/**\n * MockModule creates a mock module class out of an arbitrary module.\n * All declarations, imports, exports and providers will be mocked too.\n *\n * @see https://ng-mocks.sudo.eu/api/MockModule\n *\n * ```ts\n * TestBed.configureTestingModule({\n *   imports: [\n *     MockModule(SharedModule),\n *   ],\n * });\n * ```\n */\nexport function MockModule<T>(ngModule: Type<T>): Type<T>;\n\n/**\n * MockModule creates a mock module class with mock provides out of an arbitrary module with providers.\n * All declarations, imports, exports and providers will be mocked too.\n *\n * @see https://ng-mocks.sudo.eu/api/MockModule\n *\n * ```ts\n * TestBed.configureTestingModule({\n *   imports: [\n *     MockModule(StoreModule.forRoot()),\n *   ],\n * });\n * ```\n */\nexport function MockModule<T>(ngModule: NgModuleWithProviders<T>): NgModuleWithProviders<T>;\n\nexport function MockModule(def: any): any {\n  funcImportExists(def, 'MockModule');\n\n  const { ngModule, ngModuleProviders } = extractModuleAndProviders(def);\n  const flags = preProcessFlags(ngModule);\n  try {\n    const mockModule = detectMockModule(ngModule, getExistingMockModule(ngModule, flags.isRootModule));\n    // istanbul ignore else\n    if (ngMocksUniverse.flags.has('cacheModule')) {\n      ngMocksUniverse.cacheDeclarations.set(ngModule, mockModule);\n    }\n    if (ngMocksUniverse.flags.has('skipMock')) {\n      ngMocksUniverse.config.get('ngMocksDepsSkip')?.add(mockModule);\n    }\n    const mockModuleProviders = getMockProviders(ngModuleProviders);\n\n    return generateReturn(def, ngModule, ngModuleProviders, mockModule, mockModuleProviders);\n  } finally {\n    postProcessFlags(flags);\n  }\n}\n","import { NgModule, Provider } from '@angular/core';\n\nimport CoreDefStack from '../common/core.def-stack';\nimport { flatten } from '../common/core.helpers';\nimport { dependencyKeys, Type } from '../common/core.types';\nimport funcGetType from '../common/func.get-type';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nimport createResolvers from './create-resolvers';\nimport markProviders from './mark-providers';\n\nconst flatToExisting = <T, R>(data: T | T[], callback: (arg: T) => R | undefined): R[] =>\n  flatten(data)\n    .map(callback)\n    .filter((item): item is R => !!item);\n\nconst configureProcessMetaKeys = (\n  resolve: (def: any) => any,\n  resolveProvider: (def: Provider) => any,\n): Array<[dependencyKeys, (def: any) => any]> => [\n  ['declarations', resolve],\n  [\n    'hostDirectives',\n    <T>(data: T) => {\n      const def = funcGetType(data);\n      const directive = resolve(def);\n      return directive === def\n        ? data\n        : data == def\n        ? directive\n        : {\n            ...data,\n            directive,\n          };\n    },\n  ],\n  ['imports', resolve],\n  ['entryComponents', resolve],\n  ['bootstrap', resolve],\n  ['providers', resolveProvider],\n  ['viewProviders', resolveProvider],\n  ['exports', resolve],\n  ['schemas', v => v],\n];\n\nconst processMeta = <\n  T extends Partial<Record<dependencyKeys, any>> & {\n    skipMarkProviders?: boolean;\n  },\n>(\n  ngModule: T,\n  resolve: (def: any) => any,\n  resolveProvider: (def: Provider) => any,\n): Partial<T> => {\n  const mockModuleDef: Partial<T> = {};\n  const keys = configureProcessMetaKeys(resolve, resolveProvider);\n\n  const cachePipe = ngMocksUniverse.flags.has('cachePipe');\n  if (!cachePipe) {\n    ngMocksUniverse.flags.add('cachePipe');\n  }\n  for (const [key, callback] of keys) {\n    if (ngModule[key]?.length) {\n      mockModuleDef[key] = flatToExisting(ngModule[key], callback);\n    }\n  }\n  if (!ngModule.skipMarkProviders) {\n    markProviders(mockModuleDef.providers);\n    markProviders(mockModuleDef.viewProviders);\n  }\n\n  if (!cachePipe) {\n    ngMocksUniverse.flags.delete('cachePipe');\n  }\n\n  return mockModuleDef;\n};\n\nconst resolveDefForExport = (\n  def: any,\n  resolve: (def: any) => any,\n  correctExports: boolean,\n  ngModule?: Type<any>,\n): Type<any> | undefined => {\n  const moduleConfig = ngMocksUniverse.config.get(ngModule) || {};\n  const instance = funcGetType(def);\n  const mockDef = resolve(instance);\n  if (!mockDef) {\n    return undefined;\n  }\n\n  // If we export a declaration, then we have to export its module too.\n  const config = ngMocksUniverse.config.get(instance);\n  if (config?.export && ngModule && !moduleConfig.export) {\n    ngMocksUniverse.config.set(ngModule, {\n      ...moduleConfig,\n      export: true,\n    });\n  }\n\n  if (correctExports && !moduleConfig.exportAll && !config?.export) {\n    return undefined;\n  }\n\n  ngMocksUniverse.configInstance.set(instance, {\n    ...ngMocksUniverse.configInstance.get(instance),\n    exported: true,\n  });\n\n  return mockDef;\n};\n\nconst skipAddExports = (mockDef: any, mockModuleDef: NgModule): mockDef is undefined =>\n  !mockDef || (!!mockModuleDef.exports && mockModuleDef.exports.indexOf(mockDef) !== -1);\n\n// if we are in the skipMock mode we need to export only the default exports.\n// if we are in the correctModuleExports mode we need to export only default exports.\nconst addExports = (\n  resolve: (def: any) => any,\n  change: () => void,\n  ngModuleDef: NgModule,\n  mockModuleDef: NgModule,\n  ngModule?: Type<any>,\n): void => {\n  const correctExports = ngMocksUniverse.flags.has('skipMock') || ngMocksUniverse.flags.has('correctModuleExports');\n  for (const def of flatten([ngModuleDef.imports || [], ngModuleDef.declarations || []])) {\n    const mockDef = resolveDefForExport(def, resolve, correctExports, ngModule);\n    if (skipAddExports(mockDef, mockModuleDef)) {\n      continue;\n    }\n\n    change();\n    mockModuleDef.exports = mockModuleDef.exports || [];\n    mockModuleDef.exports.push(mockDef);\n  }\n};\n\nexport default <\n  T extends NgModule & {\n    hostDirectives?: Array<any>;\n    skipMarkProviders?: boolean;\n    skipExports?: boolean;\n  },\n>(\n  ngModuleDef: T,\n  ngModule?: Type<any>,\n): [boolean, Partial<T>, Map<any, any>] => {\n  const hasResolver = ngMocksUniverse.config.has('mockNgDefResolver');\n  if (!hasResolver) {\n    ngMocksUniverse.config.set('mockNgDefResolver', new CoreDefStack());\n  }\n  ngMocksUniverse.config.get('mockNgDefResolver').push();\n\n  let changed = !ngMocksUniverse.flags.has('skipMock');\n  const change = (flag = true) => {\n    changed = changed || flag;\n  };\n  const { resolve, resolveProvider } = createResolvers(change, ngMocksUniverse.config.get('mockNgDefResolver'));\n  const mockModuleDef = processMeta(ngModuleDef, resolve, resolveProvider);\n  if (!ngModuleDef.skipExports) {\n    addExports(resolve, change, ngModuleDef, mockModuleDef, ngModule);\n  }\n\n  const resolutions = ngMocksUniverse.config.get('mockNgDefResolver').pop();\n  if (!hasResolver) {\n    ngMocksUniverse.config.delete('mockNgDefResolver');\n  }\n\n  return [changed, mockModuleDef, resolutions];\n};\n","import { Pipe, PipeTransform } from '@angular/core';\n\nimport { extendClass } from '../common/core.helpers';\nimport coreReflectPipeResolve from '../common/core.reflect.pipe-resolve';\nimport { Type } from '../common/core.types';\nimport decorateMock from '../common/decorate.mock';\nimport funcGetName from '../common/func.get-name';\nimport funcImportExists from '../common/func.import-exists';\nimport { isMockNgDef } from '../common/func.is-mock-ng-def';\nimport { Mock } from '../common/mock';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\nimport returnCachedMock from '../mock/return-cached-mock';\nimport helperMockService from '../mock-service/helper.mock-service';\n\nimport { MockedPipe } from './types';\n\n/**\n * MockPipes creates an array of mock pipe classes out of pipes passed as parameters.\n *\n * @see https://ng-mocks.sudo.eu/api/MockPipe\n *\n * ```ts\n * TestBed.configureTestingModule({\n *   declarations: MockPipes(\n *     Dep1Pipe,\n *     Dep2Pipe,\n *   ),\n * });\n * ```\n */\nexport function MockPipes(...pipes: Array<Type<PipeTransform>>): Array<Type<PipeTransform>> {\n  return pipes.map(pipe => MockPipe(pipe, undefined));\n}\n\nconst getMockClass = (pipe: Type<any>, transformValue?: PipeTransform['transform']): Type<any> => {\n  const config = ngMocksUniverse.config.get(pipe);\n  const transform = transformValue ?? config?.defValue?.transform;\n  const mock = extendClass(Mock);\n  Pipe(coreReflectPipeResolve(pipe))(mock);\n  decorateMock(mock, pipe, {\n    init: (instance: PipeTransform) => {\n      if (transform) {\n        instance.transform = transform;\n      }\n      if (!instance.transform) {\n        helperMockService.mock(instance, 'transform', `${funcGetName(instance)}.transform`);\n      }\n    },\n    transform,\n  });\n\n  return mock;\n};\n\n/**\n * MockPipe creates a mock pipe class out of an arbitrary pipe.\n *\n * @see https://ng-mocks.sudo.eu/api/MockPipe\n *\n * ```ts\n * TestBed.configureTestingModule({\n *   declarations: [\n *     MockPipe(Dep1Pipe),\n *     MockPipe(Dep2Pipe),\n *   ],\n * });\n * ```\n */\nexport function MockPipe<TPipe extends PipeTransform>(\n  pipe: Type<TPipe>,\n  transform?: TPipe['transform'],\n): Type<MockedPipe<TPipe>>;\n\nexport function MockPipe<TPipe extends PipeTransform>(\n  pipe: Type<TPipe>,\n  transform?: TPipe['transform'],\n): Type<MockedPipe<TPipe>> {\n  funcImportExists(pipe, 'MockPipe');\n\n  if (isMockNgDef(pipe, 'p')) {\n    return pipe;\n  }\n\n  // istanbul ignore next\n  if (ngMocksUniverse.flags.has('cachePipe') && ngMocksUniverse.cacheDeclarations.has(pipe)) {\n    return returnCachedMock(pipe);\n  }\n\n  const mock = getMockClass(pipe, transform);\n  if (ngMocksUniverse.flags.has('cachePipe')) {\n    ngMocksUniverse.cacheDeclarations.set(pipe, mock);\n  }\n\n  return mock as any;\n}\n","import {\n  ClassProvider,\n  ExistingProvider,\n  FactoryProvider,\n  InjectionToken,\n  Provider,\n  StaticClassProvider,\n  ValueProvider,\n} from '@angular/core';\n\nimport { AnyDeclaration, AnyType } from '../common/core.types';\nimport funcImportExists from '../common/func.import-exists';\nimport mockHelperStub from '../mock-helper/mock-helper.stub';\nimport helperUseFactory from '../mock-service/helper.use-factory';\nimport { MockService } from '../mock-service/mock-service';\n\nconst defaultValue = {};\n\n/**\n * MockProviders creates an array of mock providers out of passed as parameters.\n *\n * @see https://ng-mocks.sudo.eu/api/MockProvider\n *\n * ```ts\n * TestBed.configureTestingModule({\n *   providers: MockProviders(\n *     Dep1Service,\n *     Dep2Service,\n *   ),\n * });\n * ```\n */\nexport function MockProviders(...providers: Array<AnyDeclaration<any>>): FactoryProvider[] {\n  return providers.map((provider: any) => MockProvider(provider, defaultValue));\n}\n\n/**\n * MockProvider creates a mock provider out of passed an arbitrary service.\n *\n * @see https://ng-mocks.sudo.eu/api/MockProvider\n *\n * ```ts\n * TestBed.configureTestingModule({\n *   providers: [\n *     MockProvider(Dep1Service),\n *     MockProvider(Dep2Service, {\n *       prop: true,\n *       func: () => 'mock',\n *     }),\n *   ],\n * });\n * ```\n */\nexport function MockProvider<I extends object>(instance: AnyType<I>, overrides?: Partial<I>): FactoryProvider;\n\n/**\n * MockProvider creates a mock provider out of passed an arbitrary token.\n *\n * @see https://ng-mocks.sudo.eu/api/MockProvider\n *\n * ```ts\n * TestBed.configureTestingModule({\n *   providers: [\n *     MockProvider(APP_ID),\n *     MockProvider(WEB_SOCKET, {\n *       prop: true,\n *       func: () => 'mock',\n *     }),\n *   ],\n * });\n * ```\n */\nexport function MockProvider<I>(provider: InjectionToken<I>, useValue?: Partial<I>): FactoryProvider;\n\n/**\n * MockProvider creates a mock provider out of passed an arbitrary string token.\n *\n * @see https://ng-mocks.sudo.eu/api/MockProvider\n *\n * ```ts\n * TestBed.configureTestingModule({\n *   providers: [\n *     MockProvider('web_socket', {\n *       prop: true,\n *       func: () => 'mock',\n *     }),\n *   ],\n * });\n * ```\n */\nexport function MockProvider<I = any>(provider: string, useValue?: Partial<I>): FactoryProvider;\n\n/**\n * MockProvider generates useValue based on passed parameters.\n *\n * @see https://ng-mocks.sudo.eu/api/MockProvider#useValue\n *\n * ```ts\n * TestBed.configureTestingModule({\n *   providers: [\n *     MockProvider(AuthService, {isLoggedIn: true}, 'useValue'),\n *     MockProvider(APP_ROUTES, 5, 'useValue', true), // multi flag\n *   ],\n * });\n * ```\n */\nexport function MockProvider<I>(\n  provider: AnyDeclaration<I>,\n  value: ValueProvider['useValue'],\n  style: 'useValue',\n  multi?: ValueProvider['multi'],\n): ValueProvider;\n\n/**\n * MockProvider generates useExisting based on passed parameters.\n *\n * @see https://ng-mocks.sudo.eu/api/MockProvider#useExisting\n *\n * ```ts\n * TestBed.configureTestingModule({\n *   providers: [\n *     MockProvider(AuthService, MockAuthService, 'useExisting', true),\n *     MockProvider(APP_ROUTES, MOCK_ROUTES, 'useExisting', true), // multi flag\n *   ],\n * });\n * ```\n */\nexport function MockProvider<I>(\n  provider: AnyDeclaration<I>,\n  value: ExistingProvider['useExisting'],\n  style: 'useExisting',\n  multi?: ExistingProvider['multi'],\n): ExistingProvider;\n\n/**\n * MockProvider generates useClass based on passed parameters.\n *\n * @see https://ng-mocks.sudo.eu/api/MockProvider#useClass\n *\n * ```ts\n * TestBed.configureTestingModule({\n *   providers: [\n *     MockProvider(AuthService, MockAuthService, 'useClass', [ctorDep1, ctorDep2]),\n *     MockProvider(UserService, MockUserService, 'useClass', {\n *       multi: true, // multi flag\n *       deps: [ctorDep1, ctorDep2],\n *     }),\n *   ],\n * });\n * ```\n */\nexport function MockProvider<I>(\n  provider: AnyDeclaration<I>,\n  value: StaticClassProvider['useClass'],\n  style: 'useClass',\n  multiDeps?:\n    | StaticClassProvider['multi']\n    | StaticClassProvider['deps']\n    | {\n        multi?: StaticClassProvider['multi'];\n        deps?: StaticClassProvider['deps'];\n      },\n): ClassProvider;\n\n/**\n * MockProvider generates useFactory based on passed parameters.\n *\n * @see https://ng-mocks.sudo.eu/api/MockProvider#useFactory\n *\n * ```ts\n * TestBed.configureTestingModule({\n *   providers: [\n *     MockProvider(AuthService, (dep1, dep2) => {\n *       // ...\n *     }, 'useFactory', [ctorDep1, ctorDep2]),\n *     MockProvider(UserService, (dep1, dep2) => {\n *       // ...\n *     }, 'useFactory', {\n *       multi: true, // multi flag\n *       deps: [ctorDep1, ctorDep2],\n *     }),\n *   ],\n * });\n * ```\n */\nexport function MockProvider<I>(\n  provider: AnyDeclaration<I>,\n  value: FactoryProvider['useFactory'],\n  style: 'useFactory',\n  multiDeps?:\n    | FactoryProvider['multi']\n    | FactoryProvider['deps']\n    | {\n        multi?: FactoryProvider['multi'];\n        deps?: FactoryProvider['deps'];\n      },\n): FactoryProvider;\n\nexport function MockProvider(\n  provide: any,\n  overrides: any = defaultValue,\n  style?: 'useValue' | 'useExisting' | 'useClass' | 'useFactory',\n  flags:\n    | boolean\n    | any[]\n    | {\n        deps?: any[];\n        multi?: boolean;\n      } = {},\n): Provider {\n  funcImportExists(provide, 'MockProvider');\n\n  const { deps, multi } =\n    typeof flags === 'boolean'\n      ? { deps: undefined, multi: flags }\n      : Array.isArray(flags)\n      ? {\n          deps: flags,\n          multi: undefined,\n        }\n      : flags;\n\n  if (style) {\n    return {\n      provide,\n      [style]: overrides,\n      deps,\n      multi,\n    };\n  }\n\n  return helperUseFactory(\n    provide,\n    () => MockService(provide),\n    value => {\n      if (overrides === defaultValue) {\n        return value;\n      }\n      if (!value) {\n        return overrides;\n      }\n\n      return mockHelperStub(value, overrides);\n    },\n  );\n}\n","import { Component, Directive } from '@angular/core';\n\nimport coreConfig from '../common/core.config';\nimport coreDefineProperty from '../common/core.define-property';\nimport { Type } from '../common/core.types';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\nimport helperDefinePropertyDescriptor from '../mock-service/helper.define-property-descriptor';\n\nimport funcGenerateTemplate from './func.generate-template';\n\nconst generateWrapperOutput =\n  (instance: any) =>\n  (prop: keyof any, event: any): void => {\n    if (typeof instance[prop] === 'function') {\n      return instance[prop](event);\n    }\n    if (instance[prop] && typeof instance[prop] === 'object' && typeof instance[prop].emit === 'function') {\n      return instance[prop].emit(event);\n    }\n    if (instance[prop] && typeof instance[prop] === 'object' && typeof instance[prop].next === 'function') {\n      return instance[prop].next(event);\n    }\n\n    instance[prop] = event;\n  };\n\nconst generateWrapperComponent = ({ bindings, options, inputs }: any) => {\n  class MockRenderComponent {\n    public constructor() {\n      coreDefineProperty(this, '__ngMocksOutput', generateWrapperOutput(this));\n\n      // The getter helps to remove the __ngContext__ attribute from <mock-render> tag.\n      // It helps with snapshot assertions.\n      // @see https://github.com/help-me-mom/ng-mocks/issues/3811\n      let ngContext = 0;\n      helperDefinePropertyDescriptor(this, '__ngContext__', {\n        get: () => ngContext,\n        set: (newValue: any) => (ngContext = newValue),\n        enumerable: false,\n      });\n\n      if (!bindings) {\n        for (const input of inputs || []) {\n          let value: any = null;\n          helperDefinePropertyDescriptor(this, input, {\n            get: () => value,\n            set: (newValue: any) => (value = newValue),\n          });\n        }\n      }\n    }\n  }\n\n  // A16: adding unique property.\n  coreDefineProperty(MockRenderComponent.prototype, `__ngMocks_index_${ngMocksUniverse.index()}`, undefined, false);\n  Component(options)(MockRenderComponent);\n\n  return MockRenderComponent;\n};\n\nconst generateWrapperDirective = ({ selector, options }: any) => {\n  class MockRenderDirective {}\n  Directive({\n    selector,\n    providers: options.providers,\n  })(MockRenderDirective);\n\n  return MockRenderDirective;\n};\n\nconst getCache = () => {\n  const caches: Array<Type<any> & Record<'cacheKey', any[]>> = ngMocksUniverse.config.get('MockRenderCaches') ?? [];\n  if (caches.length === 0) {\n    ngMocksUniverse.config.set('MockRenderCaches', caches);\n  }\n\n  return caches;\n};\n\nconst checkCache = (caches: Array<Type<any> & Record<'cacheKey', any[]>>, cacheKey: any[]): undefined | Type<any> => {\n  for (const cache of caches) {\n    if (cache.cacheKey.length !== cacheKey.length) {\n      continue;\n    }\n    let isValid = true;\n    for (let i = 0; i < cacheKey.length; i += 1) {\n      if (cache.cacheKey[i] !== cacheKey[i]) {\n        isValid = false;\n        break;\n      }\n    }\n    if (isValid) {\n      return cache;\n    }\n  }\n\n  return undefined;\n};\n\nexport default (\n  template: any,\n  meta: Directive,\n  bindings: undefined | null | any[],\n  flags: Record<keyof any, any>,\n): Type<any> => {\n  const caches = getCache();\n\n  // nulls help to detect defaults\n  const cacheKey = [\n    template,\n    ...(bindings ?? [null]),\n    ...(flags.providers ?? [null]),\n    ...(flags.viewProviders ?? [null]),\n  ];\n  let ctor = checkCache(caches, cacheKey);\n  if (ctor) {\n    return ctor;\n  }\n\n  const inputs = meta.inputs ? [...meta.inputs] : [];\n  const outputs = meta.outputs ? [...meta.outputs] : [];\n  if (meta.hostDirectives) {\n    for (const hostDirective of meta.hostDirectives) {\n      if (typeof hostDirective !== 'object' || !hostDirective.directive) {\n        continue;\n      }\n\n      if (hostDirective.inputs) {\n        inputs.push(...hostDirective.inputs);\n      }\n      if (hostDirective.outputs) {\n        outputs.push(...hostDirective.outputs);\n      }\n    }\n  }\n\n  const mockTemplate = funcGenerateTemplate(template, { selector: meta.selector, inputs, outputs, bindings });\n  const options: Component = {\n    providers: flags.providers,\n    selector: 'mock-render',\n    template: mockTemplate,\n    viewProviders: flags.viewProviders,\n  };\n\n  ctor = generateWrapperComponent({ ...meta, bindings, options });\n  coreDefineProperty(ctor, 'cacheKey', cacheKey);\n  coreDefineProperty(ctor, 'tpl', mockTemplate);\n\n  if (meta.selector && options.providers) {\n    const dir = generateWrapperDirective({ ...meta, bindings, options });\n    coreDefineProperty(ctor, 'providers', dir);\n  }\n\n  caches.unshift(ctor as any);\n  caches.splice(ngMocksUniverse.global.get('mockRenderCacheSize') ?? coreConfig.mockRenderCacheSize);\n\n  return ctor;\n};\n","import coreReflectPipeResolve from '../common/core.reflect.pipe-resolve';\nimport { DirectiveIo } from '../common/core.types';\nimport funcDirectiveIoParse from '../common/func.directive-io-parse';\nimport { isNgDef } from '../common/func.is-ng-def';\n\nconst generateTemplateAttrWrap = (prop: string, type: 'i' | 'o') => (type === 'i' ? `[${prop}]` : `(${prop})`);\n\nconst generateTemplateAttrWithParams = (prop: string, type: 'i' | 'o'): string => {\n  let tpl = ` ${generateTemplateAttrWrap(prop, type)}=\"`;\n  tpl += type === 'i' ? prop : `__ngMocksOutput('${prop}', $event)`;\n  tpl += '\"';\n\n  return tpl;\n};\n\nconst generateTemplateAttr = (bindings: null | undefined | any[], attr: Array<DirectiveIo>, type: 'i' | 'o') => {\n  // unprovided params for inputs should render empty placeholders\n  if (!bindings && type === 'o') {\n    return '';\n  }\n\n  let mockTemplate = '';\n  const keys = bindings ?? attr;\n  for (const definition of attr) {\n    const { name, alias } = funcDirectiveIoParse(definition);\n\n    mockTemplate += keys.indexOf(alias || name) === -1 ? '' : generateTemplateAttrWithParams(alias || name, type);\n  }\n\n  return mockTemplate;\n};\n\nexport default (declaration: any, { selector, bindings, inputs, outputs }: any): string => {\n  let mockTemplate = '';\n\n  // istanbul ignore else\n  if (typeof declaration === 'string') {\n    mockTemplate = declaration;\n  } else if (isNgDef(declaration, 'p') && bindings && bindings.indexOf('$implicit') !== -1) {\n    mockTemplate = `{{ $implicit | ${coreReflectPipeResolve(declaration).name} }}`;\n  } else if (selector) {\n    mockTemplate += `<${selector}`;\n    mockTemplate += generateTemplateAttr(bindings, inputs, 'i');\n    mockTemplate += generateTemplateAttr(bindings, outputs, 'o');\n    mockTemplate += `></${selector}>`;\n  }\n\n  return mockTemplate;\n};\n","import coreDefineProperty from '../common/core.define-property';\nimport helperDefinePropertyDescriptor from '../mock-service/helper.define-property-descriptor';\nimport helperMockService from '../mock-service/helper.mock-service';\n\nconst createPropertyGet = (key: keyof any & string, reader: Record<keyof any, any>, source: Record<keyof any, any>) => {\n  const handler = () => {\n    if (typeof source[key] === 'function') {\n      if (reader[`__ngMocks_${key}__origin`] !== source[key]) {\n        const clone = helperMockService.createClone(source[key], reader, source);\n        coreDefineProperty(reader, `__ngMocks_${key}`, clone);\n        coreDefineProperty(reader, `__ngMocks_${key}__origin`, source[key]);\n      }\n\n      return reader[`__ngMocks_${key}`];\n    }\n\n    return source[key];\n  };\n  coreDefineProperty(handler, '__ngMocksProxy', true);\n\n  return handler;\n};\n\nconst createPropertySet = (key: keyof any & string, reader: Record<keyof any, any>, source: Record<keyof any, any>) => {\n  const handler = (newValue: any) => {\n    if (reader[`__ngMocks_${key}`]) {\n      reader[`__ngMocks_${key}`] = undefined;\n    }\n    if (reader[`__ngMocks_${key}__origin`]) {\n      reader[`__ngMocks_${key}__origin`] = undefined;\n    }\n    source[key] = newValue;\n  };\n  coreDefineProperty(handler, '__ngMocksProxy', true);\n\n  return handler;\n};\n\nconst extractAllKeys = (instance: object) => [\n  ...helperMockService.extractPropertiesFromPrototype(Object.getPrototypeOf(instance)),\n  ...helperMockService.extractMethodsFromPrototype(Object.getPrototypeOf(instance)),\n  ...Object.keys(instance),\n];\n\nconst extractOwnKeys = (instance: object) => [...Object.getOwnPropertyNames(instance), ...Object.keys(instance)];\n\nexport default (\n  reader: Record<keyof any, any>,\n  source: Record<keyof any, any> | undefined,\n  extra: string[],\n  force = false,\n): void => {\n  if (!source) {\n    return;\n  }\n  coreDefineProperty(reader, '__ngMocks__source', source);\n  const exists = extractOwnKeys(reader);\n  const fields = [...extractAllKeys(source), ...extra];\n  for (const key of fields) {\n    if (!force && exists.indexOf(key) !== -1) {\n      continue;\n    }\n    helperDefinePropertyDescriptor(reader, key, {\n      get: createPropertyGet(key, reader, source),\n      set: createPropertySet(key, reader, source),\n    });\n    exists.push(key);\n  }\n};\n","import { Component, Directive } from '@angular/core';\nimport { TestBed } from '@angular/core/testing';\n\nimport coreDefineProperty from '../common/core.define-property';\nimport { extendClass } from '../common/core.helpers';\nimport coreReflectDirectiveResolve from '../common/core.reflect.directive-resolve';\nimport { AnyType } from '../common/core.types';\nimport { isNgDef } from '../common/func.is-ng-def';\n\nconst registerTemplateMiddleware = (template: AnyType<any>, meta: Directive): void => {\n  const child = extendClass(template);\n\n  const alias = {\n    provide: template,\n    useExisting: child,\n  };\n  meta.providers = [...(meta.providers || []), alias];\n\n  // https://github.com/help-me-mom/ng-mocks/issues/1876\n  // We need to apply overrides to our cloned declaration.\n  let set: any = {};\n  try {\n    const ngMocksOverrides: Map<any, any> = (TestBed as any).ngMocksOverrides;\n    const { override } = ngMocksOverrides.get(template);\n    set = { ...override.set };\n    set.providers = set.providers ? [...set.providers, alias] : meta.providers;\n  } catch {\n    // nothing to do\n  }\n\n  const standalone = (meta as any).__ngMocksStandalone === true;\n  (isNgDef(template, 'c') ? Component : Directive)({\n    ...meta,\n    ...set,\n    ...(standalone ? { standalone } : {}),\n  })(child);\n  TestBed.configureTestingModule({\n    [standalone ? 'imports' : 'declarations']: [child],\n  });\n};\n\nexport default (template: AnyType<any>): Directive => {\n  if (!isNgDef(template, 'c') && !isNgDef(template, 'd')) {\n    return {};\n  }\n\n  const meta = coreReflectDirectiveResolve(template);\n  const override: Directive = {};\n  for (const key of Object.keys(meta)) {\n    if (key === 'standalone') {\n      coreDefineProperty(override, '__ngMocksStandalone', !!meta[key as never]);\n      continue;\n    }\n\n    override[key as never] = meta[key as never];\n  }\n\n  if (override.selector && /[\\s,[\\]]/.test(override.selector)) {\n    override.selector = '';\n  }\n\n  if (!override.selector) {\n    // istanbul ignore next\n    override.selector = (TestBed as any).ngMocksSelectors?.get(template) || '';\n    if (!override.selector) {\n      override.selector = `ng-mocks-${template.name}`;\n      registerTemplateMiddleware(template, override);\n      // istanbul ignore else\n      if ((TestBed as any).ngMocksSelectors) {\n        (TestBed as any).ngMocksSelectors.set(template, override.selector);\n      }\n    }\n  }\n\n  return override;\n};\n","import { DebugElement, Directive, InjectionToken } from '@angular/core';\nimport { getTestBed, TestBed } from '@angular/core/testing';\n\nimport coreDefineProperty from '../common/core.define-property';\nimport { getInjection } from '../common/core.helpers';\nimport { AnyDeclaration, AnyType, Type } from '../common/core.types';\nimport funcGetName from '../common/func.get-name';\nimport funcImportExists from '../common/func.import-exists';\nimport { isNgDef } from '../common/func.is-ng-def';\nimport ngMocksStack from '../common/ng-mocks-stack';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\nimport { ngMocks } from '../mock-helper/mock-helper';\nimport helperDefinePropertyDescriptor from '../mock-service/helper.define-property-descriptor';\nimport { MockService } from '../mock-service/mock-service';\n\nimport funcCreateWrapper from './func.create-wrapper';\nimport funcInstallPropReader from './func.install-prop-reader';\nimport funcReflectTemplate from './func.reflect-template';\nimport { IMockRenderFactoryOptions, MockedComponentFixture } from './types';\n\nexport interface MockRenderFactory<C = any, F extends keyof any = keyof C> {\n  bindings: keyof F;\n  configureTestBed: () => void;\n  declaration: AnyType<never>;\n  <T extends Record<F, any>>(params?: Partial<T>, detectChanges?: boolean): MockedComponentFixture<C, T>;\n}\n\nconst renderDeclaration = (fixture: any, template: any, params: any): void => {\n  fixture.point =\n    fixture.debugElement.children[0] &&\n    fixture.debugElement.children[0].nativeElement.nodeName !== '#text' &&\n    fixture.debugElement.children[0].nativeElement.nodeName !== '#comment'\n      ? fixture.debugElement.children[0]\n      : fixture.debugElement;\n  if (isNgDef(template, 'd')) {\n    helperDefinePropertyDescriptor(fixture.point, 'componentInstance', {\n      get: () => ngMocks.get(fixture.point, template),\n    });\n  } else if (isNgDef(template, 'p')) {\n    helperDefinePropertyDescriptor(fixture.point, 'componentInstance', {\n      get: () => ngMocks.findInstance(fixture.point, template),\n    });\n  }\n  tryWhen(!params, () => funcInstallPropReader(fixture.componentInstance, fixture.point.componentInstance, []));\n};\n\nconst renderInjection = (fixture: any, template: any, params: any): void => {\n  let instance: any;\n  try {\n    instance = getInjection(template);\n  } catch (error) {\n    if (isNgDef(template, 'p')) {\n      throw new Error(\n        [\n          `Cannot render ${funcGetName(template)}.`,\n          'Did you forget to set $implicit param, or add the pipe to providers?',\n          'https://ng-mocks.sudo.eu/guides/pipe',\n        ].join(' '),\n      );\n    }\n    throw error;\n  }\n  if (params) {\n    ngMocks.stub(instance, params);\n  }\n  fixture.point = MockService(DebugElement, {\n    childNodes: [],\n    children: [],\n    componentInstance: instance,\n    nativeElement: MockService(HTMLElement),\n  });\n  funcInstallPropReader(fixture.componentInstance, fixture.point.componentInstance, [], true);\n};\n\nconst tryWhen = (flag: boolean, callback: () => void) => {\n  if (!flag) {\n    return;\n  }\n  try {\n    // ivy throws Error: Expecting instance of DOM Element\n    callback();\n  } catch {\n    // nothing to do\n  }\n};\n\nconst fixtureMessage = [\n  'Forgot to flush TestBed?',\n  'MockRender cannot be used without a reset after TestBed.get / TestBed.inject / TestBed.createComponent and another MockRender in the same test.',\n  'If you want to mock a service before rendering, consider usage of MockRenderFactory or MockInstance.',\n  'To flush TestBed, add a call of ngMocks.flushTestBed() before the call of MockRender, or pass `reset: true` to MockRender options.',\n].join(' ');\n\nconst handleFixtureError = (e: any) => {\n  const error = new Error(fixtureMessage);\n  coreDefineProperty(error, 'parent', e);\n  throw error;\n};\n\nconst flushTestBed = (flags: Record<string, any>): void => {\n  const globalFlags = ngMocksUniverse.global.get('flags');\n  const testBed: any = getTestBed();\n  if (flags.reset || (!testBed._instantiated && !testBed._testModuleRef)) {\n    ngMocks.flushTestBed();\n  } else if (globalFlags.onTestBedFlushNeed !== 'throw' && (testBed._instantiated || testBed._testModuleRef)) {\n    if (globalFlags.onTestBedFlushNeed === 'warn') {\n      console.warn(fixtureMessage);\n    }\n    ngMocks.flushTestBed();\n  }\n};\n\nconst generateFactoryInstall =\n  (ctor: AnyType<any> & { providers?: AnyType<any> }, options: IMockRenderFactoryOptions) => () => {\n    const testBed: TestBed & {\n      _compiler?: {\n        declarations?: Array<AnyType<any>>;\n      };\n      _declarations?: Array<AnyType<any>>;\n      declarations?: Array<AnyType<any>>;\n    } = getTestBed();\n    // istanbul ignore next\n    const existing = testBed._compiler?.declarations || testBed.declarations || testBed._declarations;\n    if (!existing || existing.indexOf(ctor) === -1) {\n      flushTestBed(options);\n      try {\n        const declarations: Array<AnyType<any>> = [];\n        if (ctor.providers) {\n          declarations.push(ctor.providers);\n        }\n        declarations.push(ctor);\n        TestBed.configureTestingModule({\n          declarations,\n        });\n      } catch (error) {\n        handleFixtureError(error);\n      }\n    }\n  };\n\nconst generateFactory = (\n  componentCtor: Type<any> & { tpl?: string },\n  bindings: undefined | null | string[],\n  template: any,\n  options: IMockRenderFactoryOptions,\n) => {\n  const result = (params: any, detectChanges?: boolean) => {\n    result.configureTestBed();\n    const fixture: any = TestBed.createComponent(componentCtor);\n\n    funcInstallPropReader(fixture.componentInstance, params ?? {}, bindings ?? []);\n    coreDefineProperty(fixture, 'ngMocksStackId', ngMocksUniverse.global.get('bullet:stack:id'));\n\n    if (detectChanges === undefined || detectChanges) {\n      fixture.detectChanges();\n    }\n\n    if (\n      typeof template === 'string' ||\n      isNgDef(template, 'c') ||\n      isNgDef(template, 'd') ||\n      (componentCtor.tpl && isNgDef(template, 'p'))\n    ) {\n      renderDeclaration(fixture, template, params);\n    } else {\n      renderInjection(fixture, template, params);\n    }\n\n    return fixture;\n  };\n  result.declaration = componentCtor;\n  result.bindings = bindings;\n  result.configureTestBed = generateFactoryInstall(componentCtor, options);\n\n  return result;\n};\n\n/**\n * @see https://ng-mocks.sudo.eu/api/MockRender#factory\n */\nexport function MockRenderFactory<MComponent>(\n  template: InjectionToken<MComponent>,\n  bindings?: undefined | null,\n  options?: IMockRenderFactoryOptions,\n): MockRenderFactory<MComponent, never>;\n\n/**\n * MockRenderFactory is a delayed version of MockRender.\n *\n * @see https://ng-mocks.sudo.eu/api/MockRender#factory\n */\nexport function MockRenderFactory<MComponent>(\n  template: AnyType<MComponent>,\n  bindings: undefined | null,\n  options?: IMockRenderFactoryOptions,\n): MockRenderFactory<MComponent, keyof MComponent>;\n\n/**\n * MockRenderFactory is a delayed version of MockRender.\n *\n * @see https://ng-mocks.sudo.eu/api/MockRender#factory\n */\nexport function MockRenderFactory<MComponent, TKeys extends keyof any>(\n  template: AnyType<MComponent>,\n  bindings: TKeys[],\n  options?: IMockRenderFactoryOptions,\n): MockRenderFactory<MComponent, TKeys>;\n\n/**\n * MockRenderFactory is a delayed version of MockRender.\n *\n * @see https://ng-mocks.sudo.eu/api/MockRender#factory\n */\nexport function MockRenderFactory<MComponent, TKeys extends keyof any = keyof any>(\n  template: AnyType<MComponent>,\n  bindings: TKeys[],\n  options?: IMockRenderFactoryOptions,\n): MockRenderFactory<MComponent, TKeys>;\n\n/**\n * Without params we should not autocomplete any keys of any types.\n *\n * @see https://ng-mocks.sudo.eu/api/MockRender#factory\n */\nexport function MockRenderFactory<MComponent>(\n  template: AnyType<MComponent>,\n): MockRenderFactory<MComponent, keyof MComponent>;\n\n/**\n * An empty string does not have point.\n *\n * @see https://ng-mocks.sudo.eu/api/MockRender#factory\n */\nexport function MockRenderFactory(template: ''): MockRenderFactory<void, never>;\n\n/**\n * Without params we should not autocomplete any keys of any types.\n *\n * @see https://ng-mocks.sudo.eu/api/MockRender#factory\n */\nexport function MockRenderFactory<MComponent = void>(template: string): MockRenderFactory<MComponent>;\n\n/**\n * MockRenderFactory is a delayed version of MockRender.\n *\n * @see https://ng-mocks.sudo.eu/api/MockRender#factory\n */\nexport function MockRenderFactory<MComponent = void, TKeys extends keyof any = keyof any>(\n  template: string,\n  bindings: TKeys[],\n  options?: IMockRenderFactoryOptions,\n): MockRenderFactory<MComponent, TKeys>;\n\nexport function MockRenderFactory<MComponent, TKeys extends string>(\n  template: string | AnyDeclaration<MComponent>,\n  bindings?: undefined | null | TKeys[],\n  options: IMockRenderFactoryOptions = {},\n): any {\n  funcImportExists(template, 'MockRender');\n\n  const meta: Directive = typeof template === 'string' || isNgDef(template, 't') ? {} : funcReflectTemplate(template);\n  const componentCtor: any = funcCreateWrapper(template, meta, bindings, options);\n  const factory = generateFactory(componentCtor, bindings, template, options);\n  if (ngMocksStack.current().level !== 'root' && options.configureTestBed !== false) {\n    factory.configureTestBed();\n  }\n\n  return factory;\n}\n","import { InjectionToken } from '@angular/core';\n\nimport { AnyDeclaration, AnyType } from '../common/core.types';\n\nimport { MockRenderFactory } from './mock-render-factory';\nimport { IMockRenderOptions, MockedComponentFixture } from './types';\n\n/**\n * This signature of MockRender lets create an empty fixture.\n *\n * @see https://ng-mocks.sudo.eu/api/MockRender\n */\nexport function MockRender(): MockedComponentFixture<void, void>;\n\n/**\n * This signature of MockRender lets create a fixture to access a token.\n *\n * @see https://ng-mocks.sudo.eu/api/MockRender\n */\nexport function MockRender<MComponent>(\n  template: InjectionToken<MComponent>,\n  params?: undefined | null,\n  detectChangesOrOptions?: boolean | IMockRenderOptions,\n): MockedComponentFixture<MComponent, void>;\n\n/**\n * This signature of MockRender lets create a fixture to access a component without parameters.\n *\n * @see https://ng-mocks.sudo.eu/api/MockRender\n */\nexport function MockRender<MComponent>(\n  template: AnyType<MComponent>,\n  params: undefined | null,\n  detectChangesOrOptions?: boolean | IMockRenderOptions,\n): MockedComponentFixture<MComponent, MComponent>;\n\n/**\n * This signature of MockRender lets create a fixture with parameters to access a component.\n *\n * @see https://ng-mocks.sudo.eu/api/MockRender\n */\nexport function MockRender<MComponent, TComponent extends object>(\n  template: AnyType<MComponent>,\n  params: TComponent,\n  detectChangesOrOptions?: boolean | IMockRenderOptions,\n): MockedComponentFixture<MComponent, TComponent>;\n\n/**\n * This signature of MockRender lets create a fixture with parameters to access a component.\n *\n * @see https://ng-mocks.sudo.eu/api/MockRender\n */\nexport function MockRender<MComponent, TComponent extends object = Record<keyof any, any>>(\n  template: AnyType<MComponent>,\n  params: TComponent,\n  detectChangesOrOptions?: boolean | IMockRenderOptions,\n): MockedComponentFixture<MComponent, TComponent>;\n\n/**\n * This signature of MockRender without params should not autocomplete any keys of any types.\n *\n * @see https://ng-mocks.sudo.eu/api/MockRender\n */\nexport function MockRender<MComponent>(template: AnyType<MComponent>): MockedComponentFixture<MComponent, MComponent>;\n\n/**\n * This signature of MockRender without params should not autocomplete any keys of any types.\n *\n * @see https://ng-mocks.sudo.eu/api/MockRender\n */\nexport function MockRender<MComponent = void>(template: string): MockedComponentFixture<MComponent>;\n\n/**\n * This signature of MockRender lets create a fixture based on string template.\n *\n * @see https://ng-mocks.sudo.eu/api/MockRender\n */\nexport function MockRender<MComponent = void>(\n  template: string,\n  params: undefined | null,\n  detectChangesOrOptions?: boolean | IMockRenderOptions,\n): MockedComponentFixture<MComponent, void>;\n\n/**\n * This signature of MockRender lets create a fixture with parameters to access a string based template.\n *\n * @see https://ng-mocks.sudo.eu/api/MockRender\n */\nexport function MockRender<MComponent = void, TComponent extends Record<keyof any, any> = Record<keyof any, any>>(\n  template: string,\n  params: TComponent,\n  detectChangesOrOptions?: boolean | IMockRenderOptions,\n): MockedComponentFixture<MComponent, TComponent>;\n\n/**\n * This signature of MockRender lets create a fixture with parameters to access a string based template.\n *\n * @see https://ng-mocks.sudo.eu/api/MockRender\n */\nexport function MockRender<MComponent, TComponent extends Record<keyof any, any> = Record<keyof any, any>>(\n  template: string,\n  params: TComponent,\n  detectChangesOrOptions?: boolean | IMockRenderOptions,\n): MockedComponentFixture<MComponent, TComponent>;\n\nexport function MockRender<MComponent, TComponent extends Record<keyof any, any>>(\n  template?: string | AnyDeclaration<MComponent>,\n  params?: TComponent,\n  flags: boolean | IMockRenderOptions = true,\n): any {\n  const tpl = arguments.length === 0 ? '' : template;\n  const bindings = params && typeof params === 'object' ? Object.keys(params) : params;\n  const options = typeof flags === 'boolean' ? { detectChanges: flags } : { ...flags };\n  const factory = (MockRenderFactory as any)(tpl, bindings, options);\n\n  return factory(params, options.detectChanges);\n}\n","import checkIsFunc from './check.is-func';\n\nexport default (value: any): boolean => {\n  if (typeof value !== 'function') {\n    return false;\n  }\n\n  return !checkIsFunc(value);\n};\n","const isAngularClass = (value: Record<keyof any, unknown>): boolean => {\n  if (value.ɵprov) {\n    return true;\n  }\n  if (value.__annotations__) {\n    return true;\n  }\n  if (value.__parameters__) {\n    return true;\n  }\n  if (value.parameters) {\n    return true;\n  }\n\n  return false;\n};\n\nconst guessClass = (name: string, proto: string, value: any): boolean => {\n  // unnamed classes can be class_N\n  if (name.match(/^class/) !== null) {\n    return true;\n  }\n\n  // let's consider an existing 'prototype' as a class\n  if (Object.keys(value.prototype).length > 0) {\n    return true;\n  }\n\n  // let's consider a capital name and 'this' usage as a class\n  const clsCode = name.codePointAt(0);\n  if (clsCode && clsCode >= 65 && clsCode <= 90 && proto.match(/\\bthis\\./gm) !== null) {\n    return true;\n  }\n\n  // webpack es5 class\n  const regEx = new RegExp(`\\\\(this,\\\\s*${name}\\\\)`, 'mg');\n  // istanbul ignore if\n  if (proto.match(regEx) !== null) {\n    return true;\n  }\n\n  return false;\n};\n\nexport default (value: any): boolean => {\n  if (typeof value !== 'function') {\n    return false;\n  }\n  if (!value.prototype) {\n    return true;\n  }\n  if (isAngularClass(value)) {\n    return false;\n  }\n\n  const proto = value.toString();\n\n  // es2015 class\n  // istanbul ignore if\n  if (proto.match(/^class\\b/) !== null) {\n    return false;\n  }\n\n  const cls = proto.match(/^function\\s+([^\\s(]+)\\(/);\n  if (cls === null) {\n    return true;\n  }\n  if (guessClass(cls[1], proto, value)) {\n    return false;\n  }\n\n  return true;\n};\n","export default (value: any): boolean => {\n  if (value === null) {\n    return false;\n  }\n  if (typeof value !== 'object') {\n    return false;\n  }\n  if (value.ngMetadataName === 'InjectionToken') {\n    return false;\n  }\n\n  return typeof Object.getPrototypeOf(value) === 'object';\n};\n","import helperDefinePropertyDescriptor from './helper.define-property-descriptor';\nimport helperExtractMethodsFromPrototype from './helper.extract-methods-from-prototype';\nimport helperExtractPropertiesFromPrototype from './helper.extract-properties-from-prototype';\nimport helperExtractPropertyDescriptor from './helper.extract-property-descriptor';\n\nexport default (service: any, bindFrom?: object, bindTo?: object, mock?: any): any => {\n  const instance = function (...args: any[]) {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    return (mock || service).apply(bindFrom === this ? bindTo : this, args);\n  };\n\n  for (const prop of [\n    ...helperExtractMethodsFromPrototype(service),\n    ...helperExtractPropertiesFromPrototype(service),\n  ]) {\n    const desc = helperExtractPropertyDescriptor(service, prop);\n    helperDefinePropertyDescriptor(instance, prop, desc);\n  }\n\n  return instance;\n};\n","import coreDefineProperty from '../common/core.define-property';\nimport funcGetName from '../common/func.get-name';\n\nimport helperMockService from './helper.mock-service';\nimport { MockedFunction } from './types';\n\nexport default (service: any): { [key in keyof any]: MockedFunction } => {\n  const mockName = funcGetName(service);\n  const value: any = {};\n  coreDefineProperty(value, '__ngMocks', true);\n\n  const methods = helperMockService.extractMethodsFromPrototype(service);\n  for (const method of methods) {\n    helperMockService.mock(value, method, mockName);\n  }\n\n  const properties = helperMockService.extractPropertiesFromPrototype(service);\n  for (const property of properties) {\n    helperMockService.mock(value, property, 'get', mockName);\n    helperMockService.mock(value, property, 'set', mockName);\n  }\n  Object.setPrototypeOf(value, service);\n\n  return value;\n};\n","import helperExtractPropertyDescriptor from './helper.extract-property-descriptor';\n\nexport default (instance: any, prop: keyof any, desc?: PropertyDescriptor): boolean => {\n  if (!desc || !instance) {\n    return false;\n  }\n\n  // istanbul ignore else\n  if (Object.defineProperty) {\n    const sourceDesc = helperExtractPropertyDescriptor(instance, prop);\n    if (sourceDesc?.configurable === false) {\n      return false;\n    }\n\n    Object.defineProperty(instance, prop, {\n      ...desc,\n      configurable: true,\n      ...((desc.get === undefined && desc.set === undefined) || desc.writable === false ? { writable: true } : {}),\n    });\n  } else {\n    instance[prop] = desc.value;\n  }\n\n  return true;\n};\n","import funcGetName from '../common/func.get-name';\n\nconst sanitizerMethods = [\n  'sanitize',\n  'bypassSecurityTrustHtml',\n  'bypassSecurityTrustStyle',\n  'bypassSecurityTrustScript',\n  'bypassSecurityTrustUrl',\n  'bypassSecurityTrustResourceUrl',\n];\n\nconst extraMethods: Record<string, undefined | string[]> = {\n  DomSanitizer: sanitizerMethods,\n  Sanitizer: sanitizerMethods,\n};\n\nconst getOwnPropertyNames = (prototype: any): string[] => {\n  const result: string[] = Object.getOwnPropertyNames(prototype);\n  for (const method of extraMethods[funcGetName(prototype)] ?? []) {\n    result.push(method);\n  }\n\n  return result;\n};\n\nexport default <T>(service: T): string[] => {\n  const result: string[] = [];\n\n  let prototype = service;\n  while (prototype && Object.getPrototypeOf(prototype) !== null) {\n    for (const method of getOwnPropertyNames(prototype)) {\n      if ((method as any) === 'constructor') {\n        continue;\n      }\n\n      const descriptor = Object.getOwnPropertyDescriptor(prototype, method);\n      const isGetterSetter = descriptor && (descriptor.get || descriptor.set);\n      if (isGetterSetter || result.indexOf(method) !== -1) {\n        continue;\n      }\n      result.push(method);\n    }\n    prototype = Object.getPrototypeOf(prototype);\n  }\n\n  return result;\n};\n","export default <T>(service: T): string[] => {\n  const result: string[] = [];\n  let prototype = service;\n  while (prototype && Object.getPrototypeOf(prototype) !== null) {\n    for (const prop of Object.getOwnPropertyNames(prototype)) {\n      if ((prop as any) === 'constructor') {\n        continue;\n      }\n\n      const descriptor = Object.getOwnPropertyDescriptor(prototype, prop);\n      const isGetterSetter = descriptor && (descriptor.get || descriptor.set);\n      if (!isGetterSetter || result.indexOf(prop) !== -1) {\n        continue;\n      }\n      result.push(prop);\n    }\n    prototype = Object.getPrototypeOf(prototype);\n  }\n\n  return result;\n};\n","export default <T>(service: T, prop: keyof any): PropertyDescriptor | undefined => {\n  let prototype = service;\n  while (prototype && Object.getPrototypeOf(prototype) !== null) {\n    const descriptor = Object.getOwnPropertyDescriptor(prototype, prop);\n    if (descriptor) {\n      return descriptor;\n    }\n    prototype = Object.getPrototypeOf(prototype);\n  }\n\n  return undefined;\n};\n","import coreDefineProperty from '../common/core.define-property';\n\nimport { CustomMockFunction, MockedFunction } from './types';\n\nconst mockFunction: {\n  (mockName: string, original?: boolean): MockedFunction;\n  customMockFunction?: CustomMockFunction;\n} = (mockName: string, original = false): MockedFunction => {\n  // eslint-disable-next-line unicorn/prefer-logical-operator-over-ternary\n  const func =\n    mockFunction.customMockFunction && !original\n      ? mockFunction.customMockFunction(mockName)\n      : (val: any) => {\n          if (setValue) {\n            setValue(val);\n          }\n\n          return value;\n        };\n\n  // magic to make getters / setters working\n\n  let value: any;\n  let setValue: any;\n\n  coreDefineProperty(func, '__ngMocks', true);\n  coreDefineProperty(func, '__ngMocksSet', (newSetValue: any) => (setValue = newSetValue));\n  coreDefineProperty(func, '__ngMocksGet', (newValue: any) => (value = newValue));\n\n  return func;\n};\n\nexport default (() => mockFunction)();\n","import funcGetGlobal from '../common/func.get-global';\n\nimport helperCreateClone from './helper.create-clone';\nimport helperCreateMockFromPrototype from './helper.create-mock-from-prototype';\nimport helperDefinePropertyDescriptor from './helper.define-property-descriptor';\nimport helperExtractMethodsFromPrototype from './helper.extract-methods-from-prototype';\nimport helperExtractPropertiesFromPrototype from './helper.extract-properties-from-prototype';\nimport helperExtractPropertyDescriptor from './helper.extract-property-descriptor';\nimport helperMock from './helper.mock';\nimport helperMockFunction from './helper.mock-function';\nimport helperReplaceWithMocks from './helper.replace-with-mocks';\nimport helperResolveProvider from './helper.resolve-provider';\nimport helperUseFactory from './helper.use-factory';\nimport { CustomMockFunction } from './types';\n\n// We need a single pointer to the object among all environments.\nfuncGetGlobal().ngMockshelperMockService = funcGetGlobal().ngMockshelperMockService || {\n  mockFunction: helperMockFunction,\n\n  registerMockFunction: (func: CustomMockFunction | undefined) => {\n    funcGetGlobal().ngMockshelperMockService.mockFunction.customMockFunction = func;\n  },\n\n  createClone: helperCreateClone,\n  createMockFromPrototype: helperCreateMockFromPrototype,\n  definePropertyDescriptor: helperDefinePropertyDescriptor,\n  extractMethodsFromPrototype: helperExtractMethodsFromPrototype,\n  extractPropertiesFromPrototype: helperExtractPropertiesFromPrototype,\n  extractPropertyDescriptor: helperExtractPropertyDescriptor,\n  mock: helperMock,\n  replaceWithMocks: helperReplaceWithMocks,\n  resolveProvider: helperResolveProvider,\n  useFactory: helperUseFactory,\n};\n\nexport default ((): {\n  createClone: typeof helperCreateClone;\n  createMockFromPrototype: typeof helperCreateMockFromPrototype;\n  definePropertyDescriptor: typeof helperDefinePropertyDescriptor;\n  extractMethodsFromPrototype: typeof helperExtractMethodsFromPrototype;\n  extractPropertiesFromPrototype: typeof helperExtractPropertiesFromPrototype;\n  extractPropertyDescriptor: typeof helperExtractPropertyDescriptor;\n  mock: typeof helperMock;\n  mockFunction: typeof helperMockFunction;\n  registerMockFunction: (func: CustomMockFunction | undefined) => void;\n  replaceWithMocks: typeof helperReplaceWithMocks;\n  resolveProvider: typeof helperResolveProvider;\n  useFactory: typeof helperUseFactory;\n} => funcGetGlobal().ngMockshelperMockService)();\n\nexport function registerMockFunction(func?: CustomMockFunction | undefined): void {\n  funcGetGlobal().ngMockshelperMockService.registerMockFunction(func);\n}\n","import funcGetName from '../common/func.get-name';\n\nimport helperMockService from './helper.mock-service';\nimport { MockedFunction } from './types';\n\n// istanbul ignore next\nconst createName = (name: string, mockName?: string, instance?: any, accessType?: string) =>\n  `${mockName ?? (typeof instance.prototype === 'function' ? instance.prototype.name : funcGetName(instance))}.${name}${\n    accessType ?? ''\n  }`;\n\nconst generateMockDef = (def: any, mock: any, accessType?: string): PropertyDescriptor => ({\n  ...(accessType === 'get' && def && def.set\n    ? {\n        set: def.set,\n      }\n    : {}),\n\n  ...(accessType === 'set' && def && def.get\n    ? {\n        get: def.get,\n      }\n    : {}),\n\n  ...(accessType\n    ? {}\n    : {\n        writable: true,\n      }),\n\n  [accessType || 'value']: mock,\n  configurable: true,\n  enumerable: true,\n});\n\nconst parseArgs = (\n  args: any[],\n): {\n  accessType?: 'get' | 'set';\n  mockName?: string;\n} => {\n  let accessType: 'get' | 'set' | undefined;\n  let mockName: string | undefined;\n\n  if (args.length > 0 && args[0] !== 'get' && args[0] !== 'set') {\n    mockName = args[0];\n  } else if (args.length > 0 && (args[0] === 'get' || args[0] === 'set')) {\n    accessType = args[0];\n    mockName = args[1];\n  }\n\n  return { accessType, mockName };\n};\n\nexport default <T = MockedFunction>(instance: any, name: string, ...args: Array<string | undefined>): T => {\n  const { accessType, mockName } = parseArgs(args);\n\n  const def = Object.getOwnPropertyDescriptor(instance, name);\n  if (def && def[accessType || 'value']) {\n    return def[accessType || 'value'];\n  }\n\n  const detectedMockName = createName(name, mockName, instance, accessType);\n  const mock: any = helperMockService.mockFunction(detectedMockName, !!accessType);\n\n  const mockDef = generateMockDef(def, mock, accessType);\n  if (mockDef.get && mockDef.set && (mockDef.get as any).__ngMocks && (mockDef.set as any).__ngMocks) {\n    (mockDef.set as any).__ngMocksSet((val: any) => (mockDef.get as any).__ngMocksGet(val));\n  }\n\n  Object.defineProperty(instance, name, mockDef);\n\n  return mock;\n};\n","import { NG_MOCKS_GUARDS, NG_MOCKS_RESOLVERS } from '../common/core.tokens';\nimport { isNgDef } from '../common/func.is-ng-def';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nconst handleSection = (section: any[]) => {\n  const guards: any[] = [];\n\n  for (const guard of section) {\n    if (!ngMocksUniverse.isProvidedDef(guard) && ngMocksUniverse.isExcludedDef(NG_MOCKS_GUARDS)) {\n      continue;\n    }\n\n    guards.push(guard);\n    if (!isNgDef(guard)) {\n      ngMocksUniverse.touches.add(guard);\n    }\n  }\n\n  return guards;\n};\n\nconst handleArray = (cache: Map<any, any>, value: any[], callback: any): [boolean, any[]] => {\n  const mock: Array<any> = [];\n  let updated = false;\n  cache.set(value, mock);\n\n  for (const valueItem of value) {\n    if (ngMocksUniverse.isExcludedDef(valueItem)) {\n      updated = updated || true;\n      continue;\n    }\n    mock.push(callback(valueItem, cache));\n    updated = updated || mock[mock.length - 1] !== valueItem;\n  }\n\n  return [updated, mock];\n};\n\nconst handleItemKeys = ['canActivate', 'canActivateChild', 'canDeactivate', 'canMatch', 'canLoad'];\nconst handleItemGetGuards = (mock: any, section: string) =>\n  Array.isArray(mock[section]) ? handleSection(mock[section]) : mock[section];\n\nconst handleItem = (\n  cache: Map<any, any>,\n  value: Record<keyof any, any>,\n  callback: any,\n): [boolean, Record<keyof any, any>] => {\n  let mock: Record<keyof any, any> = {};\n  let updated = false;\n  cache.set(value, mock);\n\n  for (const key of Object.keys(value)) {\n    if (ngMocksUniverse.isExcludedDef(value[key])) {\n      updated = updated || true;\n      continue;\n    }\n    mock[key] = callback(value[key], cache);\n    updated = updated || mock[key] !== value[key];\n  }\n\n  // Removal of guards.\n  for (const section of handleItemKeys) {\n    const guards: any[] = handleItemGetGuards(mock, section);\n    if (guards && mock[section].length !== guards.length) {\n      updated = updated || true;\n      mock = { ...mock, [section]: guards };\n    }\n  }\n\n  // Removal of resolvers.\n  if (typeof mock.resolve === 'object' && mock.resolve) {\n    const resolve: any = {};\n    let resolveUpdated = false;\n    for (const key of Object.keys(mock.resolve)) {\n      const resolver = mock.resolve[key];\n      if (!ngMocksUniverse.isProvidedDef(resolver) && ngMocksUniverse.isExcludedDef(NG_MOCKS_RESOLVERS)) {\n        resolveUpdated = resolveUpdated || true;\n        continue;\n      }\n      resolve[key] = resolver;\n      if (!isNgDef(resolver)) {\n        ngMocksUniverse.touches.add(resolver);\n      }\n    }\n    if (resolveUpdated) {\n      updated = updated || true;\n      mock = { ...mock, resolve };\n    }\n  }\n\n  return [updated, mock];\n};\n\nconst replaceWithMocks = (value: any, cache: Map<any, any>): any => {\n  if (ngMocksUniverse.cacheDeclarations.has(value)) {\n    return ngMocksUniverse.cacheDeclarations.get(value);\n  }\n  if (typeof value !== 'object') {\n    return value;\n  }\n  if (cache.has(value)) {\n    return value;\n  }\n\n  let mock: any;\n  let updated = false;\n\n  if (Array.isArray(value)) {\n    [updated, mock] = handleArray(cache, value, replaceWithMocks);\n  } else if (value) {\n    [updated, mock] = handleItem(cache, value, replaceWithMocks);\n  }\n\n  if (updated) {\n    Object.setPrototypeOf(mock, Object.getPrototypeOf(value));\n\n    return mock;\n  }\n\n  return value;\n};\n\nconst replaceWithMocksWrapper = (value: any) => {\n  const cache = new Map();\n  const result = replaceWithMocks(value, cache);\n  cache.clear();\n\n  return result;\n};\n\nexport default (() => replaceWithMocksWrapper)();\n","import CoreDefStack from '../common/core.def-stack';\nimport { extractDependency } from '../common/core.helpers';\nimport { NG_MOCKS_INTERCEPTORS } from '../common/core.tokens';\nimport funcExtractForwardRef from '../common/func.extract-forward-ref';\nimport funcGetType from '../common/func.get-type';\nimport { isNgInjectionToken } from '../common/func.is-ng-injection-token';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nimport helperMockService from './helper.mock-service';\nimport mockProvider from './mock-provider';\n\nconst anyDiffers = (a: any, b: any, ...keys: string[]): boolean => {\n  for (const key of keys) {\n    if (a[key] !== b[key]) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nconst createFromResolution = (provide: any, resolution: any) => {\n  let mockDef = resolution;\n\n  const existingMock = ngMocksUniverse.builtProviders.get(provide);\n  if (existingMock) {\n    mockDef = existingMock;\n  }\n\n  // A case when a provider is actually a component, directive, pipe.\n  if (typeof mockDef === 'function') {\n    mockDef = {\n      provide,\n      useClass: mockDef,\n    };\n  }\n\n  return mockDef;\n};\n\nconst isSuitableProvider = (provider: any, provide: any): boolean =>\n  ngMocksUniverse.builtProviders.has(NG_MOCKS_INTERCEPTORS) &&\n  ngMocksUniverse.builtProviders.get(NG_MOCKS_INTERCEPTORS) === null &&\n  isNgInjectionToken(provide) &&\n  provide.toString() === 'InjectionToken HTTP_INTERCEPTORS' &&\n  provide !== provider;\n\nconst excludeInterceptors = (provider: any, provide: any): boolean => {\n  if (isSuitableProvider(provider, provide)) {\n    if (provider.useFactory || provider.useValue) {\n      return true;\n    }\n    const interceptor = funcExtractForwardRef(provider.useExisting) || provider.useClass;\n    if (!ngMocksUniverse.builtProviders.has(interceptor) || ngMocksUniverse.builtProviders.get(interceptor) === null) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nconst parseProvider = (\n  provider: any,\n  callback: any,\n): {\n  change: () => void;\n  multi: boolean;\n  provide: any;\n} => {\n  const provide = funcGetType(provider);\n  const multi = provider !== provide && !!provider.multi;\n\n  return {\n    change: () => {\n      if (callback) {\n        callback();\n      }\n    },\n    multi,\n    provide,\n  };\n};\n\n// if the provider is a value, we need to go through the value and to replace all mock instances.\nconst replaceWithMocks = (provider: any, provide: any, mockDef: any) => {\n  if (provide !== provider && mockDef && mockDef.useValue) {\n    const useValue = helperMockService.replaceWithMocks(mockDef.useValue);\n\n    return useValue === mockDef.useValue\n      ? mockDef\n      : {\n          ...mockDef,\n          useValue,\n        };\n  }\n\n  return mockDef;\n};\n\nconst createPredefinedMockProvider = (provider: any, provide: any): any => {\n  // Then we check decisions whether we should keep or replace a provider.\n  if (ngMocksUniverse.builtProviders.has(provide)) {\n    const mockDef = ngMocksUniverse.builtProviders.get(provide);\n    if (mockDef === provide) {\n      return provider;\n    }\n\n    return mockDef;\n  }\n\n  return undefined;\n};\n\nconst createMockProvider = (provider: any, provide: any, change: () => void) => {\n  let mockDef = createPredefinedMockProvider(provider, provide);\n\n  if (!mockDef && ngMocksUniverse.flags.has('skipMock') && ngMocksUniverse.getResolution(provide) !== 'mock') {\n    ngMocksUniverse.config.get('ngMocksDepsSkip')?.add(provide);\n    mockDef = provider;\n  }\n  if (!mockDef) {\n    mockDef = mockProvider(provider);\n  }\n\n  mockDef = replaceWithMocks(provider, provide, mockDef);\n  if (!areEqualDefs(mockDef, provider, provide)) {\n    change();\n  }\n  // Touching only when we really provide a value.\n  if (mockDef) {\n    ngMocksUniverse.touches.add(provide);\n  }\n\n  return mockDef;\n};\n\nconst areEqualDefs = (mockDef: any, provider: any, provide: any): boolean => {\n  let providerDiffers = false;\n  let defDiffers = !mockDef;\n  if (provider && mockDef && !defDiffers) {\n    defDiffers = anyDiffers(provider, mockDef, 'provide', 'useValue', 'useClass', 'useExisting', 'useFactory', 'deps');\n  }\n  if (provider === provide && mockDef !== provider) {\n    providerDiffers = true;\n  } else if (provider !== provide && defDiffers) {\n    providerDiffers = true;\n  }\n\n  return !providerDiffers;\n};\n\nconst isPreconfiguredDependency = (provider: any, provide: any): boolean => {\n  //  we should not touch excluded providers.\n  if (ngMocksUniverse.builtProviders.get(provide) === null) {\n    return true;\n  }\n\n  if (provide !== provider && provider.deps) {\n    extractDependency(provider.deps, ngMocksUniverse.config.get('ngMocksDeps'));\n  }\n\n  return excludeInterceptors(provider, provide);\n};\n\nconst isPreconfiguredUseExisting = (provider: any, provide: any): boolean => {\n  //  we should not touch non-useExisting providers.\n  if (!provider || typeof provider !== 'object' || !provider.useExisting) {\n    return false;\n  }\n  if (provider.useExisting.mockOf) {\n    return true;\n  }\n\n  // skipping explicit declarations (not internally processed)\n  if (ngMocksUniverse.getResolution(provide) && !ngMocksUniverse.config.get(provide)?.__internal) {\n    return false;\n  }\n\n  return ngMocksUniverse.getResolution(funcExtractForwardRef(provider.useExisting)) === 'keep';\n};\n\n// tries to resolve a provider based on current universe state.\nexport default (provider: any, resolutions: CoreDefStack<any, any>, changed?: () => void) => {\n  const { provide, multi, change } = parseProvider(provider, changed);\n  if (isPreconfiguredDependency(provider, provide)) {\n    return change();\n  }\n  if (isPreconfiguredUseExisting(provider, provide)) {\n    ngMocksUniverse.touches.add(provide);\n\n    return provider;\n  }\n  if (resolutions.has(provide)) {\n    return createFromResolution(provide, resolutions.get(provide));\n  }\n\n  const mockDef = createMockProvider(provider, provide, change);\n\n  return multi && typeof mockDef === 'object' ? { ...mockDef, multi } : mockDef;\n};\n","import { FactoryProvider, Injector } from '@angular/core';\n\nimport { mapValues } from '../common/core.helpers';\nimport { isNgInjectionToken } from '../common/func.is-ng-injection-token';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\nimport mockHelperStub from '../mock-helper/mock-helper.stub';\nimport mockInstanceApply from '../mock-instance/mock-instance-apply';\n\nimport { MockService } from './mock-service';\n\nconst applyCallbackToken = (def: any): boolean => isNgInjectionToken(def) || typeof def === 'string';\n\nconst applyCallback = (def: any, inst: any, callbacks: any[], injector?: Injector, overrides?: any): void => {\n  let instance: any = inst;\n\n  for (const callback of callbacks) {\n    const override = callback(instance, injector);\n    if (applyCallbackToken(def)) {\n      instance = override;\n      continue;\n    }\n\n    // overrides return real value.\n    if (callback === overrides) {\n      instance = override;\n      continue;\n    }\n\n    if (!override) {\n      continue;\n    }\n\n    instance = mockHelperStub(instance, override);\n  }\n\n  return instance;\n};\n\nexport default <D, I>(\n  def: D,\n  init?: () => I,\n  overrides?: (instance: I, injector: Injector) => I | Partial<I>,\n): FactoryProvider => ({\n  deps: [Injector],\n  provide: def,\n  useFactory: (injector?: Injector) => {\n    const instance = init ? init() : MockService(def as any);\n\n    const configGlobal: Set<any> | undefined = ngMocksUniverse.getOverrides().get(def);\n    const callbacks = configGlobal ? mapValues(configGlobal) : [];\n    if (overrides) {\n      callbacks.push(overrides);\n    }\n    callbacks.push(...mockInstanceApply(def));\n\n    return applyCallback(def, instance, callbacks, injector, overrides);\n  },\n});\n","import { Provider } from '@angular/core';\n\nimport coreConfig from '../common/core.config';\nimport { Type } from '../common/core.types';\nimport funcGetType from '../common/func.get-type';\nimport { isNgInjectionToken } from '../common/func.is-ng-injection-token';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nimport helperDefinePropertyDescriptor from './helper.define-property-descriptor';\nimport helperExtractPropertyDescriptor from './helper.extract-property-descriptor';\nimport helperUseFactory from './helper.use-factory';\nimport { MockService } from './mock-service';\n\nconst { neverMockProvidedFunction, neverMockToken } = coreConfig;\n\nconst applyMissingClassProperties = (instance: any, useClass: Type<any>) => {\n  const existing = Object.getOwnPropertyNames(instance);\n  const child = MockService(useClass);\n\n  for (const name of Object.getOwnPropertyNames(child)) {\n    if (existing.indexOf(name) !== -1) {\n      continue;\n    }\n    const def = helperExtractPropertyDescriptor(child, name);\n    helperDefinePropertyDescriptor(instance, name, def);\n  }\n};\n\nconst createFactoryProvider = (provider: any, provide: any) =>\n  helperUseFactory(provide, () => {\n    const instance = MockService(provide);\n    // Magic below adds missed properties to the instance to\n    // fulfill missed abstract methods.\n    if (provide !== provider && Object.keys(provider).indexOf('useClass') !== -1) {\n      applyMissingClassProperties(instance, provider.useClass);\n    }\n\n    return instance;\n  });\n\nconst normalizePrimitivesMap: Array<[(value: any) => boolean, any]> = [\n  [value => typeof value === 'boolean', false],\n  [value => typeof value === 'number', 0],\n  [value => typeof value === 'string', ''],\n  [value => value === null, null],\n];\n\nconst normalizePrimitives = (value: any): any => {\n  for (const [check, result] of normalizePrimitivesMap) {\n    if (check(value)) {\n      return result;\n    }\n  }\n\n  return undefined;\n};\n\nconst createValueProvider = (provider: any, provide: any) =>\n  helperUseFactory(provide, () =>\n    provider.useValue && typeof provider.useValue === 'object'\n      ? MockService(provider.useValue)\n      : normalizePrimitives(provider.useValue),\n  );\n\nconst createClassProvider = (provider: any, provide: any) =>\n  ngMocksUniverse.builtProviders.has(provider.useClass) &&\n  ngMocksUniverse.builtProviders.get(provider.useClass) === provider.useClass\n    ? provider\n    : helperUseFactory(provide, () => MockService(provider.useClass));\n\nconst createMockProvider = (provider: any, provide: any, cacheProviders?: Map<any, any>): Provider | undefined => {\n  let mockProvider: Provider | undefined;\n  if (typeof provide === 'function') {\n    mockProvider = createFactoryProvider(provider, provide);\n  }\n  if (provide === provider && mockProvider && cacheProviders) {\n    cacheProviders.set(provide, mockProvider);\n  }\n\n  return mockProvider;\n};\n\n// Tokens are special subject, we can skip adding them because in a mock module they are useless.\n// The main problem is that providing undefined to HTTP_INTERCEPTORS and others breaks their code.\n// If a testing module / component requires omitted tokens then they should be provided manually\n// during creation of TestBed module.\nconst handleProvider = (provider: any, provide: any, useFactory: boolean) => {\n  if (provide === provider) {\n    return useFactory ? helperUseFactory(provider, () => undefined) : undefined;\n  }\n  if (provider.multi) {\n    ngMocksUniverse.config.get('ngMocksMulti')?.add(provide);\n\n    return undefined;\n  }\n\n  let mockProvider: any;\n  // istanbul ignore else\n  if (Object.keys(provider).indexOf('useValue') !== -1) {\n    mockProvider = createValueProvider(provider, provide);\n  } else if (Object.keys(provider).indexOf('useExisting') !== -1) {\n    mockProvider = provider;\n  } else if (Object.keys(provider).indexOf('useClass') !== -1) {\n    mockProvider = createClassProvider(provider, provide);\n  } else if (Object.keys(provider).indexOf('useFactory') !== -1) {\n    mockProvider = helperUseFactory(provide, () => ({}));\n  }\n\n  return mockProvider;\n};\n\nconst isNeverMockFunction = (provide: any): boolean =>\n  typeof provide === 'function' && neverMockProvidedFunction.indexOf(provide.name) !== -1;\n\nconst isNeverMockToken = (provide: any): boolean =>\n  isNgInjectionToken(provide) && neverMockToken.indexOf(provide.toString()) !== -1;\n\nexport default (provider: any, useFactory = false): Provider | undefined => {\n  const provide = funcGetType(provider);\n\n  if (ngMocksUniverse.getResolution(provide) === 'mock') {\n    // nothing to do\n  } else if (isNeverMockFunction(provide)) {\n    return provider;\n  } else if (isNeverMockToken(provide)) {\n    return undefined;\n  }\n\n  // Only pure provides should be cached to avoid their influence on\n  // another different declarations.\n  const cacheProviders = ngMocksUniverse.flags.has('cacheProvider')\n    ? ngMocksUniverse.cacheProviders\n    : /* istanbul ignore next */ undefined;\n  if (provide === provider && cacheProviders && cacheProviders.has(provide)) {\n    return cacheProviders.get(provide);\n  }\n\n  return createMockProvider(provider, provide, cacheProviders) || handleProvider(provider, provide, useFactory);\n};\n","import { AnyType } from '../common/core.types';\nimport funcGetName from '../common/func.get-name';\nimport mockHelperStub from '../mock-helper/mock-helper.stub';\n\nimport checkIsClass from './check.is-class';\nimport checkIsFunc from './check.is-func';\nimport checkIsInst from './check.is-inst';\nimport helperMockService from './helper.mock-service';\n\ntype MockServiceHandler = (cache: Map<any, any>, service: any, prefix?: string, overrides?: any) => any;\n\nconst mockVariableMap: Array<[(def: any) => boolean, MockServiceHandler]> = [\n  [\n    checkIsClass,\n    (cache, service) => {\n      const value = helperMockService.createMockFromPrototype(service.prototype);\n      cache.set(service, value);\n\n      return value;\n    },\n  ],\n  [\n    checkIsFunc,\n    (cache, service, prefix) => {\n      const value = helperMockService.mockFunction(`func:${prefix || funcGetName(service)}`);\n      cache.set(service, value());\n\n      return value;\n    },\n  ],\n  [def => Array.isArray(def), () => []],\n  [\n    checkIsInst,\n    (cache, service, prefix, callback) => {\n      const value = helperMockService.createMockFromPrototype(service.constructor.prototype);\n      cache.set(service, value);\n      for (const property of Object.keys(service)) {\n        const mock: any = callback(cache, service[property], `${prefix || 'instance'}.${property}`);\n        if (mock !== undefined) {\n          value[property] = mock;\n        }\n      }\n      Object.setPrototypeOf(value, Object.getPrototypeOf(service));\n\n      return value;\n    },\n  ],\n];\n\nconst mockVariable = (cache: Map<any, any>, service: any, prefix: string, callback: MockServiceHandler) => {\n  for (const [check, createMock] of mockVariableMap) {\n    if (!check(service)) {\n      continue;\n    }\n\n    return cache.get(service) ?? createMock(cache, service, prefix, callback);\n  }\n};\n\n/**\n * Mocking all methods / properties of a class / object.\n */\nconst mockService: MockServiceHandler = (cache, service, prefix = '', overrides): any => {\n  const value: any = mockVariable(cache, service, prefix, mockService);\n\n  if (overrides) {\n    mockHelperStub(value, overrides);\n  }\n\n  return value;\n};\n\n/**\n * MockService creates a mock instance out of an object or a class.\n * Primitives are converted to undefined.\n *\n * @see https://ng-mocks.sudo.eu/api/MockService\n */\nexport function MockService(service: boolean | number | string | null | undefined): undefined;\n\n/**\n * MockService creates a mock instance out of an object or a class.\n *\n * @see https://ng-mocks.sudo.eu/api/MockService\n *\n * ```ts\n * const service = MockService(AuthService);\n * service.login(); // does nothing, it's dummy.\n */\nexport function MockService<T>(service: AnyType<T>, spyNamePrefix?: string): T;\n\n/**\n * MockService creates a mock instance out of an object or a class.\n *\n * @see https://ng-mocks.sudo.eu/api/MockService\n *\n * ```ts\n * const mockUser = MockService(currentUser);\n * mockUser.save(); // does nothing, it's dummy.\n */\nexport function MockService<T = any>(service: object, spyNamePrefix?: string): T;\n\n/**\n * MockService creates a mock instance out of an object or a class.\n * The second parameter can be used as overrides.\n *\n * @see https://ng-mocks.sudo.eu/api/MockService\n *\n * ```ts\n * const service = MockService(AuthService, {\n *   loggedIn: true,\n * });\n * service.login(); // does nothing, it's dummy.\n * ```\n */\nexport function MockService<T>(service: AnyType<T>, overrides?: Partial<T>, spyNamePrefix?: string): T;\n\nexport function MockService(service: any, ...args: any[]): any {\n  const prefix = args.length > 0 && typeof args[0] === 'string' ? args[0] : args[1];\n  const overrides = args.length > 0 && args[0] && typeof args[0] === 'object' ? args[0] : undefined;\n\n  const cache = new Map();\n  const result = mockService(cache, service, prefix, overrides);\n  cache.clear();\n\n  return result;\n}\n","import { Provider } from '@angular/core';\n\nimport CoreDefStack from '../common/core.def-stack';\nimport coreForm from '../common/core.form';\nimport { flatten } from '../common/core.helpers';\nimport { AnyType } from '../common/core.types';\nimport funcExtractForwardRef from '../common/func.extract-forward-ref';\nimport funcGetType from '../common/func.get-type';\nimport {\n  MockAsyncValidatorProxy,\n  MockControlValueAccessorProxy,\n  MockValidatorProxy,\n} from '../common/mock-control-value-accessor-proxy';\nimport helperMockService from '../mock-service/helper.mock-service';\n\nimport toExistingProvider from './to-existing-provider';\nimport toFactoryProvider from './to-factory-provider';\n\nconst processTokens = (mockType: AnyType<any>, provider: any) => {\n  const provide = funcGetType(provider);\n  if (coreForm.NG_VALIDATORS && provide === coreForm.NG_VALIDATORS) {\n    return toFactoryProvider(provide, () => new MockValidatorProxy(mockType));\n  }\n  if (coreForm.NG_ASYNC_VALIDATORS && provide === coreForm.NG_ASYNC_VALIDATORS) {\n    return toFactoryProvider(provide, () => new MockAsyncValidatorProxy(mockType));\n  }\n  if (coreForm.NG_VALUE_ACCESSOR && provide === coreForm.NG_VALUE_ACCESSOR) {\n    return toFactoryProvider(provide, () => new MockControlValueAccessorProxy(mockType));\n  }\n\n  return undefined;\n};\n\nconst processOwnUseExisting = (sourceType: AnyType<any>, mockType: AnyType<any>, provider: any) => {\n  const provide = funcGetType(provider);\n\n  // Check tests/issue-302/test.spec.ts\n  if (provide === coreForm.NgControl || provide === coreForm.FormControlDirective) {\n    return undefined;\n  }\n\n  if (provider !== provide && funcExtractForwardRef(provider.useExisting) === sourceType) {\n    return toExistingProvider(provide, mockType);\n  }\n\n  return undefined;\n};\n\nconst processProvider = (\n  sourceType: AnyType<any>,\n  mockType: AnyType<any>,\n  provider: any,\n  resolutions: CoreDefStack<any, any>,\n): any => {\n  const token = processTokens(mockType, provider);\n  if (token) {\n    return token;\n  }\n\n  const ownUseExisting = processOwnUseExisting(sourceType, mockType, provider);\n  if (ownUseExisting) {\n    return ownUseExisting;\n  }\n\n  return helperMockService.resolveProvider(provider, resolutions);\n};\n\nexport default (\n  sourceType: AnyType<any>,\n  mockType: AnyType<any>,\n  providers: any[],\n  resolutions: CoreDefStack<any, any>,\n): {\n  providers: Provider[];\n  setControlValueAccessor?: boolean;\n} => {\n  const result: Provider[] = [];\n  let setControlValueAccessor: boolean | undefined;\n\n  for (const provider of flatten(providers || /* istanbul ignore next */ [])) {\n    const provide = funcGetType(provider);\n    if (provide === coreForm.NG_VALUE_ACCESSOR) {\n      setControlValueAccessor = false;\n    }\n    const mock = processProvider(sourceType, mockType, provider, resolutions);\n    if (mock) {\n      result.push(mock);\n    }\n  }\n\n  return {\n    providers: result,\n    setControlValueAccessor,\n  };\n};\n","import { Component, Directive, NgModule, ViewChild } from '@angular/core';\n\nimport CoreDefStack from '../common/core.def-stack';\nimport { AnyType, DirectiveIo } from '../common/core.types';\nimport decorateInputs from '../common/decorate.inputs';\nimport decorateMock from '../common/decorate.mock';\nimport decorateOutputs from '../common/decorate.outputs';\nimport decorateQueries from '../common/decorate.queries';\nimport { ngMocksMockConfig } from '../common/mock';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\nimport mockNgDef from '../mock-module/mock-ng-def';\nimport helperMockService from '../mock-service/helper.mock-service';\n\nimport cloneProviders from './clone-providers';\nimport toExistingProvider from './to-existing-provider';\n\nconst buildConfig = (\n  source: AnyType<any>,\n  meta: {\n    inputs?: Array<DirectiveIo>;\n    outputs?: Array<DirectiveIo>;\n    providers?: NgModule['providers'];\n    queries?: Record<string, ViewChild>;\n  },\n  setControlValueAccessor: boolean,\n) => {\n  return {\n    config: ngMocksUniverse.config.get(source),\n    outputs: meta.outputs,\n    queryScanKeys: [],\n    setControlValueAccessor: setControlValueAccessor,\n  };\n};\n\nexport default <T extends Component & Directive>(\n  source: AnyType<any>,\n  mock: AnyType<any>,\n  meta: Component &\n    Directive &\n    NgModule & {\n      hostBindings?: Array<[string, any]>;\n      hostListeners?: Array<[string, any, any]>;\n      hostDirectives?: Array<AnyType<any> | { directive: AnyType<any> }>;\n      imports?: any[];\n      standalone?: boolean;\n    },\n  params: T,\n): Component & Directive => {\n  const hasResolver = ngMocksUniverse.config.has('mockNgDefResolver');\n  if (!hasResolver) {\n    ngMocksUniverse.config.set('mockNgDefResolver', new CoreDefStack());\n  }\n\n  const options: T & { imports?: any[]; hostDirectives?: any[]; standalone?: boolean } = {\n    ...params,\n  };\n\n  if (meta.exportAs !== undefined) {\n    options.exportAs = meta.exportAs;\n  }\n  if (meta.selector !== undefined) {\n    options.selector = meta.selector;\n  }\n  if (meta.standalone !== undefined) {\n    options.standalone = meta.standalone;\n  }\n\n  if (meta.standalone && meta.imports) {\n    const [, { imports }] = mockNgDef({ imports: meta.imports, skipExports: true });\n    if (imports?.length) {\n      options.imports = imports as never;\n    }\n  }\n\n  if (meta.hostDirectives) {\n    const [, { hostDirectives }] = mockNgDef({ hostDirectives: meta.hostDirectives, skipExports: true });\n    if (hostDirectives?.length) {\n      options.hostDirectives = hostDirectives;\n    }\n  }\n\n  const { setControlValueAccessor, providers } = cloneProviders(\n    source,\n    mock,\n    meta.providers || [],\n    ngMocksUniverse.config.get('mockNgDefResolver'),\n  );\n  providers.push(toExistingProvider(source, mock));\n  options.providers = providers;\n\n  const { providers: viewProviders } = cloneProviders(\n    source,\n    mock,\n    meta.viewProviders || [],\n    ngMocksUniverse.config.get('mockNgDefResolver'),\n  );\n  if (viewProviders.length > 0) {\n    options.viewProviders = viewProviders;\n  }\n\n  const config: ngMocksMockConfig = buildConfig(\n    source,\n    meta,\n    setControlValueAccessor ??\n      helperMockService.extractMethodsFromPrototype(source.prototype).indexOf('writeValue') !== -1,\n  );\n  decorateMock(mock, source, config);\n\n  // istanbul ignore else\n  if (meta.queries) {\n    decorateInputs(mock, meta.inputs, Object.keys(meta.queries));\n  }\n  decorateOutputs(mock, meta.outputs);\n  config.queryScanKeys = decorateQueries(mock, meta.queries);\n\n  config.hostBindings = [];\n  for (const [key] of meta.hostBindings || /* istanbul ignore next */ []) {\n    // mock declarations should not have side effects based on host bindings.\n    // HostBinding(...args)(mock.prototype, key);\n    if (config.hostBindings.indexOf(key) === -1) {\n      config.hostBindings.push(key);\n    }\n  }\n\n  config.hostListeners = [];\n  for (const [key] of meta.hostListeners || /* istanbul ignore next */ []) {\n    // mock declarations should not have side effects based on host bindings.\n    // HostListener(...args)(mock.prototype, key);\n    if (config.hostListeners.indexOf(key) === -1) {\n      config.hostListeners.push(key);\n    }\n  }\n\n  if (!hasResolver) {\n    ngMocksUniverse.config.delete('mockNgDefResolver');\n  }\n\n  return options;\n};\n","import { extendClass } from '../common/core.helpers';\nimport funcImportExists from '../common/func.import-exists';\nimport { isMockNgDef } from '../common/func.is-mock-ng-def';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nimport returnCachedMock from './return-cached-mock';\n\nexport default (def: any, type: any, func: string, cacheFlag: string, base: any, decorator: any) => {\n  funcImportExists(def, func);\n\n  if (isMockNgDef(def, type)) {\n    return def;\n  }\n\n  if (ngMocksUniverse.flags.has(cacheFlag) && ngMocksUniverse.cacheDeclarations.has(def)) {\n    return returnCachedMock(def);\n  }\n\n  const hasNgMocksDepsResolution = ngMocksUniverse.config.has('ngMocksDepsResolution');\n  if (!hasNgMocksDepsResolution) {\n    ngMocksUniverse.config.set('ngMocksDepsResolution', new Map());\n  }\n\n  const mock = extendClass(base);\n  decorator(def, mock);\n\n  // istanbul ignore else\n  if (ngMocksUniverse.flags.has(cacheFlag)) {\n    ngMocksUniverse.cacheDeclarations.set(def, mock);\n  }\n\n  if (!hasNgMocksDepsResolution) {\n    ngMocksUniverse.config.delete('ngMocksDepsResolution');\n  }\n\n  return mock as any;\n};\n","import { NG_MOCKS } from '../common/core.tokens';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\nimport funcGetLastFixture from '../mock-helper/func.get-last-fixture';\n\nexport default (declaration: any) => {\n  let result: any;\n\n  try {\n    result = funcGetLastFixture().debugElement.injector.get(NG_MOCKS).get(declaration);\n  } catch {\n    // nothing to do.\n  }\n\n  if (!result) {\n    result = ngMocksUniverse.cacheDeclarations.get(declaration);\n  }\n\n  if (declaration.__ngMocksResolutions && ngMocksUniverse.config.has('mockNgDefResolver')) {\n    ngMocksUniverse.config.get('mockNgDefResolver').merge(declaration.__ngMocksResolutions);\n  }\n\n  return result;\n};\n","import { AnyType } from '../common/core.types';\n\nexport default (provide: AnyType<any>, useExisting: AnyType<any>) => ({\n  provide,\n  useExisting,\n});\n","import { AnyType } from '../common/core.types';\n\nexport default (provide: AnyType<any>, useFactory: any) => ({\n  multi: true,\n  provide,\n  useFactory,\n});\n","import { ɵReflectionCapabilities as ReflectionCapabilities } from '@angular/core';\n\nimport coreDefineProperty from '../common/core.define-property';\nimport { AnyDeclaration, DirectiveIo } from '../common/core.types';\nimport funcDirectiveIoBuild from '../common/func.directive-io-build';\nimport funcDirectiveIoParse from '../common/func.directive-io-parse';\n\ninterface Declaration {\n  host: Record<string, string | undefined>;\n  hostBindings: Array<[string, string?, ...any[]]>;\n  hostListeners: Array<[string, string?, ...any[]]>;\n  attributes: string[];\n  inputs: Array<DirectiveIo>;\n  outputs: Array<DirectiveIo>;\n  propDecorators: Record<string, any[]>;\n  queries: Record<string, any>;\n  decorators: Array<'Injectable' | 'Pipe' | 'Directive' | 'Component' | 'NgModule'>;\n  [key: string]: any;\n}\n\nconst pushDecorator = (decorators: string[], decorator: string): void => {\n  const deleteIndex = decorators.indexOf(decorator);\n  if (deleteIndex !== -1) {\n    decorators.splice(deleteIndex, 1);\n  }\n  if (\n    decorator === 'Injectable' ||\n    decorator === 'Pipe' ||\n    decorator === 'Directive' ||\n    decorator === 'Component' ||\n    decorator === 'NgModule'\n  ) {\n    decorators.push(decorator);\n  }\n};\n\nconst getAllKeys = <T extends Record<keyof any, any>>(instance: T): Array<keyof T> => {\n  const props: string[] = [];\n  for (const key of Object.keys(instance)) {\n    props.push(key);\n  }\n\n  return props as never;\n};\n\nconst createDeclarations = (parent: Partial<Declaration>): Declaration => ({\n  host: parent.host ? { ...parent.host } : {},\n  hostBindings: parent.hostBindings ? [...parent.hostBindings] : [],\n  hostListeners: parent.hostListeners ? [...parent.hostListeners] : [],\n  attributes: parent.attributes ? [...parent.attributes] : [],\n  inputs: parent.inputs ? [...parent.inputs] : [],\n  outputs: parent.outputs ? [...parent.outputs] : [],\n  propDecorators: parent.propDecorators ? { ...parent.propDecorators } : {},\n  queries: parent.queries ? { ...parent.queries } : {},\n  decorators: parent.decorators ? [...parent.decorators] : [],\n});\n\nconst parseParameters = (\n  def: {\n    __parameters__?: Array<null | Array<\n      | {\n          attributeName: string;\n          ngMetadataName: 'Attribute';\n        }\n      | {\n          token: AnyDeclaration<any>;\n          ngMetadataName: 'Inject';\n        }\n      | {\n          ngMetadataName: 'Optional';\n        }\n    >>;\n  },\n  declaration: Declaration,\n): void => {\n  if (Object.prototype.hasOwnProperty.call(def, '__parameters__') && def.__parameters__) {\n    for (const decorators of def.__parameters__) {\n      for (const decorator of decorators || []) {\n        if (\n          decorator.ngMetadataName === 'Attribute' &&\n          declaration.attributes.indexOf(decorator.attributeName) === -1\n        ) {\n          declaration.attributes.push(decorator.attributeName);\n        }\n      }\n    }\n  }\n};\n\nconst parseAnnotations = (\n  def: {\n    __annotations__?: Array<{\n      ngMetadataName?: string;\n    }>;\n  },\n  declaration: Declaration,\n): void => {\n  if (Object.prototype.hasOwnProperty.call(def, '__annotations__') && def.__annotations__) {\n    for (const annotation of def.__annotations__) {\n      const ngMetadataName = annotation?.ngMetadataName;\n      if (!ngMetadataName) {\n        continue;\n      }\n      declaration[ngMetadataName] = { ...annotation, attributes: declaration.attributes };\n      pushDecorator(declaration.decorators, ngMetadataName);\n    }\n  }\n};\n\nconst parseDecorators = (\n  def: {\n    decorators?: Array<{\n      args?: [any];\n      type?: {\n        prototype?: {\n          ngMetadataName?: string;\n        };\n      };\n    }>;\n  },\n  declaration: Declaration,\n): void => {\n  if (Object.prototype.hasOwnProperty.call(def, 'decorators') && def.decorators) {\n    for (const decorator of def.decorators) {\n      const ngMetadataName = decorator?.type?.prototype?.ngMetadataName;\n      if (!ngMetadataName) {\n        continue;\n      }\n      declaration[ngMetadataName] = decorator.args ? { ...decorator.args[0] } : {};\n      pushDecorator(declaration.decorators, ngMetadataName);\n    }\n  }\n};\n\nconst parsePropMetadataParserFactoryProp =\n  (key: 'inputs' | 'outputs') =>\n  (\n    _: string,\n    name: string,\n    decorator: {\n      alias?: string;\n      required?: boolean;\n      bindingPropertyName?: string;\n    },\n    declaration: Declaration,\n  ): void => {\n    const { alias, required } = funcDirectiveIoParse({\n      name,\n      alias: decorator.alias ?? decorator.bindingPropertyName,\n      required: decorator.required,\n    });\n\n    const normalizedDef = funcDirectiveIoBuild({ name, alias, required });\n\n    let add = true;\n    for (const def of declaration[key]) {\n      if (def === normalizedDef) {\n        add = false;\n        break;\n      }\n\n      const { name: defName, alias: defAlias, required: defRequired } = funcDirectiveIoParse(def);\n      if (defName === name && defAlias === alias && defRequired === required) {\n        add = false;\n        break;\n      }\n    }\n\n    if (add) {\n      declaration[key].unshift(normalizedDef);\n    }\n  };\nconst parsePropMetadataParserInput = parsePropMetadataParserFactoryProp('inputs');\nconst parsePropMetadataParserOutput = parsePropMetadataParserFactoryProp('outputs');\n\nconst parsePropMetadataParserFactoryQueryChild =\n  (isViewQuery: boolean) =>\n  (\n    ngMetadataName: string,\n    prop: string,\n    decorator: {\n      read?: any;\n      selector: string;\n      static?: boolean;\n    },\n    declaration: Declaration,\n  ): void => {\n    if (!declaration.queries[prop]) {\n      declaration.queries[prop] = {\n        isViewQuery,\n        ngMetadataName,\n        selector: decorator.selector,\n        ...(decorator.read === undefined ? {} : { read: decorator.read }),\n        ...(decorator.static === undefined ? {} : { static: decorator.static }),\n      };\n    }\n  };\nconst parsePropMetadataParserContentChild = parsePropMetadataParserFactoryQueryChild(false);\nconst parsePropMetadataParserViewChild = parsePropMetadataParserFactoryQueryChild(true);\n\nconst parsePropMetadataParserFactoryQueryChildren =\n  (isViewQuery: boolean) =>\n  (\n    ngMetadataName: string,\n    prop: string,\n    decorator: {\n      descendants?: any;\n      emitDistinctChangesOnly?: boolean;\n      read?: any;\n      selector: string;\n    },\n    declaration: Declaration,\n  ): void => {\n    if (!declaration.queries[prop]) {\n      declaration.queries[prop] = {\n        isViewQuery,\n        ngMetadataName,\n        selector: decorator.selector,\n        ...(decorator.descendants === undefined ? {} : { descendants: decorator.descendants }),\n        ...(decorator.emitDistinctChangesOnly === undefined\n          ? {}\n          : { emitDistinctChangesOnly: decorator.emitDistinctChangesOnly }),\n        ...(decorator.read === undefined ? {} : { read: decorator.read }),\n      };\n    }\n  };\nconst parsePropMetadataParserContentChildren = parsePropMetadataParserFactoryQueryChildren(false);\nconst parsePropMetadataParserViewChildren = parsePropMetadataParserFactoryQueryChildren(true);\n\nconst parsePropMetadataParserHostBinding = (\n  _: string,\n  prop: string,\n  decorator: {\n    args?: any;\n    hostPropertyName?: string;\n  },\n  declaration: Declaration,\n): void => {\n  const key = `[${decorator.hostPropertyName || prop}]`;\n  if (!declaration.host[key]) {\n    declaration.host[key] = prop;\n  }\n  declaration.hostBindings.push([\n    prop,\n    decorator.hostPropertyName || prop,\n    ...(decorator.args ? [decorator.args] : []),\n  ]);\n};\n\nconst parsePropMetadataParserHostListener = (\n  _: string,\n  prop: string,\n  decorator: {\n    args?: any;\n    eventName?: string;\n  },\n  declaration: Declaration,\n): void => {\n  const key = `(${decorator.eventName || prop})`;\n  if (!declaration.host[key]) {\n    declaration.host[key] = `${prop}($event)`;\n  }\n  declaration.hostListeners.push([prop, decorator.eventName || prop, ...(decorator.args ? [decorator.args] : [])]);\n};\n\nconst parsePropMetadataMap: any = {\n  ContentChild: parsePropMetadataParserContentChild,\n  ContentChildren: parsePropMetadataParserContentChildren,\n  HostBinding: parsePropMetadataParserHostBinding,\n  HostListener: parsePropMetadataParserHostListener,\n  Input: parsePropMetadataParserInput,\n  Output: parsePropMetadataParserOutput,\n  ViewChild: parsePropMetadataParserViewChild,\n  ViewChildren: parsePropMetadataParserViewChildren,\n};\n\nconst parsePropMetadata = (\n  def: {\n    __prop__metadata__?: Record<keyof any, any[]>;\n  },\n  declaration: Declaration,\n): void => {\n  if (Object.prototype.hasOwnProperty.call(def, '__prop__metadata__') && def.__prop__metadata__) {\n    for (const prop of getAllKeys(def.__prop__metadata__)) {\n      const decorators: Array<{\n        ngMetadataName?: string;\n      }> = def.__prop__metadata__[prop];\n      for (const decorator of decorators) {\n        const ngMetadataName = decorator?.ngMetadataName;\n        if (!ngMetadataName) {\n          continue;\n        }\n        parsePropMetadataMap[ngMetadataName]?.(ngMetadataName, prop, decorator, declaration);\n      }\n    }\n  }\n};\n\nconst parsePropDecoratorsParserFactoryProp = (key: 'inputs' | 'outputs') => {\n  const callback = parsePropMetadataParserFactoryProp(key);\n  return (\n    _: string,\n    name: string,\n    decorator: {\n      args?: [DirectiveIo];\n    },\n    declaration: Declaration,\n  ): void => {\n    const { alias = undefined, required = undefined } =\n      typeof decorator.args?.[0] === 'undefined'\n        ? {}\n        : typeof decorator.args[0] === 'string'\n        ? { alias: decorator.args[0] }\n        : decorator.args[0];\n    callback(_, name, { alias, required, bindingPropertyName: alias }, declaration);\n  };\n};\nconst parsePropDecoratorsParserInput = parsePropDecoratorsParserFactoryProp('inputs');\nconst parsePropDecoratorsParserOutput = parsePropDecoratorsParserFactoryProp('outputs');\n\nconst parsePropDecoratorsParserFactoryQuery =\n  (isViewQuery: boolean) =>\n  (\n    ngMetadataName: string,\n    prop: string,\n    decorator: {\n      args: [string] | [string, any];\n    },\n    declaration: Declaration,\n  ): void => {\n    if (!declaration.queries[prop]) {\n      declaration.queries[prop] = {\n        isViewQuery,\n        ngMetadataName,\n        selector: decorator.args[0],\n        ...decorator.args[1],\n      };\n    }\n  };\nconst parsePropDecoratorsParserContent = parsePropDecoratorsParserFactoryQuery(false);\nconst parsePropDecoratorsParserView = parsePropDecoratorsParserFactoryQuery(true);\n\nconst parsePropDecoratorsParserHostBinding = (\n  _: string,\n  prop: string,\n  decorator: {\n    args?: [string] | [string, any[]];\n  },\n  declaration: Declaration,\n): void => {\n  const key = `[${decorator.args?.[0] || prop}]`;\n  if (!declaration.host[key]) {\n    declaration.host[key] = prop;\n  }\n  declaration.hostBindings.push([prop, ...(decorator.args || [])]);\n};\n\nconst parsePropDecoratorsParserHostListener = (\n  _: string,\n  prop: string,\n  decorator: {\n    args?: any[];\n  },\n  declaration: Declaration,\n): void => {\n  const key = `(${decorator.args?.[0] || prop})`;\n  if (!declaration.host[key]) {\n    declaration.host[key] = `${prop}($event)`;\n  }\n  declaration.hostListeners.push([prop, ...(decorator.args || [])]);\n};\n\nconst parsePropDecoratorsMap: any = {\n  ContentChild: parsePropDecoratorsParserContent,\n  ContentChildren: parsePropDecoratorsParserContent,\n  HostBinding: parsePropDecoratorsParserHostBinding,\n  HostListener: parsePropDecoratorsParserHostListener,\n  Input: parsePropDecoratorsParserInput,\n  Output: parsePropDecoratorsParserOutput,\n  ViewChild: parsePropDecoratorsParserView,\n  ViewChildren: parsePropDecoratorsParserView,\n};\n\nconst parsePropDecorators = (\n  def: {\n    propDecorators?: Record<\n      string,\n      Array<{\n        args: any;\n        type?: {\n          prototype?: {\n            ngMetadataName?: string;\n          };\n        };\n      }>\n    >;\n  },\n  declaration: Declaration,\n): void => {\n  if (Object.prototype.hasOwnProperty.call(def, 'propDecorators') && def.propDecorators) {\n    for (const prop of getAllKeys(def.propDecorators)) {\n      declaration.propDecorators[prop] = [...(declaration.propDecorators[prop] || []), ...def.propDecorators[prop]];\n      for (const decorator of def.propDecorators[prop]) {\n        const ngMetadataName = decorator?.type?.prototype?.ngMetadataName;\n        if (!ngMetadataName) {\n          continue;\n        }\n        parsePropDecoratorsMap[ngMetadataName]?.(ngMetadataName, prop, decorator, declaration);\n      }\n    }\n  }\n};\n\nconst buildDeclaration = (def: any | undefined, declaration: Declaration): void => {\n  if (def) {\n    def.inputs = def.inputs || [];\n    for (const input of declaration.inputs) {\n      if (def.inputs.indexOf(input) === -1) {\n        def.inputs.push(input);\n      }\n    }\n\n    def.outputs = def.outputs || [];\n    for (const output of declaration.outputs) {\n      if (def.outputs.indexOf(output) === -1) {\n        def.outputs.push(output);\n      }\n    }\n\n    def.queries = {\n      ...(def.queries || []),\n      ...declaration.queries,\n    };\n\n    def.hostBindings = declaration.hostBindings;\n    def.hostListeners = declaration.hostListeners;\n  }\n};\n\nconst reflectionCapabilities = new ReflectionCapabilities();\n\nconst parse = (def: any): any => {\n  if (typeof def !== 'function' && typeof def !== 'object') {\n    return {};\n  }\n\n  if (Object.prototype.hasOwnProperty.call(def, '__ngMocksParsed')) {\n    return def.__ngMocksDeclarations;\n  }\n\n  const parent = Object.getPrototypeOf(def);\n  const parentDeclarations = parent ? parse(parent) : {};\n  const declaration = createDeclarations(parentDeclarations);\n  coreDefineProperty(def, '__ngMocksParsed', true);\n  parseParameters(def, declaration);\n  parseAnnotations(def, declaration);\n  parseDecorators(def, declaration);\n  parsePropDecorators(def, declaration);\n  parsePropMetadata(def, declaration);\n  buildDeclaration(declaration.Directive, declaration);\n  buildDeclaration(declaration.Component, declaration);\n\n  coreDefineProperty(def, '__ngMocksDeclarations', {\n    ...parentDeclarations,\n    ...declaration,\n    parameters: reflectionCapabilities.parameters(def),\n  });\n\n  return def.__ngMocksDeclarations;\n};\n\nexport default ((): ((def: any) => Declaration) => parse)();\n","module.exports = __WEBPACK_EXTERNAL_MODULE__5848__;","module.exports = __WEBPACK_EXTERNAL_MODULE__8900__;","module.exports = __WEBPACK_EXTERNAL_MODULE__1087__;","module.exports = __WEBPACK_EXTERNAL_MODULE__7161__;","module.exports = __WEBPACK_EXTERNAL_MODULE__3046__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(9387);\n"],"names":["root","factory","exports","module","require","define","amd","a","i","this","__WEBPACK_EXTERNAL_MODULE__8900__","__WEBPACK_EXTERNAL_MODULE__1087__","__WEBPACK_EXTERNAL_MODULE__7161__","__WEBPACK_EXTERNAL_MODULE__5848__","__WEBPACK_EXTERNAL_MODULE__3046__","get","getTestBedInjection","getInjection","getMockedNgDefOf","getSourceOfMock","isMockControlValueAccessor","isMockNgDef","isMockOf","isMockValidator","isMockedNgDefOf","isNgDef","isNgInjectionToken","Mock","MockControlValueAccessor","MockValidator","LegacyControlValueAccessor","MockInstance","MockReset","MockBuilder","IMockBuilder","IMockBuilderConfig","IMockBuilderConfigAll","IMockBuilderConfigComponent","IMockBuilderConfigDirective","IMockBuilderConfigModule","IMockBuilderResult","MockModule","MockedModule","MockComponent","MockComponents","MockedComponent","MockDirective","MockDirectives","MockedDirective","MockPipe","MockPipes","MockedPipe","MockDeclaration","MockDeclarations","MockProvider","MockProviders","MockService","ngMocks","MockRender","MockRenderFactory","flags","mockRenderCacheSize","neverMockModule","neverMockProvidedFunction","neverMockToken","onMockBuilderMissingDependency","onMockInstanceRestoreNeed","onTestBedFlushNeed","dependencies","stack","push","Map","pop","has","key","length","set","value","merge","resolutions","mapEntries","instance","property","enumerable","definePropertyDescriptor","configurable","writable","AbstractControl","DefaultValueAccessor","FormControl","FormControlDirective","NG_ASYNC_VALIDATORS","NG_VALIDATORS","NG_VALUE_ACCESSOR","NgControl","NgModel","token","testBed","getTestBed","inject","flatten","values","result","Array","isArray","mapKeys","forEach","_","mapValues","destination","add","extractDependencyArray","deps","flag","name","ngMetadataName","undefined","extractDependency","dep","extendClassicClass","base","child","index","glb","ngMocksParent","eval","ngMocksResult","MockMiddleware","prototype","extendClass","parameters","defaultInjector","declaration","injector","callback","def","arg","Component","Directive","Error","NgModule","Pipe","providedIn","ngInjectableDef","NG_MOCKS","InjectionToken","NG_MOCKS_TOUCHES","NG_MOCKS_OVERRIDES","NG_MOCKS_GUARDS","NG_MOCKS_RESOLVERS","NG_MOCKS_INTERCEPTORS","NG_MOCKS_ROOT_PROVIDERS","cls","inputs","exclude","input","alias","required","indexOf","Input","mock","source","configInput","config","getConfigMock","outputs","output","Output","map","ContentChild","ContentChildren","ViewChild","ViewChildren","isInternalKey","cloneVcrQuery","query","read","ViewContainerRef","queries","final","scanKeys","Object","keys","isViewQuery","generateFinalQueries","decorator","selector","join","jest","skipName","param","split","v","trim","funcExtractDeps","meta","type","getNgType","field","item","provide","__forward_ref__","window","g","mockOf","mocks","cacheDeclarations","getMock","badCharacters","RegExp","_desc","constructor","replace","decorators","provider","isNgModuleDefWithProviders","ngModule","directive","funcName","getType","_isMockFunction","mockName","__annotations__","__ngMocksConfig","isControlValueAccessor","component","ngType","isValidator","__ngMocks","isModule","isNgType","isModuleCheck","isComponent","isComponentCheck","isDirective","isDirectiveCheck","isPipe","isPipeCheck","isInjectable","isInjectableCheck","offset","standalone","iterator","scanned","Set","applyProxy","proxy","method","storage","target","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","writeValue","MockControlValueAccessorProxy","registerOnValidatorChange","validate","control","MockValidatorProxy","Promise","resolve","MockAsyncValidatorProxy","__simulateChange","__simulateTouch","__simulateValidatorChange","installValidator","validators","validator","__ngMocksCtor","ngControl","queryScanKeys","hostBindings","hostListeners","valueAccessor","setControlValueAccessor","setValueAccessor","installValueAccessor","_rawValidators","_rawAsyncValidators","applyNgValueAccessor","mockOutputs","getOwnPropertyDescriptor","EventEmitter","applyOutputs","extractMethodsFromPrototype","extractPropertiesFromPrototype","prop","descriptor","extractPropertyDescriptor","applyPrototype","getPrototypeOf","applyMethods","applyProps","setPrototypeOf","configGlobal","getOverrides","callbacks","init","overrides","applyOverrides","Injector","Optional","Self","applyOverride","override","TestBed","overrideComponent","overrideDirective","overrideModule","overrideProvider","generateTouches","moduleDef","touches","hasOwnProperty","call","local","__ngMocksTouches","applyPlatformOverrideDef","ngMocksOverrides","original","applyPlatformOverridesBasedOnProvidedIn","configureTestingModule","ngMocksSelectors","useMockBuilder","providers","hasMocks","mockBuilder","finalModuleDef","builder","isMock","transform","options","export","exportAll","onRoot","keep","build","knownTouches","getDefaults","size","_providers","_compiler","useValue","defineTouches","flushTestBed","_instantiated","_testModuleRef","backup","applyPlatformOverridesBasedOnDefaults","applyPlatformOverrides","resetTestingModule","global","delete","applyNgMocksOverrides","patchVcrInstance","vcrInstance","ngMocksOverridesPatched","createComponent","patchedCreateComponent","apply","createComponentArgs","installInjector","__ngMocksInjector","injectorGet","argsGet","slice","ngMocksOverridesInstalled","hooks","vcr","__NG_ELEMENT_ID__","ngElementIdArgs","fixture","debugElement","viewContainerInstall","before","after","create","argsCreate","install","stackRoot","id","level","listenersPush","listenersPop","current","stackPop","state","stackPush","subscribePop","subscribePush","unsubscribePop","splice","unsubscribePush","globalMap","ngMocksUniverse","builtDeclarations","builtProviders","cacheProviders","configInstance","defValue","getResolution","getBuildDeclaration","mode","replacement","hasBuildDeclaration","isExcludedDef","resolution","isProvidedDef","indexValue","data","restore","MockBuilderStash","equalsTo","clone","cloneConfig","then","fulfill","reject","console","warn","promise","beforeCC","excludeDef","keepDef","mockDef","replaceDef","configDef","defProviders","providerDef","MockBuilderPromise","MockBuilderPerformance","normaliseModule","generateProviderValue","existing","multi","defaultMock","configDefault","stash","Symbol","toStringTag","beforeCompileComponents","defStack","params","combineParams","catch","wipe","setConfigDef","finally","a1","a2","setDefValue","compileComponents","args","keepDeclaration","itsModuleToMock","dependency","shallow","isStandalone","render","compare","b","areEqualProviderDefs","thisDef","prototypeDef","prototypeDefs","thisDefs","objectsDiffer","$implicit","variables","prototypeKeys","sourceKeys","declarations","imports","bucket","touched","patchedOriginal","skipMock","changed","buckets","concat","componentFactoryResolver","originCFR","resolveComponentFactory","EntryComponentsModule","ComponentFactoryResolver","IvyModule","entryComponents","entryModule","parameter","deleteTouch","loModule","loProviders","loDef","skipMarkProviders","skipExports","handleDef","skipDef","extendedDef","forgotten","exported","__ngMocksSkip","globalFlags","errorMessage","__internal","k","defaultMockValue","DOCUMENT","skipByResolution","skipResolution","toString","skipSystem","precise","createInstance","mixRenderApplyContext","view","context","contextKey","markForCheck","changeDetector","cdr","contentChildSelector","indices","detectChanges","mixRenderPrepareVcr","templates","QueryList","toArray","views","templateRef","TemplateRef","createEmbeddedView","mixRenderHandleViews","viewContainer","destroy","viewIndex","move","mixRenderReorderViews","mixHideHandler","mixHide","ngAfterContentInit","__rendered","block","__render","ComponentMockBase","ChangeDetectorRef","decorateClass","template","components","viewChildArgs","static","viewChildTemplate","isTemplateRefQuery","parts","element","__ngMocksInstall","ngOnInit","clear","DirectiveMockBase","ElementRef","directives","attribute","node","attrs","_tNode","step","attr","attrIndex","attrProp","_lView","detectInIvy","expectedAttributes","nodeIndex","nodes","detectInClassic","selectors","providerTokens","references","attributes","match","isCrawlByAttribute","isCrawlByAttributeValue","isCrawlById","isCrawlByTagName","isCrawlByDeclaration","collectSelectors","collectAttributesClassic","collectAttributesIvy","regExp","nativeNode","nodeName","elDef","getScanViewRefRootNodes","getVcr","vrIndex","vr","rnIndex","rootNodes","parent","childNodes","scanViewRef","publicProviders","requiredAttributes","bindings","binding","nonMinifiedName","sel","includeTextNode","el","detector","defaultNotFoundValue","notFoundValue","isDirect","children","childNode","childNodeParent","start","end","expected","currentParent","childElDef","nestedCheck","check","message","formControlDirective","form","ngModel","methodName","setValue","update","emit","handleKnown","listeners","some","listener","hasListener","methods","nativeElement","triggerInput","markAsTouched","triggerTouch","payload","preventBubble","eventCtor","Event","event","CustomEvent","initParams","bubbles","cancelable","eventObj","document","createEvent","initCustomEvent","keyMap","alt","altKey","code","location","which","arrowdown","arrowleft","arrowright","arrowup","backspace","ctrlKey","enter","esc","metaKey","shift","shiftKey","space","tab","f","dot","Math","max","eventName","eventPayload","char","keyData","codePointAt","toUpperCase","applyPayload","disabled","toEventObj","dispatchEvent","elements","findDebugElement","By","css","queryAll","handlePrimitives","html","outer","format","innerOuter","nodeValue","textContent","wholeText","innerHTML","outerHTML","getElementValue","proto","parentInjector","getParentWithInjector","parentInstance","detectContext","__ngContext__","rootView","detectContextByIndex","_debugContext","lView","normalize","detectGatherFlag","gather","parentNode","isNotObject","shouldBeScanned","scan","gatherDefault","nodesLength","bindingStartIndex","fixtures","_activeFixtures","isValidValue","getMeta","attrMatches","label","parseArgs","attrDef","detectAttribute","calls","action","registerMockFunction","jasmine","createSpy","propName","mockFunction","error","defaultMethods","beforeEach","afterEach","ngMocksFasterLock","ngMocksFasterInstalled","idAdd","bulletStack","idRemove","activeFixtures","active","ngMocksStackId","resetFixtures","idAll","idEach","beforeAll","afterAll","_moduleFactory","recursively","fail","skip","createMetaHandler","optional","typeMap","handleDeclaration","resolveProvider","resolveMap","pipe","skipDestruction","handleModuleWithProviders","toMock","handleDestructuring","resolveHandler","protoKeep","protoMock","protoExclude","generateDataWithUniverse","generateData","createMeta","flagNames","autoSpy","change","click","crawl","defaultConfig","faster","find","findAll","findInstance","findInstances","findTemplateRef","findTemplateRefs","formatHtml","formatText","globalExclude","globalKeep","globalMock","globalReplace","globalWipe","guts","hide","ignoreOnConsole","reset","reveal","revealAll","stub","stubMember","throwOnConsole","touch","trigger","encapsulation","__ngMocksProxy","defineProperty","style","correctInstance","skipProps","createClone","getOwnPropertyNames","desc","isRightTemplate","localVcr","localValue","isExpectedTemplate","findDeep","entryPoint","__template","__vcr","handleDirective","scanValue","scanVcr","getValVcr","tpl","elementRef","limit","overloads","checkReset","showError","currentStack","mockInstance","universeConfig","checkCollect","accessor","parseMockInstanceArgs","mockInstances","mockInstanceConfig","remember","scope","processDefMap","createResolveExisting","detectedDef","createResolveExcluded","func","processDef","createResolveWithProviders","createResolve","createResolveProvider","ngModuleProviders","extractModuleAndProviders","toggleSkipMockFlag","isRootModule","flagMock","flagNever","flagKeep","flagReplace","preProcessFlags","mockModule","ngModuleDef","detectMockModule","getExistingMockModule","mockModuleProviders","getMockProviders","generateReturn","postProcessFlags","flatToExisting","filter","resolveDefForExport","correctExports","moduleConfig","skipAddExports","mockModuleDef","hasResolver","configureProcessMetaKeys","cachePipe","viewProviders","processMeta","addExports","pipes","getMockClass","transformValue","defaultValue","caches","getCache","cacheKey","ctor","cache","isValid","checkCache","hostDirectives","hostDirective","mockTemplate","next","ngContext","newValue","MockRenderComponent","generateWrapperComponent","dir","MockRenderDirective","generateWrapperDirective","unshift","generateTemplateAttrWithParams","generateTemplateAttrWrap","generateTemplateAttr","definition","createPropertyGet","reader","handler","createPropertySet","extra","force","exists","fields","extractAllKeys","test","useExisting","__ngMocksStandalone","registerTemplateMiddleware","fixtureMessage","generateFactory","componentCtor","configureTestBed","componentInstance","point","tryWhen","renderDeclaration","DebugElement","HTMLElement","renderInjection","_declarations","e","handleFixtureError","generateFactoryInstall","arguments","__parameters__","isAngularClass","clsCode","regEx","guessClass","service","bindFrom","bindTo","properties","sourceDesc","sanitizerMethods","extraMethods","DomSanitizer","Sanitizer","customMockFunction","val","newSetValue","ngMockshelperMockService","createMockFromPrototype","replaceWithMocks","useFactory","accessType","detectedMockName","createName","generateMockDef","__ngMocksSet","__ngMocksGet","handleItemKeys","handleItemGetGuards","section","guards","guard","handleSection","updated","valueItem","handleArray","resolveUpdated","resolver","handleItem","areEqualDefs","providerDiffers","defDiffers","anyDiffers","parseProvider","isSuitableProvider","interceptor","useClass","excludeInterceptors","isPreconfiguredDependency","isPreconfiguredUseExisting","existingMock","createFromResolution","createPredefinedMockProvider","createMockProvider","applyCallbackToken","inst","applyCallback","normalizePrimitivesMap","handleProvider","mockProvider","normalizePrimitives","createValueProvider","createClassProvider","isNeverMockFunction","isNeverMockToken","applyMissingClassProperties","createFactoryProvider","mockVariableMap","prefix","mockService","createMock","mockVariable","processProvider","sourceType","mockType","processTokens","ownUseExisting","processOwnUseExisting","exportAs","buildConfig","cacheFlag","hasNgMocksDepsResolution","__ngMocksResolutions","pushDecorator","deleteIndex","getAllKeys","props","parsePropMetadataParserFactoryProp","bindingPropertyName","normalizedDef","defName","defAlias","defRequired","parsePropMetadataParserInput","parsePropMetadataParserOutput","parsePropMetadataParserFactoryQueryChild","parsePropMetadataParserContentChild","parsePropMetadataParserViewChild","parsePropMetadataParserFactoryQueryChildren","descendants","emitDistinctChangesOnly","parsePropMetadataMap","HostBinding","hostPropertyName","host","HostListener","parsePropDecoratorsParserFactoryProp","parsePropDecoratorsParserInput","parsePropDecoratorsParserOutput","parsePropDecoratorsParserFactoryQuery","parsePropDecoratorsParserContent","parsePropDecoratorsParserView","parsePropDecoratorsMap","buildDeclaration","reflectionCapabilities","parse","__ngMocksDeclarations","parentDeclarations","propDecorators","createDeclarations","attributeName","parseParameters","annotation","parseAnnotations","parseDecorators","parsePropDecorators","__prop__metadata__","parsePropMetadata","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","globalThis","Function","__webpack_exports__"],"sourceRoot":""}