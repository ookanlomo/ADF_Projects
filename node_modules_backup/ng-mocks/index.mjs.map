{"version":3,"file":"index.mjs","mappings":"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","sources":["webpack://ng-mocks/./libs/ng-mocks/src/lib/common/core.config.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/core.define-property.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/core.helpers.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/core.reflect.parameters-resolve.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/core.tokens.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.directive-io-build.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.directive-io-parse.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.extract-forward-ref.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.get-global.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.get-name.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.get-type.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.is-ng-type.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.is-ng-def.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.is-ng-injection-token.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.is-ng-module-def-with-providers.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/ng-mocks-universe.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.stub-member.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.stub.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-instance/mock-instance-apply.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-service/helper.create-clone.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-service/helper.define-property-descriptor.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-service/helper.extract-methods-from-prototype.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-service/helper.extract-properties-from-prototype.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-service/helper.extract-property-descriptor.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-service/helper.mock.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-service/helper.mock-function.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-service/helper.replace-with-mocks.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-service/helper.mock-service.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-service/helper.create-mock-from-prototype.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-service/helper.resolve-provider.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-service/helper.use-factory.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-service/mock-provider.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-service/check.is-func.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-service/mock-service.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-service/check.is-class.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-service/check.is-inst.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/resolve/collect-declarations.ts","webpack://ng-mocks/external module \"@angular/core\"","webpack://ng-mocks/external module \"@angular/core/testing\"","webpack://ng-mocks/webpack/bootstrap","webpack://ng-mocks/webpack/runtime/define property getters","webpack://ng-mocks/webpack/runtime/global","webpack://ng-mocks/webpack/runtime/hasOwnProperty shorthand","webpack://ng-mocks/webpack/runtime/make namespace object","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/ng-mocks-stack.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/func.extract-tokens.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.get-ng-type.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.is-standalone.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/core.def-stack.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/mock-builder-stash.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/core.reflect.provided-in.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/add-requested-providers.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/error.jest-mock.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.is-jest-mock.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/core.reflect.body-catch.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/error.empty-def.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/error.missing-decorators.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/core.reflect.directive-resolve.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/core.reflect.module-resolve.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/core.reflect.meta.ts","webpack://ng-mocks/external module \"@angular/forms\"","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/core.form.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.is-mock.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/mock-control-value-accessor-proxy.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/mock.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/mock-control-value-accessor.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/decorate.inputs.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/decorate.mock.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/decorate.queries.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock/to-existing-provider.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock/to-factory-provider.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock/clone-providers.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock/decorate-declaration.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/decorate.outputs.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.import-exists.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.is-mock-ng-def.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/func.get-last-fixture.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock/return-cached-mock.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock/get-mock.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-component/render/generate-template.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-component/render/get-key.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-component/mock-component.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-directive/mock-directive.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/core.reflect.pipe-resolve.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-pipe/mock-pipe.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-module/mock-module.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-module/create-resolvers.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-module/mark-providers.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-module/mock-ng-def.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/get-override-def.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/skip-override.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/handle-entry-components.ts","webpack://ng-mocks/external module \"@angular/common\"","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/skip-dep.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/add-def-to-root-provider-parameters.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/check-root-provider-dependency.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/extract-dep.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/handle-provided-in-dependency.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/skip-root-provider-dependency.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/init-ng-modules.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/init-module.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.extract-deps.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/try-mock-provider.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/try-mock-declaration.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/parse-provider.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/mock-builder.promise.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/init-universe.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/init-keep-def.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/init-replace-def.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/init-exclude-def.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/init-mock-declarations.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/init-modules.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/handle-root-providers.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/get-root-provider-parameters.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/get-root-providers-data.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/apply-platform-modules.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/create-ng-mocks-token.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/create-ng-mocks-touches-token.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/create-ng-mocks-overrides-token.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/promise/parse-mock-arguments.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/performance/equal-variables.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/performance/equal-render-defs.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/performance/are-equal-config-params.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/performance/equal-render-configs.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/performance/are-equal-maps.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/performance/are-equal-providers.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/performance/are-equal-sets.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/performance/required-metadata.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/mock-builder.performance.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/performance/get-empty-config.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-builder/mock-builder.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/format/is-debug-node.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/func.parse-find-args-name.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/format/is-fixture.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/find/func.parse-find-args.ts","webpack://ng-mocks/external module \"@angular/platform-browser\"","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.get-source-of-mock.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/find/func.parse-find-term.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/find/mock-helper.find.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/detect-text-node.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/el-def-compare.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/el-def-get-node.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/core.injector.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/el-def-get-parent.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/nested-check-children.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/nested-check-parent.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/nested-check.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/mock-helper.crawl.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/func.parse-find-args.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/func.parse-provider-tokens-directives.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/func.get-public-provider-keys.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/func.parse-inputs-and-requires-attributes.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/detect-selectors-from-node.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/crawl-by-attribute.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/detect-attribute-in-selectors.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/crawl-by-attribute-value.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/crawl-by-declaration.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/crawl-by-id.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/detect-tag-name-in-selectors.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/detect-crawler.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/crawl-by-tag-name.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/func.is-valid-reveal-selector.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/mock-helper.reveal.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.is-mock-control-value-accessor.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/format/is-html-element.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/events/mock-helper.event.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/events/mock-helper.trigger.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/cva/func.get-vca.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/cva/mock-helper.change.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/cva/mock-helper.touch.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/find/mock-helper.find-all.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/func.get-from-node-element.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/func.get-from-node-scan.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/func.get-from-node-ivy.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/func.get-from-node-standard.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/func.get-from-node.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/func.get-from-node-injector.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/find-instance/func.is-valid-find-instance-selector.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/find-instance/mock-helper.find-instance.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/format/format-handler.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/format/handle-array.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/format/handle-text.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/format/is-text.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/format/mock-helper.format-html.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/format/mock-helper.format-text.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.auto-spy.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.console.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.console-ignore.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.console-throw.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.default-mock.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.faster-install.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.flush-test-bed.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.faster.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.get.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.iterate-declaration.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/func.global-prepare.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.global-exclude.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.global-keep.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.global-mock.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.global-wipe.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.guts.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.attributes.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/render/func.find-deep.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/render/func.parse-template.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/template-ref/detect-crawler.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/template-ref/detect-template-ref.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/template-ref/func.is-valid-template-ref-selector.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/template-ref/mock-helper.find-template-ref.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.object.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/events/mock-helper.click.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.default-config.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/find-instance/mock-helper.find-instances.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/template-ref/mock-helper.find-template-refs.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.global-replace.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/render/mock-helper.hide.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.input.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.output.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/render/mock-helper.render.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.reset.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/crawl/mock-helper.reveal-all.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-helper/mock-helper.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-provider/mock-provider.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/ng-mocks-global-overrides.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.is-mocked-ng-def-of.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.get-mocked-ng-def-of.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.is-mock-of.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/common/func.is-mock-validator.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-instance/mock-instance.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-instance/mock-instance-forgot-reset.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-declaration/mock-declaration.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-render/func.generate-template.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-render/func.create-wrapper.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-render/func.install-prop-reader.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-render/func.reflect-template.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-render/mock-render-factory.ts","webpack://ng-mocks/./libs/ng-mocks/src/lib/mock-render/mock-render.ts"],"sourcesContent":["export default {\n  flags: ['cacheModule', 'cacheComponent', 'cacheDirective', 'cacheProvider', 'correctModuleExports'],\n  mockRenderCacheSize: 25,\n  neverMockModule: [\n    'ApplicationModule',\n    'CommonModule',\n    'BrowserModule',\n\n    // Angular 16 adds underscores\n    '_ApplicationModule',\n    '_CommonModule',\n    '_BrowserModule',\n  ],\n  neverMockProvidedFunction: [\n    'DomRendererFactory2',\n    'EventManager',\n    'Injector', // ivy only\n    'RendererFactory2',\n\n    // https://github.com/help-me-mom/ng-mocks/issues/538\n    'Sanitizer',\n    'DomSanitizer',\n    'DomSanitizerImpl',\n\n    // ApplicationModule, A14 made them global at root level\n    'ApplicationInitStatus',\n    'ApplicationRef',\n    'Compiler',\n    'IterableDiffers',\n    'KeyValueDiffers',\n\n    // Angular 16 adds underscores\n    '_DomRendererFactory2',\n    '_EventManager',\n    '_Injector',\n    '_Sanitizer',\n    '_DomSanitizer',\n    '_DomSanitizerImpl',\n    '_ApplicationInitStatus',\n    '_ApplicationRef',\n    '_Compiler',\n    '_IterableDiffers',\n    '_KeyValueDiffers',\n  ],\n  neverMockToken: [\n    'InjectionToken Set Injector scope.', // INJECTOR_SCOPE // ivy only\n    'InjectionToken EventManagerPlugins', // EVENT_MANAGER_PLUGINS\n    'InjectionToken HammerGestureConfig', // HAMMER_GESTURE_CONFIG\n\n    // ApplicationModule, A14 made them global at root level\n    'InjectionToken AppId', // APP_ID\n    'InjectionToken DefaultCurrencyCode', // DEFAULT_CURRENCY_CODE\n    'InjectionToken LocaleId', // LOCALE_ID\n    'InjectionToken SCHEDULER_TOKEN', // SCHEDULER\n  ],\n  onMockBuilderMissingDependency: 'throw',\n  onMockInstanceRestoreNeed: 'warn',\n  onTestBedFlushNeed: 'warn',\n\n  dependencies: [\n    'declarations',\n    'hostDirectives',\n    'entryComponents',\n    'bootstrap',\n    'providers',\n    'viewProviders',\n    'imports',\n    'exports',\n  ] as const,\n};\n","import helperMockService from '../mock-service/helper.mock-service';\n\nexport default (instance: any, property: keyof any, value: any, enumerable = false) => {\n  helperMockService.definePropertyDescriptor(instance, property, {\n    configurable: true,\n    enumerable,\n    value,\n    writable: true,\n  });\n};\n","import { getTestBed } from '@angular/core/testing';\n\nimport coreDefineProperty from './core.define-property';\nimport coreReflectParametersResolve from './core.reflect.parameters-resolve';\nimport { AnyDeclaration, AnyType, Type } from './core.types';\nimport funcGetGlobal from './func.get-global';\nimport funcGetName from './func.get-name';\nimport ngMocksUniverse from './ng-mocks-universe';\n\n/**\n * It will be removed from public interface with the next release: A14\n * Use ngMocks.get(token) instead.\n *\n * @deprecated\n * @internal\n */\nexport const getTestBedInjection = <I>(token: AnyDeclaration<I>): I | undefined => {\n  try {\n    // istanbul ignore next\n    return getInjection(token);\n  } catch {\n    return undefined;\n  }\n};\n\n/**\n * It will be removed from public interface with the next release: A14\n *\n * @deprecated\n * @internal\n */\nexport const getInjection = <I>(token: AnyDeclaration<I>): I => {\n  const testBed: any = getTestBed();\n\n  // istanbul ignore next\n  return testBed.inject ? testBed.inject(token) : testBed.get(token);\n};\n\nexport const flatten = <T>(values: T | T[], result: T[] = []): T[] => {\n  if (Array.isArray(values)) {\n    for (const value of values) {\n      flatten(value, result);\n    }\n  } else {\n    result.push(values);\n  }\n\n  return result;\n};\n\nexport const mapKeys = <T>(set: Map<T, any>): T[] => {\n  const result: T[] = [];\n  // eslint-disable-next-line unicorn/no-array-for-each\n  set.forEach((_, value: T) => result.push(value));\n\n  return result;\n};\n\nexport const mapValues = <T>(set: { forEach(a1: (value: T) => void): void }, destination?: Set<T>): T[] => {\n  const result: T[] = [];\n  if (destination) {\n    // eslint-disable-next-line unicorn/no-array-for-each\n    set.forEach((value: T) => {\n      destination.add(value);\n    });\n  } else {\n    // eslint-disable-next-line unicorn/no-array-for-each\n    set.forEach((value: T) => {\n      result.push(value);\n    });\n  }\n\n  return result;\n};\n\nexport const mapEntries = <K, T>(set: Map<K, T>, destination?: Map<K, T>): Array<[K, T]> => {\n  const result: Array<[K, T]> = [];\n\n  if (destination) {\n    // eslint-disable-next-line unicorn/no-array-for-each\n    set.forEach((value: T, key: K) => destination.set(key, value));\n  } else {\n    // eslint-disable-next-line unicorn/no-array-for-each\n    set.forEach((value: T, key: K) => result.push([key, value]));\n  }\n\n  return result;\n};\n\nconst extractDependencyArray = (deps: any[], set: Set<any>): void => {\n  for (const flag of deps) {\n    const name = flag && typeof flag === 'object' ? flag.ngMetadataName : undefined;\n    if (name === 'Optional' || name === 'SkipSelf' || name === 'Self') {\n      continue;\n    }\n    set.add(flag);\n  }\n};\n\n// Accepts an array of dependencies from providers, skips injections flags,\n// and adds the providers to the set.\nexport const extractDependency = (deps: any[], set?: Set<any>): void => {\n  if (!set) {\n    return;\n  }\n  for (const dep of deps) {\n    if (!Array.isArray(dep)) {\n      set.add(dep);\n      continue;\n    }\n    extractDependencyArray(dep, set);\n  }\n};\n\nexport const extendClassicClass = <I>(base: AnyType<I>): Type<I> => {\n  let child: any;\n  const index = ngMocksUniverse.index();\n\n  const glb = funcGetGlobal();\n  glb.ngMocksParent = base;\n\n  // First we try to eval es2015 style and if it fails to use es5 transpilation in the catch block.\n  // The next step is to respect constructor parameters as the parent class via jitReflector.\n  // istanbul ignore next\n  try {\n    eval(`\n      var glb = typeof window === 'undefined' ? global : window;\n      class MockMiddleware${index} extends glb.ngMocksParent {};\n      glb.ngMocksResult = MockMiddleware${index};\n    `);\n    child = glb.ngMocksResult;\n  } catch {\n    class MockMiddleware extends glb.ngMocksParent {}\n    child = MockMiddleware;\n  } finally {\n    glb.ngMocksResult = undefined;\n    glb.ngMocksParent = undefined;\n  }\n\n  // A16: adding unique property.\n  coreDefineProperty(child.prototype, `__ngMocks_index_${index}`, undefined, false);\n\n  return child;\n};\n\nexport const extendClass = <I>(base: AnyType<I>): Type<I> => {\n  const child: Type<I> = extendClassicClass(base);\n  coreDefineProperty(child, 'name', `MockMiddleware${funcGetName(base)}`, true);\n\n  const parameters = coreReflectParametersResolve(base);\n  if (parameters.length > 0) {\n    coreDefineProperty(child, 'parameters', [...parameters]);\n  }\n\n  return child;\n};\n","import collectDeclarations from '../resolve/collect-declarations';\n\nexport default (def: any): any[] => {\n  const declaration = collectDeclarations(def);\n\n  return declaration.parameters ?? [];\n};\n","import { InjectionToken } from '@angular/core';\nimport { MetadataOverride } from '@angular/core/testing';\n\nimport { AnyType } from './core.types';\n\n/**\n * NG_MOCKS token is a map from a declaration to its mock copy.\n *\n * @internal\n *\n * ```ts\n * const MockClass = TestBed.inject(NG_MOCKS).get(RealClass);\n * ```\n */\nexport const NG_MOCKS = new InjectionToken<Map<any, any>>('NG_MOCKS');\n(NG_MOCKS as any).__ngMocksSkip = true;\n\n/**\n * NG_MOCKS_TOUCHES token is a set of all touched declarations during mock process.\n *\n * @internal\n *\n * ```ts\n * const touched = TestBed.inject(NG_MOCKS_TOUCHES).has(RealClass);\n * ```\n */\nexport const NG_MOCKS_TOUCHES = new InjectionToken<Set<any>>('NG_MOCKS_TOUCHES');\n(NG_MOCKS_TOUCHES as any).__ngMocksSkip = true;\n\n/**\n * NG_MOCKS_OVERRIDES token contains overrides for:\n * - TestBed.overrideModule\n * - TestBed.overrideComponent\n * - TestBed.overrideDirective\n * - TestBed.overrideProvider\n *\n * It is used when there is no way to provide a mock copy and an override is required.\n * For example, if we want to keep a component, but to override one of its local providers.\n *\n * @internal\n */\nexport const NG_MOCKS_OVERRIDES = new InjectionToken<Map<AnyType<any>, MetadataOverride<any>>>('NG_MOCKS_OVERRIDES');\n(NG_MOCKS_OVERRIDES as any).__ngMocksSkip = true;\n\n/**\n * NG_MOCKS_GUARDS token influences on provided guards in MockBuilder.\n * More info by the links below.\n *\n * @see https://ng-mocks.sudo.eu/api/MockBuilder#ng_mocks_guards-token\n * @see https://ng-mocks.sudo.eu/guides/routing-guard\n */\nexport const NG_MOCKS_GUARDS = new InjectionToken<void>('NG_MOCKS_GUARDS');\n(NG_MOCKS_GUARDS as any).__ngMocksSkip = true;\n\n/**\n * NG_MOCKS_RESOLVERS token influences on provided resolvers in MockBuilder.\n * More info by the links below.\n *\n * @see https://ng-mocks.sudo.eu/api/MockBuilder#ng_mocks_resolvers-token\n * @see https://ng-mocks.sudo.eu/guides/routing-resolver\n */\nexport const NG_MOCKS_RESOLVERS = new InjectionToken<void>('NG_MOCKS_RESOLVERS');\n(NG_MOCKS_RESOLVERS as any).__ngMocksSkip = true;\n\n/**\n * NG_MOCKS_INTERCEPTORS token influences on provided interceptors in MockBuilder.\n * More info by the links below.\n *\n * @see https://ng-mocks.sudo.eu/api/MockBuilder#ng_mocks_interceptors-token\n * @see https://ng-mocks.sudo.eu/guides/http-interceptor\n */\nexport const NG_MOCKS_INTERCEPTORS = new InjectionToken<void>('NG_MOCKS_INTERCEPTORS');\n(NG_MOCKS_INTERCEPTORS as any).__ngMocksSkip = true;\n\n/**\n * NG_MOCKS_ROOT_PROVIDERS token influences on root providers in MockBuilder,\n * which aren't provided in specified modules.\n * It helps to mock or keep them automatically.\n *\n * @see https://ng-mocks.sudo.eu/api/MockBuilder#ng_mocks_root_providers-token\n */\nexport const NG_MOCKS_ROOT_PROVIDERS = new InjectionToken<void>('NG_MOCKS_ROOT_PROVIDERS');\n(NG_MOCKS_ROOT_PROVIDERS as any).__ngMocksSkip = true;\n","import { DirectiveIo, DirectiveIoParsed } from './core.types';\n\nexport default function ({ name, alias, required }: DirectiveIoParsed, skipName = false): DirectiveIo {\n  if (required) {\n    return { name, alias, required };\n  }\n  if (!alias || name === alias) {\n    return skipName ? '' : name;\n  }\n\n  return skipName ? alias : `${name}:${alias}`;\n}\n","import { DirectiveIo, DirectiveIoParsed } from './core.types';\n\nexport default function (param: DirectiveIo): DirectiveIoParsed {\n  if (typeof param === 'string') {\n    const [name, alias] = param.split(':').map(v => v.trim());\n\n    if (name === alias || !alias) {\n      return { name };\n    }\n\n    return { name, alias };\n  }\n\n  return param;\n}\n","// handles forwardRef on useExisting\nexport default (provide: any): any => {\n  if (typeof provide === 'function' && provide.__forward_ref__) {\n    return provide();\n  }\n\n  return provide;\n};\n","export default (): Record<keyof any, any> => {\n  // istanbul ignore if\n  if (typeof window === 'undefined') {\n    return global;\n  }\n\n  return window;\n};\n","const badCharacters = new RegExp('[^0-9a-z]+', 'mgi');\n\nexport default (value: any): string => {\n  let result: string | undefined;\n\n  if (typeof value === 'function' && value.name) {\n    result = value.name;\n  } else if (typeof value === 'function') {\n    result = 'arrowFunction';\n  } else if (typeof value === 'object' && value && value.ngMetadataName === 'InjectionToken') {\n    result = value._desc;\n  } else if (typeof value === 'object' && value && typeof value.constructor === 'function') {\n    result = value.constructor.name;\n  }\n\n  result ||= 'unknown';\n\n  return result.replace(badCharacters, '_');\n};\n","import { isNgModuleDefWithProviders } from './func.is-ng-module-def-with-providers';\n\nexport default (provider: any): any => {\n  return provider && typeof provider === 'object' && provider.provide\n    ? provider.provide\n    : isNgModuleDefWithProviders(provider)\n    ? provider.ngModule\n    : provider && typeof provider === 'object' && provider.directive\n    ? provider.directive\n    : provider;\n};\n","import collectDeclarations from '../resolve/collect-declarations';\n\nimport { AnyType } from './core.types';\n\n/**\n * Checks whether a class has been decorated with a specific Angular decorator.\n * Due to the extension / multi decoration, we rely on the last used decorator.\n *\n * @internal\n *\n * ```ts\n * isNgType(MockModule, 'NgModule'); // returns true\n * isNgType(RealComponent, 'Component'); // returns true\n * isNgType(ArbitraryClass, 'Directive'); // returns false\n * isNgType(ArbitraryClass, 'Injectable'); // returns false\n * ```\n */\nexport const isNgType = (declaration: AnyType<any>, type: string): boolean => {\n  const { decorators } = collectDeclarations(declaration);\n  if (decorators.length === 0) {\n    return false;\n  }\n\n  let offset = 1;\n\n  // Injectable works well if the declaration is in providers.\n  if (type === 'Injectable' && decorators.indexOf('Injectable') !== -1) {\n    return true;\n  }\n\n  // Skipping Injectable.\n  while (decorators[decorators.length - offset] === 'Injectable') {\n    offset += 1;\n  }\n\n  return decorators[decorators.length - offset] === type;\n};\n","import { InjectionToken, PipeTransform } from '@angular/core';\n\nimport { Type } from './core.types';\nimport { isNgInjectionToken } from './func.is-ng-injection-token';\nimport { isNgType } from './func.is-ng-type';\n\nconst isModuleCheck = (def: any, ngType?: string): boolean => (!ngType || ngType === 'm') && isNgType(def, 'NgModule');\nconst isComponentCheck = (def: any, ngType?: string): boolean =>\n  (!ngType || ngType === 'c') && isNgType(def, 'Component');\nconst isDirectiveCheck = (def: any, ngType?: string): boolean =>\n  (!ngType || ngType === 'd') && isNgType(def, 'Directive');\nconst isPipeCheck = (def: any, ngType?: string): boolean => (!ngType || ngType === 'p') && isNgType(def, 'Pipe');\nconst isInjectableCheck = (def: any, ngType?: string): boolean =>\n  (!ngType || ngType === 'i') && isNgType(def, 'Injectable');\n\n/**\n * Checks whether a class has been decorated by @NgModule.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isNgDef\n *\n * ```ts\n * isNgDef(RealModule, 'm'); // returns true\n * isNgDef(MockModule, 'm'); // returns true\n * isNgDef(ArbitraryModule, 'm'); // returns true\n * isNgDef(ArbitraryClass, 'm'); // returns false\n * ```\n */\nexport function isNgDef(declaration: any, ngType: 'm'): declaration is Type<any>;\n\n/**\n * Checks whether a class has been decorated by @Component.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isNgDef\n *\n * ```ts\n * isNgDef(RealComponent, 'c'); // returns true\n * isNgDef(MockComponent, 'c'); // returns true\n * isNgDef(ArbitraryComponent, 'c'); // returns true\n * isNgDef(ArbitraryClass, 'c'); // returns false\n * ```\n */\nexport function isNgDef(declaration: any, ngType: 'c'): declaration is Type<any>;\n\n/**\n * Checks whether a class has been decorated by @Directive.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isNgDef\n *\n * ```ts\n * isNgDef(RealDirective, 'd'); // returns true\n * isNgDef(MockDirective, 'd'); // returns true\n * isNgDef(ArbitraryDirective, 'd'); // returns true\n * isNgDef(ArbitraryClass, 'd'); // returns false\n * ```\n */\nexport function isNgDef(declaration: any, ngType: 'd'): declaration is Type<any>;\n\n/**\n * Checks whether a class has been decorated by @Pipe.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isNgDef\n *\n * ```ts\n * isNgDef(RealPipe, 'p'); // returns true\n * isNgDef(MockPipe, 'p'); // returns true\n * isNgDef(ArbitraryPipe, 'p'); // returns true\n * isNgDef(ArbitraryClass, 'p'); // returns false\n * ```\n */\nexport function isNgDef(declaration: any, ngType: 'p'): declaration is Type<PipeTransform>;\n\n/**\n * Checks whether a class has been decorated by @Injectable.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isNgDef\n *\n * ```ts\n * isNgDef(RealService, 'i'); // returns true\n * isNgDef(MockService, 'i'); // returns true\n * isNgDef(ArbitraryService, 'i'); // returns true\n * isNgDef(ArbitraryClass, 'i'); // returns false\n * ```\n */\nexport function isNgDef(declaration: any, ngType: 'i'): declaration is Type<any>;\n\n/**\n * Checks whether a variable is a token.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isNgDef\n *\n * ```ts\n * isNgDef(realToken, 't'); // returns true\n * isNgDef(mockToken, 't'); // returns true\n * isNgDef(arbitraryToken, 't'); // returns true\n * isNgDef(arbitraryObject, 't'); // returns false\n * ```\n */\nexport function isNgDef(declaration: any, ngType: 't'): declaration is InjectionToken<any>;\n\n/**\n * Checks whether a class or variable has been decorated by a ng type.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isNgDef\n *\n * ```ts\n * isNgDef(RealModule); // returns true\n * isNgDef(MockComponent); // returns true\n * isNgDef(ArbitraryDirective); // returns true\n * isNgDef(token); // returns true\n * isNgDef(ArbitraryClass); // returns false\n * ```\n */\nexport function isNgDef(declaration: any): declaration is Type<any>;\n\nexport function isNgDef(declaration: any, ngType?: string): declaration is Type<any> {\n  if (ngType === 't') {\n    return isNgInjectionToken(declaration);\n  }\n  if (typeof declaration !== 'function') {\n    return false;\n  }\n\n  const isModule = isModuleCheck(declaration, ngType);\n  const isComponent = isComponentCheck(declaration, ngType);\n  const isDirective = isDirectiveCheck(declaration, ngType);\n  const isPipe = isPipeCheck(declaration, ngType);\n  const isInjectable = isInjectableCheck(declaration, ngType);\n\n  return isModule || isComponent || isDirective || isPipe || isInjectable;\n}\n","import { InjectionToken } from '@angular/core';\n\n/**\n * Checks whether a variable is an Angular token.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isNgInjectionToken\n *\n * ```ts\n * isNgInjectionToken(APP_ID); // returns true\n * isNgInjectionToken(arbitraryVariable); // returns false\n * ```\n */\nexport const isNgInjectionToken = (token: any): token is InjectionToken<any> =>\n  token && typeof token === 'object' && token.ngMetadataName === 'InjectionToken';\n","import { NgModule } from '@angular/core';\n\nimport { Type } from './core.types';\n\n/**\n * NgModuleWithProviders helps to support ModuleWithProviders in all angular versions.\n * In A5 it was without the generic type.\n *\n * @internal remove after removal of A5 support\n */\nexport interface NgModuleWithProviders<T = any> {\n  ngModule: Type<T>;\n  providers?: NgModule['providers'];\n}\n\n/**\n * isNgModuleDefWithProviders checks if an object implements ModuleWithProviders.\n *\n * @internal\n */\nexport const isNgModuleDefWithProviders = (declaration: any): declaration is NgModuleWithProviders =>\n  declaration && typeof declaration === 'object' && typeof declaration.ngModule === 'function';\n","import { IMockBuilderConfig } from '../mock-builder/types';\n\nimport coreConfig from './core.config';\nimport { AnyDeclaration } from './core.types';\nimport funcGetGlobal from './func.get-global';\nimport funcGetName from './func.get-name';\n\nconst globalMap = (key: string) => () => {\n  if (!ngMocksUniverse.global.has(key)) {\n    ngMocksUniverse.global.set(key, new Map());\n  }\n\n  return ngMocksUniverse.global.get(key);\n};\n\ninterface NgMocksUniverse {\n  /**\n   * the value can be:\n   * - null - exclude\n   * - undefined - delayed initialization\n   * - value - the definition which should be used in tests: real value, replacement, mock.\n   */\n  builtDeclarations: Map<any, any>;\n  builtProviders: Map<any, any>;\n  cacheDeclarations: Map<any, any>;\n  cacheProviders: Map<any, any>;\n  config: Map<any, any>;\n  configInstance: Map<any, any>;\n  flags: Set<string>;\n  getBuildDeclaration: (def: any) => any | undefined;\n  getConfigMock: () => Map<any, IMockBuilderConfig>;\n  getDefaults: () => Map<any, ['mock' | 'keep' | 'replace' | 'exclude', any?]>;\n  getLocalMocks: () => Array<[any, any]>;\n  getOverrides: () => Map<any, any>;\n  getResolution: (def: any) => undefined | 'mock' | 'keep' | 'replace' | 'exclude';\n  global: Map<any, any>;\n  hasBuildDeclaration: (def: any) => boolean;\n  isExcludedDef: (def: any) => boolean;\n  isProvidedDef: (def: any) => boolean;\n  touches: Set<AnyDeclaration<any> | string>;\n  indexValue: number;\n  index: () => number;\n}\n\nfuncGetGlobal().ngMocksUniverse = funcGetGlobal().ngMocksUniverse || {};\nconst ngMocksUniverse: NgMocksUniverse = funcGetGlobal().ngMocksUniverse;\n\nngMocksUniverse.builtDeclarations = new Map();\nngMocksUniverse.builtProviders = new Map();\nngMocksUniverse.cacheDeclarations = new Map();\nngMocksUniverse.cacheProviders = new Map();\nngMocksUniverse.config = new Map();\nngMocksUniverse.configInstance = new Map();\nngMocksUniverse.flags = new Set(coreConfig.flags);\nngMocksUniverse.global = new Map();\nngMocksUniverse.touches = new Set();\n\nngMocksUniverse.global.set('flags', {\n  // @deprecated and will be changed in A13 to 'throw'\n  onMockBuilderMissingDependency: coreConfig.onMockBuilderMissingDependency,\n  // @deprecated and will be changed in A13 to 'throw'\n  onMockInstanceRestoreNeed: coreConfig.onMockInstanceRestoreNeed,\n  // @deprecated and will be changed in A13 to 'throw'\n  onTestBedFlushNeed: coreConfig.onTestBedFlushNeed,\n});\n\nngMocksUniverse.getOverrides = globalMap('overrides');\nngMocksUniverse.getDefaults = globalMap('defaults');\nngMocksUniverse.getConfigMock = globalMap('configMock');\n\nconst getDefaults = (def: any): [] | ['mock' | 'keep' | 'replace' | 'exclude', any?] => {\n  {\n    const defValue = ngMocksUniverse.getDefaults().get(def);\n    if (defValue) {\n      return defValue;\n    }\n  }\n\n  {\n    const defValue = typeof def === 'function' ? ngMocksUniverse.getDefaults().get(`@${funcGetName(def)}`) : undefined;\n    if (defValue) {\n      return defValue;\n    }\n  }\n\n  return [];\n};\n\nngMocksUniverse.getResolution = (def: any): undefined | 'mock' | 'keep' | 'replace' | 'exclude' => {\n  const set = ngMocksUniverse.config.get('ngMocksDepsResolution');\n  if (set?.has(def)) {\n    return set.get(def);\n  }\n  const [value] = getDefaults(def);\n\n  return value;\n};\n\nngMocksUniverse.getBuildDeclaration = (def: any): undefined | null | any => {\n  if (ngMocksUniverse.builtDeclarations.has(def)) {\n    return ngMocksUniverse.builtDeclarations.get(def);\n  }\n  const [mode, replacement] = getDefaults(def);\n\n  if (mode === 'exclude') {\n    return null;\n  }\n  if (mode === 'keep') {\n    return def;\n  }\n  if (mode === 'replace') {\n    return replacement;\n  }\n};\n\nngMocksUniverse.hasBuildDeclaration = (def: any): boolean => {\n  if (ngMocksUniverse.builtDeclarations.has(def)) {\n    // undefined means that we know about this declaration,\n    // but its initialization is postponed at the moment.\n    return ngMocksUniverse.builtDeclarations.get(def) !== undefined;\n  }\n  const [mode] = getDefaults(def);\n\n  return !!mode && mode !== 'mock';\n};\n\nconst hasBuildDeclaration = (def: any): boolean => ngMocksUniverse.hasBuildDeclaration(def);\nconst getBuildDeclaration = (def: any): any => ngMocksUniverse.getBuildDeclaration(def);\n\nngMocksUniverse.isExcludedDef = (def: any): boolean => {\n  const resolution = ngMocksUniverse.getResolution(def);\n  if (resolution && resolution !== 'exclude') {\n    return false;\n  }\n\n  return hasBuildDeclaration(def) && getBuildDeclaration(def) === null;\n};\n\nngMocksUniverse.isProvidedDef = (def: any): boolean => hasBuildDeclaration(def) && getBuildDeclaration(def) !== null;\n\n// excluding StoreDevtoolsModule by default\nngMocksUniverse.getDefaults().set('@StoreDevtoolsModule', ['exclude']);\n\nngMocksUniverse.indexValue = 0;\nngMocksUniverse.index = () => {\n  return ngMocksUniverse.indexValue++;\n};\n\nexport default ((): NgMocksUniverse => ngMocksUniverse)();\n","import helperExtractPropertyDescriptor from '../mock-service/helper.extract-property-descriptor';\n\nexport default <T extends object>(\n  instance: T & { __ngMocks__source?: object },\n  key: any,\n  value: any,\n  encapsulation?: 'get' | 'set',\n): any => {\n  const def = helperExtractPropertyDescriptor(instance, key) ?? {};\n\n  if (!encapsulation && def.set && (def.set as any).__ngMocksProxy) {\n    def.set(value);\n\n    return value;\n  }\n\n  const descriptor: PropertyDescriptor = {\n    configurable: true,\n    enumerable: true,\n  };\n  if (encapsulation === 'get' && def.set) {\n    descriptor.set = def.set;\n  } else if (encapsulation === 'set' && def.get) {\n    descriptor.get = def.get;\n  }\n  if (encapsulation) {\n    descriptor[encapsulation] = value;\n  } else {\n    descriptor.writable = true;\n    descriptor.value = value;\n  }\n\n  Object.defineProperty(instance, key, descriptor);\n\n  return value;\n};\n","import helperMockService from '../mock-service/helper.mock-service';\nimport { MockedFunction } from '../mock-service/types';\n\nexport default <T = MockedFunction>(instance: any, override: any, style?: 'get' | 'set'): T => {\n  if (typeof override === 'string') {\n    return helperMockService.mock(instance, override, style);\n  }\n\n  // if someone is giving us a function, then we should swap instance and overrides.\n  // so in the end the function can be called, but it also has all desired properties.\n  let correctInstance = instance;\n  let applyOverrides = override;\n  const skipProps = ['__zone_symbol__unconfigurables'];\n  if (typeof override === 'function') {\n    correctInstance = helperMockService.createClone(override);\n    applyOverrides = instance;\n    skipProps.push(...Object.getOwnPropertyNames(correctInstance));\n  }\n\n  for (const key of Object.getOwnPropertyNames(applyOverrides)) {\n    const desc = skipProps.indexOf(key) === -1 ? Object.getOwnPropertyDescriptor(applyOverrides, key) : undefined;\n    if (desc && Object.prototype.hasOwnProperty.call(desc, 'value') && desc.value === undefined) {\n      continue;\n    }\n    helperMockService.definePropertyDescriptor(correctInstance, key, desc);\n  }\n\n  return correctInstance;\n};\n","import ngMocksUniverse from '../common/ng-mocks-universe';\nimport mockHelperStubMember from '../mock-helper/mock-helper.stub-member';\n\nexport default (def: any): any[] => {\n  const callbacks = [];\n\n  const config = ngMocksUniverse.configInstance.get(def);\n  if (config?.overloads) {\n    for (const [name, stub, encapsulation] of config.overloads) {\n      if (name) {\n        callbacks.push((instance: any) => {\n          mockHelperStubMember(instance, name, stub, encapsulation);\n        });\n      } else {\n        callbacks.push(stub);\n      }\n    }\n  }\n\n  return callbacks;\n};\n","import helperDefinePropertyDescriptor from './helper.define-property-descriptor';\nimport helperExtractMethodsFromPrototype from './helper.extract-methods-from-prototype';\nimport helperExtractPropertiesFromPrototype from './helper.extract-properties-from-prototype';\nimport helperExtractPropertyDescriptor from './helper.extract-property-descriptor';\n\nexport default (service: any, bindFrom?: object, bindTo?: object, mock?: any): any => {\n  const instance = function (...args: any[]) {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    return (mock || service).apply(bindFrom === this ? bindTo : this, args);\n  };\n\n  for (const prop of [\n    ...helperExtractMethodsFromPrototype(service),\n    ...helperExtractPropertiesFromPrototype(service),\n  ]) {\n    const desc = helperExtractPropertyDescriptor(service, prop);\n    helperDefinePropertyDescriptor(instance, prop, desc);\n  }\n\n  return instance;\n};\n","import helperExtractPropertyDescriptor from './helper.extract-property-descriptor';\n\nexport default (instance: any, prop: keyof any, desc?: PropertyDescriptor): boolean => {\n  if (!desc || !instance) {\n    return false;\n  }\n\n  // istanbul ignore else\n  if (Object.defineProperty) {\n    const sourceDesc = helperExtractPropertyDescriptor(instance, prop);\n    if (sourceDesc?.configurable === false) {\n      return false;\n    }\n\n    Object.defineProperty(instance, prop, {\n      ...desc,\n      configurable: true,\n      ...((desc.get === undefined && desc.set === undefined) || desc.writable === false ? { writable: true } : {}),\n    });\n  } else {\n    instance[prop] = desc.value;\n  }\n\n  return true;\n};\n","import funcGetName from '../common/func.get-name';\n\nconst sanitizerMethods = [\n  'sanitize',\n  'bypassSecurityTrustHtml',\n  'bypassSecurityTrustStyle',\n  'bypassSecurityTrustScript',\n  'bypassSecurityTrustUrl',\n  'bypassSecurityTrustResourceUrl',\n];\n\nconst extraMethods: Record<string, undefined | string[]> = {\n  DomSanitizer: sanitizerMethods,\n  Sanitizer: sanitizerMethods,\n};\n\nconst getOwnPropertyNames = (prototype: any): string[] => {\n  const result: string[] = Object.getOwnPropertyNames(prototype);\n  for (const method of extraMethods[funcGetName(prototype)] ?? []) {\n    result.push(method);\n  }\n\n  return result;\n};\n\nexport default <T>(service: T): string[] => {\n  const result: string[] = [];\n\n  let prototype = service;\n  while (prototype && Object.getPrototypeOf(prototype) !== null) {\n    for (const method of getOwnPropertyNames(prototype)) {\n      if ((method as any) === 'constructor') {\n        continue;\n      }\n\n      const descriptor = Object.getOwnPropertyDescriptor(prototype, method);\n      const isGetterSetter = descriptor && (descriptor.get || descriptor.set);\n      if (isGetterSetter || result.indexOf(method) !== -1) {\n        continue;\n      }\n      result.push(method);\n    }\n    prototype = Object.getPrototypeOf(prototype);\n  }\n\n  return result;\n};\n","export default <T>(service: T): string[] => {\n  const result: string[] = [];\n  let prototype = service;\n  while (prototype && Object.getPrototypeOf(prototype) !== null) {\n    for (const prop of Object.getOwnPropertyNames(prototype)) {\n      if ((prop as any) === 'constructor') {\n        continue;\n      }\n\n      const descriptor = Object.getOwnPropertyDescriptor(prototype, prop);\n      const isGetterSetter = descriptor && (descriptor.get || descriptor.set);\n      if (!isGetterSetter || result.indexOf(prop) !== -1) {\n        continue;\n      }\n      result.push(prop);\n    }\n    prototype = Object.getPrototypeOf(prototype);\n  }\n\n  return result;\n};\n","export default <T>(service: T, prop: keyof any): PropertyDescriptor | undefined => {\n  let prototype = service;\n  while (prototype && Object.getPrototypeOf(prototype) !== null) {\n    const descriptor = Object.getOwnPropertyDescriptor(prototype, prop);\n    if (descriptor) {\n      return descriptor;\n    }\n    prototype = Object.getPrototypeOf(prototype);\n  }\n\n  return undefined;\n};\n","import funcGetName from '../common/func.get-name';\n\nimport helperMockService from './helper.mock-service';\nimport { MockedFunction } from './types';\n\n// istanbul ignore next\nconst createName = (name: string, mockName?: string, instance?: any, accessType?: string) =>\n  `${mockName ?? (typeof instance.prototype === 'function' ? instance.prototype.name : funcGetName(instance))}.${name}${\n    accessType ?? ''\n  }`;\n\nconst generateMockDef = (def: any, mock: any, accessType?: string): PropertyDescriptor => ({\n  ...(accessType === 'get' && def && def.set\n    ? {\n        set: def.set,\n      }\n    : {}),\n\n  ...(accessType === 'set' && def && def.get\n    ? {\n        get: def.get,\n      }\n    : {}),\n\n  ...(accessType\n    ? {}\n    : {\n        writable: true,\n      }),\n\n  [accessType || 'value']: mock,\n  configurable: true,\n  enumerable: true,\n});\n\nconst parseArgs = (\n  args: any[],\n): {\n  accessType?: 'get' | 'set';\n  mockName?: string;\n} => {\n  let accessType: 'get' | 'set' | undefined;\n  let mockName: string | undefined;\n\n  if (args.length > 0 && args[0] !== 'get' && args[0] !== 'set') {\n    mockName = args[0];\n  } else if (args.length > 0 && (args[0] === 'get' || args[0] === 'set')) {\n    accessType = args[0];\n    mockName = args[1];\n  }\n\n  return { accessType, mockName };\n};\n\nexport default <T = MockedFunction>(instance: any, name: string, ...args: Array<string | undefined>): T => {\n  const { accessType, mockName } = parseArgs(args);\n\n  const def = Object.getOwnPropertyDescriptor(instance, name);\n  if (def && def[accessType || 'value']) {\n    return def[accessType || 'value'];\n  }\n\n  const detectedMockName = createName(name, mockName, instance, accessType);\n  const mock: any = helperMockService.mockFunction(detectedMockName, !!accessType);\n\n  const mockDef = generateMockDef(def, mock, accessType);\n  if (mockDef.get && mockDef.set && (mockDef.get as any).__ngMocks && (mockDef.set as any).__ngMocks) {\n    (mockDef.set as any).__ngMocksSet((val: any) => (mockDef.get as any).__ngMocksGet(val));\n  }\n\n  Object.defineProperty(instance, name, mockDef);\n\n  return mock;\n};\n","import coreDefineProperty from '../common/core.define-property';\n\nimport { CustomMockFunction, MockedFunction } from './types';\n\nconst mockFunction: {\n  (mockName: string, original?: boolean): MockedFunction;\n  customMockFunction?: CustomMockFunction;\n} = (mockName: string, original = false): MockedFunction => {\n  // eslint-disable-next-line unicorn/prefer-logical-operator-over-ternary\n  const func =\n    mockFunction.customMockFunction && !original\n      ? mockFunction.customMockFunction(mockName)\n      : (val: any) => {\n          if (setValue) {\n            setValue(val);\n          }\n\n          return value;\n        };\n\n  // magic to make getters / setters working\n\n  let value: any;\n  let setValue: any;\n\n  coreDefineProperty(func, '__ngMocks', true);\n  coreDefineProperty(func, '__ngMocksSet', (newSetValue: any) => (setValue = newSetValue));\n  coreDefineProperty(func, '__ngMocksGet', (newValue: any) => (value = newValue));\n\n  return func;\n};\n\nexport default (() => mockFunction)();\n","import { NG_MOCKS_GUARDS, NG_MOCKS_RESOLVERS } from '../common/core.tokens';\nimport { isNgDef } from '../common/func.is-ng-def';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nconst handleSection = (section: any[]) => {\n  const guards: any[] = [];\n\n  for (const guard of section) {\n    if (!ngMocksUniverse.isProvidedDef(guard) && ngMocksUniverse.isExcludedDef(NG_MOCKS_GUARDS)) {\n      continue;\n    }\n\n    guards.push(guard);\n    if (!isNgDef(guard)) {\n      ngMocksUniverse.touches.add(guard);\n    }\n  }\n\n  return guards;\n};\n\nconst handleArray = (cache: Map<any, any>, value: any[], callback: any): [boolean, any[]] => {\n  const mock: Array<any> = [];\n  let updated = false;\n  cache.set(value, mock);\n\n  for (const valueItem of value) {\n    if (ngMocksUniverse.isExcludedDef(valueItem)) {\n      updated = updated || true;\n      continue;\n    }\n    mock.push(callback(valueItem, cache));\n    updated = updated || mock[mock.length - 1] !== valueItem;\n  }\n\n  return [updated, mock];\n};\n\nconst handleItemKeys = ['canActivate', 'canActivateChild', 'canDeactivate', 'canMatch', 'canLoad'];\nconst handleItemGetGuards = (mock: any, section: string) =>\n  Array.isArray(mock[section]) ? handleSection(mock[section]) : mock[section];\n\nconst handleItem = (\n  cache: Map<any, any>,\n  value: Record<keyof any, any>,\n  callback: any,\n): [boolean, Record<keyof any, any>] => {\n  let mock: Record<keyof any, any> = {};\n  let updated = false;\n  cache.set(value, mock);\n\n  for (const key of Object.keys(value)) {\n    if (ngMocksUniverse.isExcludedDef(value[key])) {\n      updated = updated || true;\n      continue;\n    }\n    mock[key] = callback(value[key], cache);\n    updated = updated || mock[key] !== value[key];\n  }\n\n  // Removal of guards.\n  for (const section of handleItemKeys) {\n    const guards: any[] = handleItemGetGuards(mock, section);\n    if (guards && mock[section].length !== guards.length) {\n      updated = updated || true;\n      mock = { ...mock, [section]: guards };\n    }\n  }\n\n  // Removal of resolvers.\n  if (typeof mock.resolve === 'object' && mock.resolve) {\n    const resolve: any = {};\n    let resolveUpdated = false;\n    for (const key of Object.keys(mock.resolve)) {\n      const resolver = mock.resolve[key];\n      if (!ngMocksUniverse.isProvidedDef(resolver) && ngMocksUniverse.isExcludedDef(NG_MOCKS_RESOLVERS)) {\n        resolveUpdated = resolveUpdated || true;\n        continue;\n      }\n      resolve[key] = resolver;\n      if (!isNgDef(resolver)) {\n        ngMocksUniverse.touches.add(resolver);\n      }\n    }\n    if (resolveUpdated) {\n      updated = updated || true;\n      mock = { ...mock, resolve };\n    }\n  }\n\n  return [updated, mock];\n};\n\nconst replaceWithMocks = (value: any, cache: Map<any, any>): any => {\n  if (ngMocksUniverse.cacheDeclarations.has(value)) {\n    return ngMocksUniverse.cacheDeclarations.get(value);\n  }\n  if (typeof value !== 'object') {\n    return value;\n  }\n  if (cache.has(value)) {\n    return value;\n  }\n\n  let mock: any;\n  let updated = false;\n\n  if (Array.isArray(value)) {\n    [updated, mock] = handleArray(cache, value, replaceWithMocks);\n  } else if (value) {\n    [updated, mock] = handleItem(cache, value, replaceWithMocks);\n  }\n\n  if (updated) {\n    Object.setPrototypeOf(mock, Object.getPrototypeOf(value));\n\n    return mock;\n  }\n\n  return value;\n};\n\nconst replaceWithMocksWrapper = (value: any) => {\n  const cache = new Map();\n  const result = replaceWithMocks(value, cache);\n  cache.clear();\n\n  return result;\n};\n\nexport default (() => replaceWithMocksWrapper)();\n","import funcGetGlobal from '../common/func.get-global';\n\nimport helperCreateClone from './helper.create-clone';\nimport helperCreateMockFromPrototype from './helper.create-mock-from-prototype';\nimport helperDefinePropertyDescriptor from './helper.define-property-descriptor';\nimport helperExtractMethodsFromPrototype from './helper.extract-methods-from-prototype';\nimport helperExtractPropertiesFromPrototype from './helper.extract-properties-from-prototype';\nimport helperExtractPropertyDescriptor from './helper.extract-property-descriptor';\nimport helperMock from './helper.mock';\nimport helperMockFunction from './helper.mock-function';\nimport helperReplaceWithMocks from './helper.replace-with-mocks';\nimport helperResolveProvider from './helper.resolve-provider';\nimport helperUseFactory from './helper.use-factory';\nimport { CustomMockFunction } from './types';\n\n// We need a single pointer to the object among all environments.\nfuncGetGlobal().ngMockshelperMockService = funcGetGlobal().ngMockshelperMockService || {\n  mockFunction: helperMockFunction,\n\n  registerMockFunction: (func: CustomMockFunction | undefined) => {\n    funcGetGlobal().ngMockshelperMockService.mockFunction.customMockFunction = func;\n  },\n\n  createClone: helperCreateClone,\n  createMockFromPrototype: helperCreateMockFromPrototype,\n  definePropertyDescriptor: helperDefinePropertyDescriptor,\n  extractMethodsFromPrototype: helperExtractMethodsFromPrototype,\n  extractPropertiesFromPrototype: helperExtractPropertiesFromPrototype,\n  extractPropertyDescriptor: helperExtractPropertyDescriptor,\n  mock: helperMock,\n  replaceWithMocks: helperReplaceWithMocks,\n  resolveProvider: helperResolveProvider,\n  useFactory: helperUseFactory,\n};\n\nexport default ((): {\n  createClone: typeof helperCreateClone;\n  createMockFromPrototype: typeof helperCreateMockFromPrototype;\n  definePropertyDescriptor: typeof helperDefinePropertyDescriptor;\n  extractMethodsFromPrototype: typeof helperExtractMethodsFromPrototype;\n  extractPropertiesFromPrototype: typeof helperExtractPropertiesFromPrototype;\n  extractPropertyDescriptor: typeof helperExtractPropertyDescriptor;\n  mock: typeof helperMock;\n  mockFunction: typeof helperMockFunction;\n  registerMockFunction: (func: CustomMockFunction | undefined) => void;\n  replaceWithMocks: typeof helperReplaceWithMocks;\n  resolveProvider: typeof helperResolveProvider;\n  useFactory: typeof helperUseFactory;\n} => funcGetGlobal().ngMockshelperMockService)();\n\nexport function registerMockFunction(func?: CustomMockFunction | undefined): void {\n  funcGetGlobal().ngMockshelperMockService.registerMockFunction(func);\n}\n","import coreDefineProperty from '../common/core.define-property';\nimport funcGetName from '../common/func.get-name';\n\nimport helperMockService from './helper.mock-service';\nimport { MockedFunction } from './types';\n\nexport default (service: any): { [key in keyof any]: MockedFunction } => {\n  const mockName = funcGetName(service);\n  const value: any = {};\n  coreDefineProperty(value, '__ngMocks', true);\n\n  const methods = helperMockService.extractMethodsFromPrototype(service);\n  for (const method of methods) {\n    helperMockService.mock(value, method, mockName);\n  }\n\n  const properties = helperMockService.extractPropertiesFromPrototype(service);\n  for (const property of properties) {\n    helperMockService.mock(value, property, 'get', mockName);\n    helperMockService.mock(value, property, 'set', mockName);\n  }\n  Object.setPrototypeOf(value, service);\n\n  return value;\n};\n","import CoreDefStack from '../common/core.def-stack';\nimport { extractDependency } from '../common/core.helpers';\nimport { NG_MOCKS_INTERCEPTORS } from '../common/core.tokens';\nimport funcExtractForwardRef from '../common/func.extract-forward-ref';\nimport funcGetType from '../common/func.get-type';\nimport { isNgInjectionToken } from '../common/func.is-ng-injection-token';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nimport helperMockService from './helper.mock-service';\nimport mockProvider from './mock-provider';\n\nconst anyDiffers = (a: any, b: any, ...keys: string[]): boolean => {\n  for (const key of keys) {\n    if (a[key] !== b[key]) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nconst createFromResolution = (provide: any, resolution: any) => {\n  let mockDef = resolution;\n\n  const existingMock = ngMocksUniverse.builtProviders.get(provide);\n  if (existingMock) {\n    mockDef = existingMock;\n  }\n\n  // A case when a provider is actually a component, directive, pipe.\n  if (typeof mockDef === 'function') {\n    mockDef = {\n      provide,\n      useClass: mockDef,\n    };\n  }\n\n  return mockDef;\n};\n\nconst isSuitableProvider = (provider: any, provide: any): boolean =>\n  ngMocksUniverse.builtProviders.has(NG_MOCKS_INTERCEPTORS) &&\n  ngMocksUniverse.builtProviders.get(NG_MOCKS_INTERCEPTORS) === null &&\n  isNgInjectionToken(provide) &&\n  provide.toString() === 'InjectionToken HTTP_INTERCEPTORS' &&\n  provide !== provider;\n\nconst excludeInterceptors = (provider: any, provide: any): boolean => {\n  if (isSuitableProvider(provider, provide)) {\n    if (provider.useFactory || provider.useValue) {\n      return true;\n    }\n    const interceptor = funcExtractForwardRef(provider.useExisting) || provider.useClass;\n    if (!ngMocksUniverse.builtProviders.has(interceptor) || ngMocksUniverse.builtProviders.get(interceptor) === null) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nconst parseProvider = (\n  provider: any,\n  callback: any,\n): {\n  change: () => void;\n  multi: boolean;\n  provide: any;\n} => {\n  const provide = funcGetType(provider);\n  const multi = provider !== provide && !!provider.multi;\n\n  return {\n    change: () => {\n      if (callback) {\n        callback();\n      }\n    },\n    multi,\n    provide,\n  };\n};\n\n// if the provider is a value, we need to go through the value and to replace all mock instances.\nconst replaceWithMocks = (provider: any, provide: any, mockDef: any) => {\n  if (provide !== provider && mockDef && mockDef.useValue) {\n    const useValue = helperMockService.replaceWithMocks(mockDef.useValue);\n\n    return useValue === mockDef.useValue\n      ? mockDef\n      : {\n          ...mockDef,\n          useValue,\n        };\n  }\n\n  return mockDef;\n};\n\nconst createPredefinedMockProvider = (provider: any, provide: any): any => {\n  // Then we check decisions whether we should keep or replace a provider.\n  if (ngMocksUniverse.builtProviders.has(provide)) {\n    const mockDef = ngMocksUniverse.builtProviders.get(provide);\n    if (mockDef === provide) {\n      return provider;\n    }\n\n    return mockDef;\n  }\n\n  return undefined;\n};\n\nconst createMockProvider = (provider: any, provide: any, change: () => void) => {\n  let mockDef = createPredefinedMockProvider(provider, provide);\n\n  if (!mockDef && ngMocksUniverse.flags.has('skipMock') && ngMocksUniverse.getResolution(provide) !== 'mock') {\n    ngMocksUniverse.config.get('ngMocksDepsSkip')?.add(provide);\n    mockDef = provider;\n  }\n  if (!mockDef) {\n    mockDef = mockProvider(provider);\n  }\n\n  mockDef = replaceWithMocks(provider, provide, mockDef);\n  if (!areEqualDefs(mockDef, provider, provide)) {\n    change();\n  }\n  // Touching only when we really provide a value.\n  if (mockDef) {\n    ngMocksUniverse.touches.add(provide);\n  }\n\n  return mockDef;\n};\n\nconst areEqualDefs = (mockDef: any, provider: any, provide: any): boolean => {\n  let providerDiffers = false;\n  let defDiffers = !mockDef;\n  if (provider && mockDef && !defDiffers) {\n    defDiffers = anyDiffers(provider, mockDef, 'provide', 'useValue', 'useClass', 'useExisting', 'useFactory', 'deps');\n  }\n  if (provider === provide && mockDef !== provider) {\n    providerDiffers = true;\n  } else if (provider !== provide && defDiffers) {\n    providerDiffers = true;\n  }\n\n  return !providerDiffers;\n};\n\nconst isPreconfiguredDependency = (provider: any, provide: any): boolean => {\n  //  we should not touch excluded providers.\n  if (ngMocksUniverse.builtProviders.get(provide) === null) {\n    return true;\n  }\n\n  if (provide !== provider && provider.deps) {\n    extractDependency(provider.deps, ngMocksUniverse.config.get('ngMocksDeps'));\n  }\n\n  return excludeInterceptors(provider, provide);\n};\n\nconst isPreconfiguredUseExisting = (provider: any, provide: any): boolean => {\n  //  we should not touch non-useExisting providers.\n  if (!provider || typeof provider !== 'object' || !provider.useExisting) {\n    return false;\n  }\n  if (provider.useExisting.mockOf) {\n    return true;\n  }\n\n  // skipping explicit declarations (not internally processed)\n  if (ngMocksUniverse.getResolution(provide) && !ngMocksUniverse.config.get(provide)?.__internal) {\n    return false;\n  }\n\n  return ngMocksUniverse.getResolution(funcExtractForwardRef(provider.useExisting)) === 'keep';\n};\n\n// tries to resolve a provider based on current universe state.\nexport default (provider: any, resolutions: CoreDefStack<any, any>, changed?: () => void) => {\n  const { provide, multi, change } = parseProvider(provider, changed);\n  if (isPreconfiguredDependency(provider, provide)) {\n    return change();\n  }\n  if (isPreconfiguredUseExisting(provider, provide)) {\n    ngMocksUniverse.touches.add(provide);\n\n    return provider;\n  }\n  if (resolutions.has(provide)) {\n    return createFromResolution(provide, resolutions.get(provide));\n  }\n\n  const mockDef = createMockProvider(provider, provide, change);\n\n  return multi && typeof mockDef === 'object' ? { ...mockDef, multi } : mockDef;\n};\n","import { FactoryProvider, Injector } from '@angular/core';\n\nimport { mapValues } from '../common/core.helpers';\nimport { isNgInjectionToken } from '../common/func.is-ng-injection-token';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\nimport mockHelperStub from '../mock-helper/mock-helper.stub';\nimport mockInstanceApply from '../mock-instance/mock-instance-apply';\n\nimport { MockService } from './mock-service';\n\nconst applyCallbackToken = (def: any): boolean => isNgInjectionToken(def) || typeof def === 'string';\n\nconst applyCallback = (def: any, inst: any, callbacks: any[], injector?: Injector, overrides?: any): void => {\n  let instance: any = inst;\n\n  for (const callback of callbacks) {\n    const override = callback(instance, injector);\n    if (applyCallbackToken(def)) {\n      instance = override;\n      continue;\n    }\n\n    // overrides return real value.\n    if (callback === overrides) {\n      instance = override;\n      continue;\n    }\n\n    if (!override) {\n      continue;\n    }\n\n    instance = mockHelperStub(instance, override);\n  }\n\n  return instance;\n};\n\nexport default <D, I>(\n  def: D,\n  init?: () => I,\n  overrides?: (instance: I, injector: Injector) => I | Partial<I>,\n): FactoryProvider => ({\n  deps: [Injector],\n  provide: def,\n  useFactory: (injector?: Injector) => {\n    const instance = init ? init() : MockService(def as any);\n\n    const configGlobal: Set<any> | undefined = ngMocksUniverse.getOverrides().get(def);\n    const callbacks = configGlobal ? mapValues(configGlobal) : [];\n    if (overrides) {\n      callbacks.push(overrides);\n    }\n    callbacks.push(...mockInstanceApply(def));\n\n    return applyCallback(def, instance, callbacks, injector, overrides);\n  },\n});\n","import { Provider } from '@angular/core';\n\nimport coreConfig from '../common/core.config';\nimport { Type } from '../common/core.types';\nimport funcGetType from '../common/func.get-type';\nimport { isNgInjectionToken } from '../common/func.is-ng-injection-token';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nimport helperDefinePropertyDescriptor from './helper.define-property-descriptor';\nimport helperExtractPropertyDescriptor from './helper.extract-property-descriptor';\nimport helperUseFactory from './helper.use-factory';\nimport { MockService } from './mock-service';\n\nconst { neverMockProvidedFunction, neverMockToken } = coreConfig;\n\nconst applyMissingClassProperties = (instance: any, useClass: Type<any>) => {\n  const existing = Object.getOwnPropertyNames(instance);\n  const child = MockService(useClass);\n\n  for (const name of Object.getOwnPropertyNames(child)) {\n    if (existing.indexOf(name) !== -1) {\n      continue;\n    }\n    const def = helperExtractPropertyDescriptor(child, name);\n    helperDefinePropertyDescriptor(instance, name, def);\n  }\n};\n\nconst createFactoryProvider = (provider: any, provide: any) =>\n  helperUseFactory(provide, () => {\n    const instance = MockService(provide);\n    // Magic below adds missed properties to the instance to\n    // fulfill missed abstract methods.\n    if (provide !== provider && Object.keys(provider).indexOf('useClass') !== -1) {\n      applyMissingClassProperties(instance, provider.useClass);\n    }\n\n    return instance;\n  });\n\nconst normalizePrimitivesMap: Array<[(value: any) => boolean, any]> = [\n  [value => typeof value === 'boolean', false],\n  [value => typeof value === 'number', 0],\n  [value => typeof value === 'string', ''],\n  [value => value === null, null],\n];\n\nconst normalizePrimitives = (value: any): any => {\n  for (const [check, result] of normalizePrimitivesMap) {\n    if (check(value)) {\n      return result;\n    }\n  }\n\n  return undefined;\n};\n\nconst createValueProvider = (provider: any, provide: any) =>\n  helperUseFactory(provide, () =>\n    provider.useValue && typeof provider.useValue === 'object'\n      ? MockService(provider.useValue)\n      : normalizePrimitives(provider.useValue),\n  );\n\nconst createClassProvider = (provider: any, provide: any) =>\n  ngMocksUniverse.builtProviders.has(provider.useClass) &&\n  ngMocksUniverse.builtProviders.get(provider.useClass) === provider.useClass\n    ? provider\n    : helperUseFactory(provide, () => MockService(provider.useClass));\n\nconst createMockProvider = (provider: any, provide: any, cacheProviders?: Map<any, any>): Provider | undefined => {\n  let mockProvider: Provider | undefined;\n  if (typeof provide === 'function') {\n    mockProvider = createFactoryProvider(provider, provide);\n  }\n  if (provide === provider && mockProvider && cacheProviders) {\n    cacheProviders.set(provide, mockProvider);\n  }\n\n  return mockProvider;\n};\n\n// Tokens are special subject, we can skip adding them because in a mock module they are useless.\n// The main problem is that providing undefined to HTTP_INTERCEPTORS and others breaks their code.\n// If a testing module / component requires omitted tokens then they should be provided manually\n// during creation of TestBed module.\nconst handleProvider = (provider: any, provide: any, useFactory: boolean) => {\n  if (provide === provider) {\n    return useFactory ? helperUseFactory(provider, () => undefined) : undefined;\n  }\n  if (provider.multi) {\n    ngMocksUniverse.config.get('ngMocksMulti')?.add(provide);\n\n    return undefined;\n  }\n\n  let mockProvider: any;\n  // istanbul ignore else\n  if (Object.keys(provider).indexOf('useValue') !== -1) {\n    mockProvider = createValueProvider(provider, provide);\n  } else if (Object.keys(provider).indexOf('useExisting') !== -1) {\n    mockProvider = provider;\n  } else if (Object.keys(provider).indexOf('useClass') !== -1) {\n    mockProvider = createClassProvider(provider, provide);\n  } else if (Object.keys(provider).indexOf('useFactory') !== -1) {\n    mockProvider = helperUseFactory(provide, () => ({}));\n  }\n\n  return mockProvider;\n};\n\nconst isNeverMockFunction = (provide: any): boolean =>\n  typeof provide === 'function' && neverMockProvidedFunction.indexOf(provide.name) !== -1;\n\nconst isNeverMockToken = (provide: any): boolean =>\n  isNgInjectionToken(provide) && neverMockToken.indexOf(provide.toString()) !== -1;\n\nexport default (provider: any, useFactory = false): Provider | undefined => {\n  const provide = funcGetType(provider);\n\n  if (ngMocksUniverse.getResolution(provide) === 'mock') {\n    // nothing to do\n  } else if (isNeverMockFunction(provide)) {\n    return provider;\n  } else if (isNeverMockToken(provide)) {\n    return undefined;\n  }\n\n  // Only pure provides should be cached to avoid their influence on\n  // another different declarations.\n  const cacheProviders = ngMocksUniverse.flags.has('cacheProvider')\n    ? ngMocksUniverse.cacheProviders\n    : /* istanbul ignore next */ undefined;\n  if (provide === provider && cacheProviders && cacheProviders.has(provide)) {\n    return cacheProviders.get(provide);\n  }\n\n  return createMockProvider(provider, provide, cacheProviders) || handleProvider(provider, provide, useFactory);\n};\n","const isAngularClass = (value: Record<keyof any, unknown>): boolean => {\n  if (value.ɵprov) {\n    return true;\n  }\n  if (value.__annotations__) {\n    return true;\n  }\n  if (value.__parameters__) {\n    return true;\n  }\n  if (value.parameters) {\n    return true;\n  }\n\n  return false;\n};\n\nconst guessClass = (name: string, proto: string, value: any): boolean => {\n  // unnamed classes can be class_N\n  if (name.match(/^class/) !== null) {\n    return true;\n  }\n\n  // let's consider an existing 'prototype' as a class\n  if (Object.keys(value.prototype).length > 0) {\n    return true;\n  }\n\n  // let's consider a capital name and 'this' usage as a class\n  const clsCode = name.codePointAt(0);\n  if (clsCode && clsCode >= 65 && clsCode <= 90 && proto.match(/\\bthis\\./gm) !== null) {\n    return true;\n  }\n\n  // webpack es5 class\n  const regEx = new RegExp(`\\\\(this,\\\\s*${name}\\\\)`, 'mg');\n  // istanbul ignore if\n  if (proto.match(regEx) !== null) {\n    return true;\n  }\n\n  return false;\n};\n\nexport default (value: any): boolean => {\n  if (typeof value !== 'function') {\n    return false;\n  }\n  if (!value.prototype) {\n    return true;\n  }\n  if (isAngularClass(value)) {\n    return false;\n  }\n\n  const proto = value.toString();\n\n  // es2015 class\n  // istanbul ignore if\n  if (proto.match(/^class\\b/) !== null) {\n    return false;\n  }\n\n  const cls = proto.match(/^function\\s+([^\\s(]+)\\(/);\n  if (cls === null) {\n    return true;\n  }\n  if (guessClass(cls[1], proto, value)) {\n    return false;\n  }\n\n  return true;\n};\n","import { AnyType } from '../common/core.types';\nimport funcGetName from '../common/func.get-name';\nimport mockHelperStub from '../mock-helper/mock-helper.stub';\n\nimport checkIsClass from './check.is-class';\nimport checkIsFunc from './check.is-func';\nimport checkIsInst from './check.is-inst';\nimport helperMockService from './helper.mock-service';\n\ntype MockServiceHandler = (cache: Map<any, any>, service: any, prefix?: string, overrides?: any) => any;\n\nconst mockVariableMap: Array<[(def: any) => boolean, MockServiceHandler]> = [\n  [\n    checkIsClass,\n    (cache, service) => {\n      const value = helperMockService.createMockFromPrototype(service.prototype);\n      cache.set(service, value);\n\n      return value;\n    },\n  ],\n  [\n    checkIsFunc,\n    (cache, service, prefix) => {\n      const value = helperMockService.mockFunction(`func:${prefix || funcGetName(service)}`);\n      cache.set(service, value());\n\n      return value;\n    },\n  ],\n  [def => Array.isArray(def), () => []],\n  [\n    checkIsInst,\n    (cache, service, prefix, callback) => {\n      const value = helperMockService.createMockFromPrototype(service.constructor.prototype);\n      cache.set(service, value);\n      for (const property of Object.keys(service)) {\n        const mock: any = callback(cache, service[property], `${prefix || 'instance'}.${property}`);\n        if (mock !== undefined) {\n          value[property] = mock;\n        }\n      }\n      Object.setPrototypeOf(value, Object.getPrototypeOf(service));\n\n      return value;\n    },\n  ],\n];\n\nconst mockVariable = (cache: Map<any, any>, service: any, prefix: string, callback: MockServiceHandler) => {\n  for (const [check, createMock] of mockVariableMap) {\n    if (!check(service)) {\n      continue;\n    }\n\n    return cache.get(service) ?? createMock(cache, service, prefix, callback);\n  }\n};\n\n/**\n * Mocking all methods / properties of a class / object.\n */\nconst mockService: MockServiceHandler = (cache, service, prefix = '', overrides): any => {\n  const value: any = mockVariable(cache, service, prefix, mockService);\n\n  if (overrides) {\n    mockHelperStub(value, overrides);\n  }\n\n  return value;\n};\n\n/**\n * MockService creates a mock instance out of an object or a class.\n * Primitives are converted to undefined.\n *\n * @see https://ng-mocks.sudo.eu/api/MockService\n */\nexport function MockService(service: boolean | number | string | null | undefined): undefined;\n\n/**\n * MockService creates a mock instance out of an object or a class.\n *\n * @see https://ng-mocks.sudo.eu/api/MockService\n *\n * ```ts\n * const service = MockService(AuthService);\n * service.login(); // does nothing, it's dummy.\n */\nexport function MockService<T>(service: AnyType<T>, spyNamePrefix?: string): T;\n\n/**\n * MockService creates a mock instance out of an object or a class.\n *\n * @see https://ng-mocks.sudo.eu/api/MockService\n *\n * ```ts\n * const mockUser = MockService(currentUser);\n * mockUser.save(); // does nothing, it's dummy.\n */\nexport function MockService<T = any>(service: object, spyNamePrefix?: string): T;\n\n/**\n * MockService creates a mock instance out of an object or a class.\n * The second parameter can be used as overrides.\n *\n * @see https://ng-mocks.sudo.eu/api/MockService\n *\n * ```ts\n * const service = MockService(AuthService, {\n *   loggedIn: true,\n * });\n * service.login(); // does nothing, it's dummy.\n * ```\n */\nexport function MockService<T>(service: AnyType<T>, overrides?: Partial<T>, spyNamePrefix?: string): T;\n\nexport function MockService(service: any, ...args: any[]): any {\n  const prefix = args.length > 0 && typeof args[0] === 'string' ? args[0] : args[1];\n  const overrides = args.length > 0 && args[0] && typeof args[0] === 'object' ? args[0] : undefined;\n\n  const cache = new Map();\n  const result = mockService(cache, service, prefix, overrides);\n  cache.clear();\n\n  return result;\n}\n","import checkIsFunc from './check.is-func';\n\nexport default (value: any): boolean => {\n  if (typeof value !== 'function') {\n    return false;\n  }\n\n  return !checkIsFunc(value);\n};\n","export default (value: any): boolean => {\n  if (value === null) {\n    return false;\n  }\n  if (typeof value !== 'object') {\n    return false;\n  }\n  if (value.ngMetadataName === 'InjectionToken') {\n    return false;\n  }\n\n  return typeof Object.getPrototypeOf(value) === 'object';\n};\n","import { ɵReflectionCapabilities as ReflectionCapabilities } from '@angular/core';\n\nimport coreDefineProperty from '../common/core.define-property';\nimport { AnyDeclaration, DirectiveIo } from '../common/core.types';\nimport funcDirectiveIoBuild from '../common/func.directive-io-build';\nimport funcDirectiveIoParse from '../common/func.directive-io-parse';\n\ninterface Declaration {\n  host: Record<string, string | undefined>;\n  hostBindings: Array<[string, string?, ...any[]]>;\n  hostListeners: Array<[string, string?, ...any[]]>;\n  attributes: string[];\n  inputs: Array<DirectiveIo>;\n  outputs: Array<DirectiveIo>;\n  propDecorators: Record<string, any[]>;\n  queries: Record<string, any>;\n  decorators: Array<'Injectable' | 'Pipe' | 'Directive' | 'Component' | 'NgModule'>;\n  [key: string]: any;\n}\n\nconst pushDecorator = (decorators: string[], decorator: string): void => {\n  const deleteIndex = decorators.indexOf(decorator);\n  if (deleteIndex !== -1) {\n    decorators.splice(deleteIndex, 1);\n  }\n  if (\n    decorator === 'Injectable' ||\n    decorator === 'Pipe' ||\n    decorator === 'Directive' ||\n    decorator === 'Component' ||\n    decorator === 'NgModule'\n  ) {\n    decorators.push(decorator);\n  }\n};\n\nconst getAllKeys = <T extends Record<keyof any, any>>(instance: T): Array<keyof T> => {\n  const props: string[] = [];\n  for (const key of Object.keys(instance)) {\n    props.push(key);\n  }\n\n  return props as never;\n};\n\nconst createDeclarations = (parent: Partial<Declaration>): Declaration => ({\n  host: parent.host ? { ...parent.host } : {},\n  hostBindings: parent.hostBindings ? [...parent.hostBindings] : [],\n  hostListeners: parent.hostListeners ? [...parent.hostListeners] : [],\n  attributes: parent.attributes ? [...parent.attributes] : [],\n  inputs: parent.inputs ? [...parent.inputs] : [],\n  outputs: parent.outputs ? [...parent.outputs] : [],\n  propDecorators: parent.propDecorators ? { ...parent.propDecorators } : {},\n  queries: parent.queries ? { ...parent.queries } : {},\n  decorators: parent.decorators ? [...parent.decorators] : [],\n});\n\nconst parseParameters = (\n  def: {\n    __parameters__?: Array<null | Array<\n      | {\n          attributeName: string;\n          ngMetadataName: 'Attribute';\n        }\n      | {\n          token: AnyDeclaration<any>;\n          ngMetadataName: 'Inject';\n        }\n      | {\n          ngMetadataName: 'Optional';\n        }\n    >>;\n  },\n  declaration: Declaration,\n): void => {\n  if (Object.prototype.hasOwnProperty.call(def, '__parameters__') && def.__parameters__) {\n    for (const decorators of def.__parameters__) {\n      for (const decorator of decorators || []) {\n        if (\n          decorator.ngMetadataName === 'Attribute' &&\n          declaration.attributes.indexOf(decorator.attributeName) === -1\n        ) {\n          declaration.attributes.push(decorator.attributeName);\n        }\n      }\n    }\n  }\n};\n\nconst parseAnnotations = (\n  def: {\n    __annotations__?: Array<{\n      ngMetadataName?: string;\n    }>;\n  },\n  declaration: Declaration,\n): void => {\n  if (Object.prototype.hasOwnProperty.call(def, '__annotations__') && def.__annotations__) {\n    for (const annotation of def.__annotations__) {\n      const ngMetadataName = annotation?.ngMetadataName;\n      if (!ngMetadataName) {\n        continue;\n      }\n      declaration[ngMetadataName] = { ...annotation, attributes: declaration.attributes };\n      pushDecorator(declaration.decorators, ngMetadataName);\n    }\n  }\n};\n\nconst parseDecorators = (\n  def: {\n    decorators?: Array<{\n      args?: [any];\n      type?: {\n        prototype?: {\n          ngMetadataName?: string;\n        };\n      };\n    }>;\n  },\n  declaration: Declaration,\n): void => {\n  if (Object.prototype.hasOwnProperty.call(def, 'decorators') && def.decorators) {\n    for (const decorator of def.decorators) {\n      const ngMetadataName = decorator?.type?.prototype?.ngMetadataName;\n      if (!ngMetadataName) {\n        continue;\n      }\n      declaration[ngMetadataName] = decorator.args ? { ...decorator.args[0] } : {};\n      pushDecorator(declaration.decorators, ngMetadataName);\n    }\n  }\n};\n\nconst parsePropMetadataParserFactoryProp =\n  (key: 'inputs' | 'outputs') =>\n  (\n    _: string,\n    name: string,\n    decorator: {\n      alias?: string;\n      required?: boolean;\n      bindingPropertyName?: string;\n    },\n    declaration: Declaration,\n  ): void => {\n    const { alias, required } = funcDirectiveIoParse({\n      name,\n      alias: decorator.alias ?? decorator.bindingPropertyName,\n      required: decorator.required,\n    });\n\n    const normalizedDef = funcDirectiveIoBuild({ name, alias, required });\n\n    let add = true;\n    for (const def of declaration[key]) {\n      if (def === normalizedDef) {\n        add = false;\n        break;\n      }\n\n      const { name: defName, alias: defAlias, required: defRequired } = funcDirectiveIoParse(def);\n      if (defName === name && defAlias === alias && defRequired === required) {\n        add = false;\n        break;\n      }\n    }\n\n    if (add) {\n      declaration[key].unshift(normalizedDef);\n    }\n  };\nconst parsePropMetadataParserInput = parsePropMetadataParserFactoryProp('inputs');\nconst parsePropMetadataParserOutput = parsePropMetadataParserFactoryProp('outputs');\n\nconst parsePropMetadataParserFactoryQueryChild =\n  (isViewQuery: boolean) =>\n  (\n    ngMetadataName: string,\n    prop: string,\n    decorator: {\n      read?: any;\n      selector: string;\n      static?: boolean;\n    },\n    declaration: Declaration,\n  ): void => {\n    if (!declaration.queries[prop]) {\n      declaration.queries[prop] = {\n        isViewQuery,\n        ngMetadataName,\n        selector: decorator.selector,\n        ...(decorator.read === undefined ? {} : { read: decorator.read }),\n        ...(decorator.static === undefined ? {} : { static: decorator.static }),\n      };\n    }\n  };\nconst parsePropMetadataParserContentChild = parsePropMetadataParserFactoryQueryChild(false);\nconst parsePropMetadataParserViewChild = parsePropMetadataParserFactoryQueryChild(true);\n\nconst parsePropMetadataParserFactoryQueryChildren =\n  (isViewQuery: boolean) =>\n  (\n    ngMetadataName: string,\n    prop: string,\n    decorator: {\n      descendants?: any;\n      emitDistinctChangesOnly?: boolean;\n      read?: any;\n      selector: string;\n    },\n    declaration: Declaration,\n  ): void => {\n    if (!declaration.queries[prop]) {\n      declaration.queries[prop] = {\n        isViewQuery,\n        ngMetadataName,\n        selector: decorator.selector,\n        ...(decorator.descendants === undefined ? {} : { descendants: decorator.descendants }),\n        ...(decorator.emitDistinctChangesOnly === undefined\n          ? {}\n          : { emitDistinctChangesOnly: decorator.emitDistinctChangesOnly }),\n        ...(decorator.read === undefined ? {} : { read: decorator.read }),\n      };\n    }\n  };\nconst parsePropMetadataParserContentChildren = parsePropMetadataParserFactoryQueryChildren(false);\nconst parsePropMetadataParserViewChildren = parsePropMetadataParserFactoryQueryChildren(true);\n\nconst parsePropMetadataParserHostBinding = (\n  _: string,\n  prop: string,\n  decorator: {\n    args?: any;\n    hostPropertyName?: string;\n  },\n  declaration: Declaration,\n): void => {\n  const key = `[${decorator.hostPropertyName || prop}]`;\n  if (!declaration.host[key]) {\n    declaration.host[key] = prop;\n  }\n  declaration.hostBindings.push([\n    prop,\n    decorator.hostPropertyName || prop,\n    ...(decorator.args ? [decorator.args] : []),\n  ]);\n};\n\nconst parsePropMetadataParserHostListener = (\n  _: string,\n  prop: string,\n  decorator: {\n    args?: any;\n    eventName?: string;\n  },\n  declaration: Declaration,\n): void => {\n  const key = `(${decorator.eventName || prop})`;\n  if (!declaration.host[key]) {\n    declaration.host[key] = `${prop}($event)`;\n  }\n  declaration.hostListeners.push([prop, decorator.eventName || prop, ...(decorator.args ? [decorator.args] : [])]);\n};\n\nconst parsePropMetadataMap: any = {\n  ContentChild: parsePropMetadataParserContentChild,\n  ContentChildren: parsePropMetadataParserContentChildren,\n  HostBinding: parsePropMetadataParserHostBinding,\n  HostListener: parsePropMetadataParserHostListener,\n  Input: parsePropMetadataParserInput,\n  Output: parsePropMetadataParserOutput,\n  ViewChild: parsePropMetadataParserViewChild,\n  ViewChildren: parsePropMetadataParserViewChildren,\n};\n\nconst parsePropMetadata = (\n  def: {\n    __prop__metadata__?: Record<keyof any, any[]>;\n  },\n  declaration: Declaration,\n): void => {\n  if (Object.prototype.hasOwnProperty.call(def, '__prop__metadata__') && def.__prop__metadata__) {\n    for (const prop of getAllKeys(def.__prop__metadata__)) {\n      const decorators: Array<{\n        ngMetadataName?: string;\n      }> = def.__prop__metadata__[prop];\n      for (const decorator of decorators) {\n        const ngMetadataName = decorator?.ngMetadataName;\n        if (!ngMetadataName) {\n          continue;\n        }\n        parsePropMetadataMap[ngMetadataName]?.(ngMetadataName, prop, decorator, declaration);\n      }\n    }\n  }\n};\n\nconst parsePropDecoratorsParserFactoryProp = (key: 'inputs' | 'outputs') => {\n  const callback = parsePropMetadataParserFactoryProp(key);\n  return (\n    _: string,\n    name: string,\n    decorator: {\n      args?: [DirectiveIo];\n    },\n    declaration: Declaration,\n  ): void => {\n    const { alias = undefined, required = undefined } =\n      typeof decorator.args?.[0] === 'undefined'\n        ? {}\n        : typeof decorator.args[0] === 'string'\n        ? { alias: decorator.args[0] }\n        : decorator.args[0];\n    callback(_, name, { alias, required, bindingPropertyName: alias }, declaration);\n  };\n};\nconst parsePropDecoratorsParserInput = parsePropDecoratorsParserFactoryProp('inputs');\nconst parsePropDecoratorsParserOutput = parsePropDecoratorsParserFactoryProp('outputs');\n\nconst parsePropDecoratorsParserFactoryQuery =\n  (isViewQuery: boolean) =>\n  (\n    ngMetadataName: string,\n    prop: string,\n    decorator: {\n      args: [string] | [string, any];\n    },\n    declaration: Declaration,\n  ): void => {\n    if (!declaration.queries[prop]) {\n      declaration.queries[prop] = {\n        isViewQuery,\n        ngMetadataName,\n        selector: decorator.args[0],\n        ...decorator.args[1],\n      };\n    }\n  };\nconst parsePropDecoratorsParserContent = parsePropDecoratorsParserFactoryQuery(false);\nconst parsePropDecoratorsParserView = parsePropDecoratorsParserFactoryQuery(true);\n\nconst parsePropDecoratorsParserHostBinding = (\n  _: string,\n  prop: string,\n  decorator: {\n    args?: [string] | [string, any[]];\n  },\n  declaration: Declaration,\n): void => {\n  const key = `[${decorator.args?.[0] || prop}]`;\n  if (!declaration.host[key]) {\n    declaration.host[key] = prop;\n  }\n  declaration.hostBindings.push([prop, ...(decorator.args || [])]);\n};\n\nconst parsePropDecoratorsParserHostListener = (\n  _: string,\n  prop: string,\n  decorator: {\n    args?: any[];\n  },\n  declaration: Declaration,\n): void => {\n  const key = `(${decorator.args?.[0] || prop})`;\n  if (!declaration.host[key]) {\n    declaration.host[key] = `${prop}($event)`;\n  }\n  declaration.hostListeners.push([prop, ...(decorator.args || [])]);\n};\n\nconst parsePropDecoratorsMap: any = {\n  ContentChild: parsePropDecoratorsParserContent,\n  ContentChildren: parsePropDecoratorsParserContent,\n  HostBinding: parsePropDecoratorsParserHostBinding,\n  HostListener: parsePropDecoratorsParserHostListener,\n  Input: parsePropDecoratorsParserInput,\n  Output: parsePropDecoratorsParserOutput,\n  ViewChild: parsePropDecoratorsParserView,\n  ViewChildren: parsePropDecoratorsParserView,\n};\n\nconst parsePropDecorators = (\n  def: {\n    propDecorators?: Record<\n      string,\n      Array<{\n        args: any;\n        type?: {\n          prototype?: {\n            ngMetadataName?: string;\n          };\n        };\n      }>\n    >;\n  },\n  declaration: Declaration,\n): void => {\n  if (Object.prototype.hasOwnProperty.call(def, 'propDecorators') && def.propDecorators) {\n    for (const prop of getAllKeys(def.propDecorators)) {\n      declaration.propDecorators[prop] = [...(declaration.propDecorators[prop] || []), ...def.propDecorators[prop]];\n      for (const decorator of def.propDecorators[prop]) {\n        const ngMetadataName = decorator?.type?.prototype?.ngMetadataName;\n        if (!ngMetadataName) {\n          continue;\n        }\n        parsePropDecoratorsMap[ngMetadataName]?.(ngMetadataName, prop, decorator, declaration);\n      }\n    }\n  }\n};\n\nconst buildDeclaration = (def: any | undefined, declaration: Declaration): void => {\n  if (def) {\n    def.inputs = def.inputs || [];\n    for (const input of declaration.inputs) {\n      if (def.inputs.indexOf(input) === -1) {\n        def.inputs.push(input);\n      }\n    }\n\n    def.outputs = def.outputs || [];\n    for (const output of declaration.outputs) {\n      if (def.outputs.indexOf(output) === -1) {\n        def.outputs.push(output);\n      }\n    }\n\n    def.queries = {\n      ...(def.queries || []),\n      ...declaration.queries,\n    };\n\n    def.hostBindings = declaration.hostBindings;\n    def.hostListeners = declaration.hostListeners;\n  }\n};\n\nconst reflectionCapabilities = new ReflectionCapabilities();\n\nconst parse = (def: any): any => {\n  if (typeof def !== 'function' && typeof def !== 'object') {\n    return {};\n  }\n\n  if (Object.prototype.hasOwnProperty.call(def, '__ngMocksParsed')) {\n    return def.__ngMocksDeclarations;\n  }\n\n  const parent = Object.getPrototypeOf(def);\n  const parentDeclarations = parent ? parse(parent) : {};\n  const declaration = createDeclarations(parentDeclarations);\n  coreDefineProperty(def, '__ngMocksParsed', true);\n  parseParameters(def, declaration);\n  parseAnnotations(def, declaration);\n  parseDecorators(def, declaration);\n  parsePropDecorators(def, declaration);\n  parsePropMetadata(def, declaration);\n  buildDeclaration(declaration.Directive, declaration);\n  buildDeclaration(declaration.Component, declaration);\n\n  coreDefineProperty(def, '__ngMocksDeclarations', {\n    ...parentDeclarations,\n    ...declaration,\n    parameters: reflectionCapabilities.parameters(def),\n  });\n\n  return def.__ngMocksDeclarations;\n};\n\nexport default ((): ((def: any) => Declaration) => parse)();\n","var x = y => { var x = {}; __webpack_require__.d(x, y); return x; }\nvar y = x => () => x\nmodule.exports = x({ [\"ChangeDetectorRef\"]: () => __WEBPACK_EXTERNAL_MODULE__angular_core_bcead0df__.ChangeDetectorRef, [\"Component\"]: () => __WEBPACK_EXTERNAL_MODULE__angular_core_bcead0df__.Component, [\"ComponentFactoryResolver\"]: () => __WEBPACK_EXTERNAL_MODULE__angular_core_bcead0df__.ComponentFactoryResolver, [\"ContentChild\"]: () => __WEBPACK_EXTERNAL_MODULE__angular_core_bcead0df__.ContentChild, [\"ContentChildren\"]: () => __WEBPACK_EXTERNAL_MODULE__angular_core_bcead0df__.ContentChildren, [\"DebugElement\"]: () => __WEBPACK_EXTERNAL_MODULE__angular_core_bcead0df__.DebugElement, [\"Directive\"]: () => __WEBPACK_EXTERNAL_MODULE__angular_core_bcead0df__.Directive, [\"ElementRef\"]: () => __WEBPACK_EXTERNAL_MODULE__angular_core_bcead0df__.ElementRef, [\"EventEmitter\"]: () => __WEBPACK_EXTERNAL_MODULE__angular_core_bcead0df__.EventEmitter, [\"InjectionToken\"]: () => __WEBPACK_EXTERNAL_MODULE__angular_core_bcead0df__.InjectionToken, [\"Injector\"]: () => __WEBPACK_EXTERNAL_MODULE__angular_core_bcead0df__.Injector, [\"Input\"]: () => __WEBPACK_EXTERNAL_MODULE__angular_core_bcead0df__.Input, [\"NgModule\"]: () => __WEBPACK_EXTERNAL_MODULE__angular_core_bcead0df__.NgModule, [\"Optional\"]: () => __WEBPACK_EXTERNAL_MODULE__angular_core_bcead0df__.Optional, [\"Output\"]: () => __WEBPACK_EXTERNAL_MODULE__angular_core_bcead0df__.Output, [\"Pipe\"]: () => __WEBPACK_EXTERNAL_MODULE__angular_core_bcead0df__.Pipe, [\"QueryList\"]: () => __WEBPACK_EXTERNAL_MODULE__angular_core_bcead0df__.QueryList, [\"Self\"]: () => __WEBPACK_EXTERNAL_MODULE__angular_core_bcead0df__.Self, [\"TemplateRef\"]: () => __WEBPACK_EXTERNAL_MODULE__angular_core_bcead0df__.TemplateRef, [\"ViewChild\"]: () => __WEBPACK_EXTERNAL_MODULE__angular_core_bcead0df__.ViewChild, [\"ViewChildren\"]: () => __WEBPACK_EXTERNAL_MODULE__angular_core_bcead0df__.ViewChildren, [\"ViewContainerRef\"]: () => __WEBPACK_EXTERNAL_MODULE__angular_core_bcead0df__.ViewContainerRef, [\"ɵReflectionCapabilities\"]: () => __WEBPACK_EXTERNAL_MODULE__angular_core_bcead0df__[\"ɵReflectionCapabilities\"] });","var x = y => { var x = {}; __webpack_require__.d(x, y); return x; }\nvar y = x => () => x\nmodule.exports = x({ [\"TestBed\"]: () => __WEBPACK_EXTERNAL_MODULE__angular_core_testing_89899de6__.TestBed, [\"getTestBed\"]: () => __WEBPACK_EXTERNAL_MODULE__angular_core_testing_89899de6__.getTestBed });","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import ngMocksUniverse from './ng-mocks-universe';\n\nexport interface NgMocksStack {\n  id: object;\n  level: 'root' | 'runtime';\n  mockInstance?: any[];\n}\n\ntype NgMocksStackCallback = (state: NgMocksStack, stack: NgMocksStack[]) => void;\n\nconst stackRoot: NgMocksStack = { id: {}, level: 'root' };\nconst stack: NgMocksStack[] = ngMocksUniverse.global.get('reporter-stack') || [{ ...stackRoot }];\nngMocksUniverse.global.set('reporter-stack', stack);\nconst current = () => stack[stack.length - 1];\n\n// istanbul ignore next\nconst listenersPush: NgMocksStackCallback[] = ngMocksUniverse.global.get('reporter-stack-push') ?? [];\nngMocksUniverse.global.set('reporter-stack-push', listenersPush);\n\n// istanbul ignore next\nconst listenersPop: NgMocksStackCallback[] = ngMocksUniverse.global.get('reporter-stack-pop') ?? [];\nngMocksUniverse.global.set('reporter-stack-pop', listenersPop);\n\nconst stackPush = () => {\n  const id = {};\n  ngMocksUniverse.global.set('reporter-stack-id', id);\n  const state: NgMocksStack = { id, level: 'runtime' };\n  stack.push(state);\n\n  for (const callback of listenersPush) {\n    callback(state, stack);\n  }\n};\nconst stackPop = () => {\n  const state = stack.pop();\n\n  // this code is actually needed for jest tests.\n  // istanbul ignore if\n  if (stack.length === 0) {\n    stack.push(state?.level === 'root' ? state : { ...stackRoot });\n  }\n\n  // istanbul ignore else\n  if (state && state.level !== 'root') {\n    for (const callback of listenersPop) {\n      callback(state, stack);\n    }\n  }\n\n  ngMocksUniverse.global.set('reporter-stack-id', stack[stack.length - 1].id);\n};\n\n// istanbul ignore next\nconst subscribePush = (callback: NgMocksStackCallback) => {\n  if (listenersPush.indexOf(callback)) {\n    listenersPush.push(callback);\n  }\n  if (stack.length > 0) {\n    callback(stack[stack.length - 1], stack);\n  }\n};\n\n// istanbul ignore next\nconst subscribePop = (callback: NgMocksStackCallback) => {\n  if (listenersPop.indexOf(callback) === -1) {\n    listenersPop.push(callback);\n  }\n};\n\n// istanbul ignore next\nconst unsubscribePush = (callback: NgMocksStackCallback) => {\n  const index = listenersPush.indexOf(callback);\n  if (index !== -1) {\n    listenersPush.splice(index, 1);\n  }\n};\n\n// istanbul ignore next\nconst unsubscribePop = (callback: NgMocksStackCallback) => {\n  const index = listenersPop.indexOf(callback);\n  if (index !== -1) {\n    listenersPop.splice(index, 1);\n  }\n};\n\nexport default {\n  current,\n  stackPop,\n  stackPush,\n  subscribePop,\n  subscribePush,\n  unsubscribePop,\n  unsubscribePush,\n};\n","import { MetadataOverride } from '@angular/core/testing';\n\nimport { flatten } from '../common/core.helpers';\nimport { NG_MOCKS, NG_MOCKS_OVERRIDES, NG_MOCKS_TOUCHES } from '../common/core.tokens';\nimport { AnyType } from '../common/core.types';\n\nexport default (\n  providers: any,\n): {\n  mocks?: Map<any, any>;\n  overrides?: Map<AnyType<any>, [MetadataOverride<any>, MetadataOverride<any>]>;\n  touches?: Set<any>;\n} => {\n  let mocks: Map<any, any> | undefined;\n  let overrides: Map<AnyType<any>, [MetadataOverride<any>, MetadataOverride<any>]> | undefined;\n  let touches: Set<any> | undefined;\n\n  for (const provide of flatten(providers || [])) {\n    if (typeof provide !== 'object') {\n      continue;\n    }\n    if (provide.provide === NG_MOCKS) {\n      mocks = provide.useValue;\n    }\n    if (provide.provide === NG_MOCKS_OVERRIDES) {\n      overrides = provide.useValue;\n    }\n    if (provide.provide === NG_MOCKS_TOUCHES) {\n      touches = provide.useValue;\n    }\n  }\n\n  return {\n    mocks,\n    overrides,\n    touches,\n  };\n};\n","import collectDeclarations from '../resolve/collect-declarations';\n\nimport { AnyDeclaration } from './core.types';\nimport { isNgInjectionToken } from './func.is-ng-injection-token';\nimport { NgModuleWithProviders } from './func.is-ng-module-def-with-providers';\n\n/**\n * Returns how the class has been decorated.\n * It doesn't work well, because multi decorations and extensions of decorated classes can bring strange behavior.\n * Because of that, we simply take the last decoration as the expected, if the decorator is not Injectable.\n * Services have the lowest priority.\n *\n * @internal\n *\n * ```ts\n * getNgType(MockModule); // returns 'NgModule' | 'Component' | 'Directive' | 'Pipe' | 'Injectable'\n * ```\n */\nexport const getNgType = (\n  declaration: AnyDeclaration<any> | NgModuleWithProviders<any>,\n): 'NgModule' | 'Component' | 'Directive' | 'Pipe' | 'Injectable' | undefined => {\n  if (typeof declaration === 'string') {\n    return undefined;\n  }\n  if (isNgInjectionToken(declaration)) {\n    return 'Injectable';\n  }\n\n  const { decorators } = collectDeclarations(declaration);\n\n  for (let index = decorators.length - 1; index >= 0; index -= 1) {\n    if (decorators[index] === 'Injectable') {\n      continue;\n    }\n\n    return decorators[index];\n  }\n\n  if (decorators.length > 0) {\n    return 'Injectable';\n  }\n\n  return undefined;\n};\n","import collectDeclarations from '../resolve/collect-declarations';\n\nimport { getNgType } from './func.get-ng-type';\n\n/**\n * Checks whether a class has been decorated with the standalone flag.\n */\nexport function isStandalone(declaration: any): boolean {\n  const type = getNgType(declaration);\n  if (!type || type === 'Injectable') {\n    return false;\n  }\n\n  return collectDeclarations(declaration)[type].standalone === true;\n}\n","import { mapEntries } from './core.helpers';\n\nexport default class<K, V> {\n  protected stack: Array<Map<K, V>> = [];\n\n  public constructor() {\n    this.push();\n  }\n\n  public push() {\n    this.stack.push(new Map());\n  }\n\n  public pop(): Map<V, V> {\n    return this.stack.pop() ?? new Map();\n  }\n\n  public has(key: K): ReturnType<Map<K, V>['has']> {\n    for (let i = this.stack.length - 1; i >= 0; i -= 1) {\n      if (this.stack[i].has(key)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public get(key: K): ReturnType<Map<K, V>['get']> {\n    for (let i = this.stack.length - 1; i >= 0; i -= 1) {\n      if (this.stack[i].has(key)) {\n        return this.stack[i].get(key);\n      }\n    }\n\n    return undefined;\n  }\n\n  public set(key: K, value: V): this {\n    for (let i = this.stack.length - 1; i >= 0; i -= 1) {\n      this.stack[i].set(key, value);\n    }\n\n    return this;\n  }\n\n  public merge(resolutions: Map<K, V>): this {\n    for (const [key, value] of mapEntries(resolutions)) {\n      this.set(key, value);\n    }\n\n    return this;\n  }\n}\n","import coreConfig from '../common/core.config';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nexport class MockBuilderStash {\n  protected data: Record<keyof any, any> = {};\n\n  public backup(): void {\n    this.data = {\n      builtDeclarations: ngMocksUniverse.builtDeclarations,\n      builtProviders: ngMocksUniverse.builtProviders,\n      cacheDeclarations: ngMocksUniverse.cacheDeclarations,\n      cacheProviders: ngMocksUniverse.cacheProviders,\n      config: ngMocksUniverse.config,\n      configInstance: ngMocksUniverse.configInstance,\n      flags: ngMocksUniverse.flags,\n      touches: ngMocksUniverse.touches,\n    };\n\n    ngMocksUniverse.builtDeclarations = new Map();\n    ngMocksUniverse.builtProviders = new Map();\n    ngMocksUniverse.cacheDeclarations = new Map();\n    ngMocksUniverse.cacheProviders = new Map();\n    ngMocksUniverse.config = new Map();\n    ngMocksUniverse.configInstance = new Map();\n    ngMocksUniverse.flags = new Set(coreConfig.flags);\n    ngMocksUniverse.touches = new Set();\n  }\n\n  public restore(): void {\n    for (const key of Object.keys(this.data)) {\n      (ngMocksUniverse as any)[key] = (this.data as any)[key];\n    }\n  }\n}\n","import { AnyType } from './core.types';\n\nexport default (declaration: any): undefined | AnyType<any> | string => {\n  if (!declaration || (typeof declaration !== 'object' && typeof declaration !== 'function')) {\n    return undefined;\n  }\n\n  return declaration.ɵprov?.providedIn ?? declaration.ngInjectableDef?.providedIn;\n};\n","import CoreDefStack from '../../common/core.def-stack';\nimport { extractDependency, flatten, mapValues } from '../../common/core.helpers';\nimport coreReflectProvidedIn from '../../common/core.reflect.provided-in';\nimport funcGetType from '../../common/func.get-type';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\nimport helperResolveProvider from '../../mock-service/helper.resolve-provider';\n\nimport { BuilderData, NgMeta } from './types';\n\nexport default (ngModule: NgMeta, { providerDef, mockDef }: BuilderData, resolutions: CoreDefStack<any, any>): void => {\n  // Adding requested providers to test bed.\n  for (const provider of mapValues(providerDef)) {\n    ngModule.providers.push(provider);\n  }\n\n  // Analyzing providers.\n  for (const provider of flatten(ngModule.providers)) {\n    const provide = funcGetType(provider);\n    ngMocksUniverse.touches.add(provide);\n\n    if (provide !== provider && (provider as any).deps) {\n      extractDependency((provider as any).deps, ngMocksUniverse.config.get('ngMocksDeps'));\n    }\n  }\n\n  for (const def of mapValues(mockDef)) {\n    if (ngMocksUniverse.touches.has(def) || coreReflectProvidedIn(def) !== 'root') {\n      continue;\n    }\n\n    ngModule.providers.push(helperResolveProvider(def, resolutions));\n    ngMocksUniverse.touches.add(def);\n  }\n};\n","import funcGetName from './func.get-name';\nimport funcIsJestMock from './func.is-jest-mock';\n\nexport default (def: any): void => {\n  if (funcIsJestMock(def)) {\n    throw new Error(\n      [\n        `ng-mocks got ${funcGetName(def)} which has been already mocked by jest.mock().`,\n        'It is not possible to produce correct mocks for it, because jest.mock() removes Angular decorators.',\n        `To fix this, please avoid jest.mock() on the file which exports ${funcGetName(\n          def,\n        )} or add jest.dontMock() on it.`,\n        'The same should be done for all related dependencies.',\n      ].join(' '),\n    );\n  }\n};\n","export default (def: any): boolean => {\n  if (!def) {\n    return false;\n  }\n\n  if (typeof def !== 'function' && typeof def !== 'object') {\n    return false;\n  }\n\n  if (def._isMockFunction && def.mockName && def.__annotations__) {\n    return true;\n  }\n\n  return false;\n};\n","import errorEmptyDef from './error.empty-def';\nimport errorJestMock from './error.jest-mock';\nimport errorMissingDecorators from './error.missing-decorators';\n\nexport default (callback: any) => (def: any) => {\n  errorEmptyDef(def);\n\n  try {\n    return callback(def);\n  } catch {\n    errorJestMock(def);\n    errorMissingDecorators(def);\n  }\n};\n","export default (def: any): void => {\n  if (!def) {\n    throw new Error(\n      [\n        'undefined / null has been passed into ng-mocks as a declaration / provider.',\n        'Please ensure that the current test file has correct imports:',\n        'imported files exist and imported declarations have been exported in the file.',\n      ].join(' '),\n    );\n  }\n};\n","import funcGetName from './func.get-name';\n\nexport default (def: any): void => {\n  throw new Error(\n    [\n      `${funcGetName(def)} declaration has been passed into ng-mocks without Angular decorators.`,\n      'Therefore, it cannot be properly handled.',\n      'Highly likely,',\n      typeof jest === 'undefined' ? '' : /* istanbul ignore next */ 'jest.mock() has been used on its file, or',\n      'ng-mocks is imported in production code, or got a class without Angular decoration.',\n      'Otherwise, please create an issue on github: https://github.com/help-me-mom/ng-mocks/issues/new?title=False%20positive%20ng-mocks%20not%20in%20JIT.',\n      'Thank you in advance for support.',\n    ].join(' '),\n  );\n};\n","import { Component, Directive, NgModule } from '@angular/core';\n\nimport collectDeclarations from '../resolve/collect-declarations';\n\nimport coreReflectBodyCatch from './core.reflect.body-catch';\n\nexport default (\n  def: any,\n): Directive &\n  Partial<Component> &\n  NgModule & {\n    hostBindings?: Array<[string, any]>;\n    hostListeners?: Array<[string, any, any]>;\n    imports?: any[];\n    standalone?: boolean;\n  } =>\n  coreReflectBodyCatch((arg: any) => {\n    const declaration = collectDeclarations(arg);\n    if (declaration.Component) {\n      return declaration.Component;\n    }\n    if (declaration.Directive) {\n      return declaration.Directive;\n    }\n\n    throw new Error('Cannot resolve declarations');\n  })(def);\n","import { NgModule } from '@angular/core';\n\nimport collectDeclarations from '../resolve/collect-declarations';\n\nimport coreReflectBodyCatch from './core.reflect.body-catch';\n\nexport default (def: any): NgModule =>\n  coreReflectBodyCatch((arg: any) => {\n    const declaration = collectDeclarations(arg);\n    if (declaration.NgModule) {\n      return declaration.NgModule;\n    }\n\n    throw new Error('Cannot resolve declarations');\n  })(def);\n","import coreReflectDirectiveResolve from './core.reflect.directive-resolve';\nimport coreReflectModuleResolve from './core.reflect.module-resolve';\nimport { isNgDef } from './func.is-ng-def';\n\nexport default (value: any): any => {\n  if (isNgDef(value, 'c')) {\n    return coreReflectDirectiveResolve(value);\n  }\n  if (isNgDef(value, 'd')) {\n    return coreReflectDirectiveResolve(value);\n  }\n  if (isNgDef(value, 'm')) {\n    return coreReflectModuleResolve(value);\n  }\n\n  return undefined;\n};\n","var x = y => { var x = {}; __webpack_require__.d(x, y); return x; }\nvar y = x => () => x\nconst __WEBPACK_NAMESPACE_OBJECT__ = x({ [\"AbstractControl\"]: () => __WEBPACK_EXTERNAL_MODULE__angular_forms_df10eade__.AbstractControl, [\"DefaultValueAccessor\"]: () => __WEBPACK_EXTERNAL_MODULE__angular_forms_df10eade__.DefaultValueAccessor, [\"FormControl\"]: () => __WEBPACK_EXTERNAL_MODULE__angular_forms_df10eade__.FormControl, [\"FormControlDirective\"]: () => __WEBPACK_EXTERNAL_MODULE__angular_forms_df10eade__.FormControlDirective, [\"NG_ASYNC_VALIDATORS\"]: () => __WEBPACK_EXTERNAL_MODULE__angular_forms_df10eade__.NG_ASYNC_VALIDATORS, [\"NG_VALIDATORS\"]: () => __WEBPACK_EXTERNAL_MODULE__angular_forms_df10eade__.NG_VALIDATORS, [\"NG_VALUE_ACCESSOR\"]: () => __WEBPACK_EXTERNAL_MODULE__angular_forms_df10eade__.NG_VALUE_ACCESSOR, [\"NgControl\"]: () => __WEBPACK_EXTERNAL_MODULE__angular_forms_df10eade__.NgControl, [\"NgModel\"]: () => __WEBPACK_EXTERNAL_MODULE__angular_forms_df10eade__.NgModel });","import * as module from '@angular/forms';\n\nconst AbstractControl = module.AbstractControl;\nconst DefaultValueAccessor = module.DefaultValueAccessor;\nconst FormControl = module.FormControl;\nconst FormControlDirective = module.FormControlDirective;\nconst NG_ASYNC_VALIDATORS = module.NG_ASYNC_VALIDATORS;\nconst NG_VALIDATORS = module.NG_VALIDATORS;\nconst NG_VALUE_ACCESSOR = module.NG_VALUE_ACCESSOR;\nconst NgControl = module.NgControl;\nconst NgModel = module.NgModel;\n\nexport default {\n  AbstractControl,\n  DefaultValueAccessor,\n  FormControl,\n  FormControlDirective,\n  NG_ASYNC_VALIDATORS,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  NgControl,\n  NgModel,\n};\n","import { Injector, TemplateRef, ViewContainerRef } from '@angular/core';\n\nimport { MockConfig } from './mock';\n\nexport default <T>(\n  value: T,\n): value is T &\n  MockConfig & {\n    __ngMocksInjector?: Injector;\n    __template?: TemplateRef<any>;\n    __vcr?: ViewContainerRef;\n  } => {\n  return value && typeof value === 'object' && !!(value as any).__ngMocks;\n};\n","import { AsyncValidator, ControlValueAccessor, ValidationErrors, Validator } from '@angular/forms';\n\nimport { AnyType } from './core.types';\nimport { MockControlValueAccessor, MockValidator } from './mock-control-value-accessor';\n\nconst applyProxy = (proxy: any, method: string, value: any, storage?: string) => {\n  if (proxy.instance && storage) {\n    proxy.instance[storage] = value;\n  }\n  if (proxy.instance && proxy.instance[method]) {\n    return proxy.instance[method](value);\n  }\n};\n\nexport class MockControlValueAccessorProxy implements ControlValueAccessor {\n  public instance?: Partial<MockControlValueAccessor & ControlValueAccessor>;\n\n  public constructor(public readonly target?: AnyType<any>) {}\n\n  public registerOnChange(fn: any): void {\n    applyProxy(this, 'registerOnChange', fn, '__simulateChange');\n  }\n\n  public registerOnTouched(fn: any): void {\n    applyProxy(this, 'registerOnTouched', fn, '__simulateTouch');\n  }\n\n  public setDisabledState(isDisabled: boolean): void {\n    applyProxy(this, 'setDisabledState', isDisabled);\n  }\n\n  public writeValue(value: any): void {\n    applyProxy(this, 'writeValue', value);\n  }\n}\n\nexport class MockValidatorProxy implements Validator {\n  public instance?: Partial<MockValidator & Validator>;\n\n  public constructor(public readonly target?: AnyType<any>) {}\n\n  public registerOnValidatorChange(fn: any): void {\n    applyProxy(this, 'registerOnValidatorChange', fn, '__simulateValidatorChange');\n  }\n\n  public validate(control: any): ValidationErrors | null {\n    if (this.instance && this.instance.validate) {\n      return this.instance.validate(control);\n    }\n\n    return null;\n  }\n}\n\nexport class MockAsyncValidatorProxy implements AsyncValidator {\n  public instance?: Partial<MockValidator & AsyncValidator>;\n\n  public constructor(public readonly target?: AnyType<any>) {}\n\n  public registerOnValidatorChange(fn: any): void {\n    applyProxy(this, 'registerOnValidatorChange', fn, '__simulateValidatorChange');\n  }\n\n  public validate(control: any): any {\n    if (this.instance && this.instance.validate) {\n      const result: any = this.instance.validate(control);\n\n      return result === undefined ? Promise.resolve(null) : result;\n    }\n\n    return Promise.resolve(null);\n  }\n}\n","import { EventEmitter, Injector, Optional, PipeTransform, Self } from '@angular/core';\n\nimport { IMockBuilderConfig } from '../mock-builder/types';\nimport mockHelperStub from '../mock-helper/mock-helper.stub';\nimport mockInstanceApply from '../mock-instance/mock-instance-apply';\nimport helperMockService from '../mock-service/helper.mock-service';\n\nimport coreDefineProperty from './core.define-property';\nimport coreForm from './core.form';\nimport { mapValues } from './core.helpers';\nimport { AnyType, DirectiveIo } from './core.types';\nimport funcDirectiveIoParse from './func.directive-io-parse';\nimport funcIsMock from './func.is-mock';\nimport { MockControlValueAccessorProxy } from './mock-control-value-accessor-proxy';\nimport ngMocksUniverse from './ng-mocks-universe';\n\nconst setValueAccessor = (instance: any, ngControl?: any) => {\n  if (ngControl && !ngControl.valueAccessor && instance.__ngMocksConfig.setControlValueAccessor) {\n    try {\n      ngControl.valueAccessor = new MockControlValueAccessorProxy(instance.__ngMocksCtor);\n    } catch {\n      // nothing to do.\n    }\n  }\n};\n\n// connecting to NG_VALUE_ACCESSOR\nconst installValueAccessor = (ngControl: any, instance: any) => {\n  if (!ngControl.valueAccessor.instance && ngControl.valueAccessor.target === instance.__ngMocksCtor) {\n    ngControl.valueAccessor.instance = instance;\n    helperMockService.mock(instance, 'registerOnChange');\n    helperMockService.mock(instance, 'registerOnTouched');\n    helperMockService.mock(instance, 'setDisabledState');\n    helperMockService.mock(instance, 'writeValue');\n    instance.__ngMocksConfig.isControlValueAccessor = true;\n  }\n};\n\n// connecting to NG_VALIDATORS\n// connecting to NG_ASYNC_VALIDATORS\nconst installValidator = (validators: any[], instance: any) => {\n  for (const validator of validators) {\n    if (!validator.instance && validator.target === instance.__ngMocksCtor) {\n      validator.instance = instance;\n      helperMockService.mock(instance, 'registerOnValidatorChange');\n      helperMockService.mock(instance, 'validate');\n      instance.__ngMocksConfig.isValidator = true;\n    }\n  }\n};\n\nconst applyNgValueAccessor = (instance: any, ngControl: any) => {\n  setValueAccessor(instance, ngControl);\n\n  try {\n    // istanbul ignore else\n    if (ngControl) {\n      installValueAccessor(ngControl, instance);\n      installValidator(ngControl._rawValidators, instance);\n      installValidator(ngControl._rawAsyncValidators, instance);\n    }\n  } catch {\n    // nothing to do.\n  }\n};\n\nconst applyOutputs = (instance: MockConfig & Record<keyof any, any>) => {\n  const mockOutputs = [];\n  for (const output of instance.__ngMocksConfig.outputs || []) {\n    mockOutputs.push(funcDirectiveIoParse(output).name);\n  }\n\n  for (const output of mockOutputs) {\n    if (instance[output] || Object.getOwnPropertyDescriptor(instance, output)) {\n      continue;\n    }\n    instance[output] = new EventEmitter<any>();\n  }\n};\n\nconst applyPrototype = (instance: Mock, prototype: AnyType<any>) => {\n  for (const prop of [\n    ...helperMockService.extractMethodsFromPrototype(prototype),\n    ...helperMockService.extractPropertiesFromPrototype(prototype),\n  ]) {\n    const descriptor = helperMockService.extractPropertyDescriptor(prototype, prop);\n    helperMockService.definePropertyDescriptor(instance, prop, descriptor);\n  }\n};\n\nconst applyMethods = (instance: Mock & Record<keyof any, any>, prototype: AnyType<any>) => {\n  for (const method of helperMockService.extractMethodsFromPrototype(prototype)) {\n    if (instance[method] || Object.getOwnPropertyDescriptor(instance, method)) {\n      continue;\n    }\n    helperMockService.mock(instance, method);\n  }\n};\n\nconst applyProps = (instance: Mock & Record<keyof any, any>, prototype: AnyType<any>) => {\n  for (const prop of helperMockService.extractPropertiesFromPrototype(prototype)) {\n    if (instance[prop] || Object.getOwnPropertyDescriptor(instance, prop)) {\n      continue;\n    }\n    helperMockService.mock(instance, prop, 'get');\n    helperMockService.mock(instance, prop, 'set');\n  }\n};\n\nexport type ngMocksMockConfig = {\n  config?: IMockBuilderConfig;\n  hostBindings?: string[];\n  hostListeners?: string[];\n  init?: (instance: any) => void;\n  isControlValueAccessor?: boolean;\n  isValidator?: boolean;\n  outputs?: Array<DirectiveIo>;\n  queryScanKeys?: string[];\n  setControlValueAccessor?: boolean;\n  transform?: PipeTransform['transform'];\n};\n\nconst applyOverrides = (instance: any, mockOf: any, injector?: Injector): void => {\n  const configGlobal: Set<any> | undefined = ngMocksUniverse.getOverrides().get(mockOf);\n  const callbacks = configGlobal ? mapValues(configGlobal) : [];\n  if (instance.__ngMocksConfig.init) {\n    callbacks.push(instance.__ngMocksConfig.init);\n  }\n  callbacks.push(...mockInstanceApply(mockOf));\n\n  for (const callback of callbacks) {\n    const overrides = callback(instance, injector);\n    if (!overrides) {\n      continue;\n    }\n    mockHelperStub(instance, overrides);\n  }\n};\n\nexport interface MockConfig {\n  __ngMocksConfig: ngMocksMockConfig;\n}\n\n/**\n * Mock class is the base class for each mock.\n * Usually, it should not be used directly.\n */\nexport class Mock {\n  protected __ngMocksConfig!: ngMocksMockConfig;\n\n  public constructor(\n    injector: Injector | null = null,\n    ngControl: any | null = null, // NgControl\n  ) {\n    const mockOf = (this.constructor as any).mockOf;\n    coreDefineProperty(this, '__ngMocks', true);\n    coreDefineProperty(this, '__ngMocksInjector', injector);\n    coreDefineProperty(this, '__ngMocksCtor', this.constructor);\n    for (const key of this.__ngMocksConfig.queryScanKeys || /* istanbul ignore next */ []) {\n      coreDefineProperty(this, `__ngMocksVcr_${key}`, undefined);\n    }\n    for (const key of this.__ngMocksConfig.hostBindings || /* istanbul ignore next */ []) {\n      helperMockService.mock(this, key, 'get');\n      helperMockService.mock(this, key, 'set');\n    }\n    for (const key of this.__ngMocksConfig.hostListeners || /* istanbul ignore next */ []) {\n      helperMockService.mock(this, key);\n    }\n\n    // istanbul ignore else\n    if (funcIsMock(this)) {\n      applyNgValueAccessor(this, ngControl);\n      applyOutputs(this);\n      applyPrototype(this, Object.getPrototypeOf(this));\n      applyMethods(this, mockOf.prototype);\n      applyProps(this, mockOf.prototype);\n    }\n\n    // and faking prototype\n    Object.setPrototypeOf(this, mockOf.prototype);\n\n    applyOverrides(this, mockOf, injector ?? undefined);\n  }\n}\n\ncoreDefineProperty(Mock, 'parameters', [\n  [Injector, new Optional()],\n  [coreForm.NgControl || /* istanbul ignore next */ (() => undefined), new Optional(), new Self()],\n]);\n","import { Mock } from './mock';\n\n/**\n * LegacyControlValueAccessor was used to be a way to manipulate a mock ControlValueAccessor.\n *\n * @deprecated use isMockControlValueAccessor or isMockValidator instead (removing in A13)\n * @see https://ng-mocks.sudo.eu/api/helpers/isMockControlValueAccessor\n * @see https://ng-mocks.sudo.eu/api/helpers/isMockValidator\n */\nexport class LegacyControlValueAccessor extends Mock {\n  /**\n   * @deprecated use isMockControlValueAccessor instead (removing in A13)\n   * @see https://ng-mocks.sudo.eu/api/helpers/isMockControlValueAccessor\n   */\n  public __simulateChange(value: any): void;\n  // istanbul ignore next\n  public __simulateChange() {\n    // nothing to do.\n  }\n\n  // istanbul ignore next\n  /**\n   * @deprecated use isMockControlValueAccessor instead (removing in A13)\n   * @see https://ng-mocks.sudo.eu/api/helpers/isMockControlValueAccessor\n   */\n  public __simulateTouch() {\n    // nothing to do.\n  }\n\n  // istanbul ignore next\n  /**\n   * @deprecated use isMockValidator instead (removing in A13)\n   * @see https://ng-mocks.sudo.eu/api/helpers/isMockValidator\n   */\n  public __simulateValidatorChange() {\n    // nothing to do.\n  }\n}\n\n/**\n * MockControlValueAccessor exposes access to a mock ControlValueAccessor.\n * It should be used in a combination with isMockControlValueAccessor.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isMockControlValueAccessor\n */\nexport interface MockControlValueAccessor {\n  /**\n   * It simulates an external change of the value.\n   * Please consider usage of ngMocks.change().\n   *\n   * @see https://ng-mocks.sudo.eu/extra/mock-form-controls\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/change\n   */\n  __simulateChange(value: any): void;\n\n  /**\n   * It simulates an external touch.\n   * Please consider usage of ngMocks.touch().\n   *\n   * @see https://ng-mocks.sudo.eu/extra/mock-form-controls\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/touch\n   */\n  __simulateTouch(): void;\n}\n\n/**\n * MockValidator exposes access to a mock Validator.\n * It should be used in a combination with isMockValidator.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isMockValidator\n */\nexport interface MockValidator {\n  /**\n   * it simulates an external validation change.\n   *\n   * @see https://ng-mocks.sudo.eu/extra/mock-form-controls\n   */\n  __simulateValidatorChange(): void;\n}\n","import { Input } from '@angular/core';\n\nimport { AnyType, DirectiveIo } from './core.types';\nimport funcDirectiveIoBuild from './func.directive-io-build';\nimport funcDirectiveIoParse from './func.directive-io-parse';\n\n// Looks like an A9 bug, that queries from @Component are not processed.\n// Also, we have to pass prototype, not the class.\n// The same issue happens with outputs, but time to time\n// (when I restart tests with refreshing browser manually).\n// https://github.com/help-me-mom/ng-mocks/issues/109\nexport default (cls: AnyType<any>, inputs?: Array<DirectiveIo>, exclude?: string[]) => {\n  // istanbul ignore else\n  if (inputs) {\n    for (const input of inputs) {\n      const { name, alias, required } = funcDirectiveIoParse(input);\n      if (exclude && exclude.indexOf(name) !== -1) {\n        continue;\n      }\n      Input(funcDirectiveIoBuild({ name, alias, required }, true) as never)(cls.prototype, name);\n    }\n  }\n};\n","import coreDefineProperty from './core.define-property';\nimport { AnyType } from './core.types';\nimport funcGetName from './func.get-name';\nimport { ngMocksMockConfig } from './mock';\nimport ngMocksUniverse from './ng-mocks-universe';\n\nexport default (mock: AnyType<any>, source: AnyType<any>, configInput: ngMocksMockConfig = {}): void => {\n  coreDefineProperty(mock, 'mockOf', source);\n  coreDefineProperty(mock, 'nameConstructor', funcGetName(mock));\n  coreDefineProperty(mock, 'name', `MockOf${funcGetName(source)}`, true);\n  const config = ngMocksUniverse.getConfigMock().has(source)\n    ? {\n        ...configInput,\n        config: {\n          ...ngMocksUniverse.getConfigMock().get(source),\n          ...configInput.config,\n        },\n      }\n    : configInput;\n  coreDefineProperty(mock.prototype, '__ngMocksConfig', config);\n};\n","import { ContentChild, ContentChildren, Query, ViewChild, ViewChildren, ViewContainerRef } from '@angular/core';\n\nimport { AnyType } from './core.types';\n\nconst map: any = {\n  ContentChild,\n  ContentChildren,\n  ViewChild,\n  ViewChildren,\n};\n\nconst isInternalKey = (key: string): boolean => {\n  return key.indexOf('__mock') === 0;\n};\n\nconst cloneVcrQuery = (query: Query & { ngMetadataName?: string }) => ({\n  ...query,\n  ngMetadataName: query.ngMetadataName,\n  read: ViewContainerRef,\n});\n\nconst generateFinalQueries = (queries: {\n  [key: string]: Query;\n}): [Array<[string, Query & { ngMetadataName?: string }]>, string[]] => {\n  const final: Array<[string, Query & { ngMetadataName?: string }]> = [];\n  const scanKeys: string[] = [];\n\n  for (const key of Object.keys(queries)) {\n    const query: Query & { ngMetadataName?: string } = queries[key];\n    final.push([key, query]);\n\n    if (!query.isViewQuery && !isInternalKey(key)) {\n      scanKeys.push(key);\n      final.push([`__ngMocksVcr_${key}`, cloneVcrQuery(query)]);\n    }\n  }\n\n  return [final, scanKeys];\n};\n\n// Looks like an A9 bug, that queries from @Component are not processed.\n// Also, we have to pass prototype, not the class.\n// The same issue happens with outputs, but time to time\n// (when I restart tests with refreshing browser manually).\n// https://github.com/help-me-mom/ng-mocks/issues/109\nexport default (cls: AnyType<any>, queries?: { [key: string]: Query }): string[] => {\n  // istanbul ignore if\n  if (!queries) {\n    return [];\n  }\n  const [final, keys] = generateFinalQueries(queries);\n\n  for (const [key, query] of final) {\n    // istanbul ignore else\n    if (query.ngMetadataName) {\n      const decorator = map[query.ngMetadataName];\n      decorator(query.selector, query)(cls.prototype, key);\n    }\n  }\n\n  return keys;\n};\n","import { AnyType } from '../common/core.types';\n\nexport default (provide: AnyType<any>, useExisting: AnyType<any>) => ({\n  provide,\n  useExisting,\n});\n","import { AnyType } from '../common/core.types';\n\nexport default (provide: AnyType<any>, useFactory: any) => ({\n  multi: true,\n  provide,\n  useFactory,\n});\n","import { Provider } from '@angular/core';\n\nimport CoreDefStack from '../common/core.def-stack';\nimport coreForm from '../common/core.form';\nimport { flatten } from '../common/core.helpers';\nimport { AnyType } from '../common/core.types';\nimport funcExtractForwardRef from '../common/func.extract-forward-ref';\nimport funcGetType from '../common/func.get-type';\nimport {\n  MockAsyncValidatorProxy,\n  MockControlValueAccessorProxy,\n  MockValidatorProxy,\n} from '../common/mock-control-value-accessor-proxy';\nimport helperMockService from '../mock-service/helper.mock-service';\n\nimport toExistingProvider from './to-existing-provider';\nimport toFactoryProvider from './to-factory-provider';\n\nconst processTokens = (mockType: AnyType<any>, provider: any) => {\n  const provide = funcGetType(provider);\n  if (coreForm.NG_VALIDATORS && provide === coreForm.NG_VALIDATORS) {\n    return toFactoryProvider(provide, () => new MockValidatorProxy(mockType));\n  }\n  if (coreForm.NG_ASYNC_VALIDATORS && provide === coreForm.NG_ASYNC_VALIDATORS) {\n    return toFactoryProvider(provide, () => new MockAsyncValidatorProxy(mockType));\n  }\n  if (coreForm.NG_VALUE_ACCESSOR && provide === coreForm.NG_VALUE_ACCESSOR) {\n    return toFactoryProvider(provide, () => new MockControlValueAccessorProxy(mockType));\n  }\n\n  return undefined;\n};\n\nconst processOwnUseExisting = (sourceType: AnyType<any>, mockType: AnyType<any>, provider: any) => {\n  const provide = funcGetType(provider);\n\n  // Check tests/issue-302/test.spec.ts\n  if (provide === coreForm.NgControl || provide === coreForm.FormControlDirective) {\n    return undefined;\n  }\n\n  if (provider !== provide && funcExtractForwardRef(provider.useExisting) === sourceType) {\n    return toExistingProvider(provide, mockType);\n  }\n\n  return undefined;\n};\n\nconst processProvider = (\n  sourceType: AnyType<any>,\n  mockType: AnyType<any>,\n  provider: any,\n  resolutions: CoreDefStack<any, any>,\n): any => {\n  const token = processTokens(mockType, provider);\n  if (token) {\n    return token;\n  }\n\n  const ownUseExisting = processOwnUseExisting(sourceType, mockType, provider);\n  if (ownUseExisting) {\n    return ownUseExisting;\n  }\n\n  return helperMockService.resolveProvider(provider, resolutions);\n};\n\nexport default (\n  sourceType: AnyType<any>,\n  mockType: AnyType<any>,\n  providers: any[],\n  resolutions: CoreDefStack<any, any>,\n): {\n  providers: Provider[];\n  setControlValueAccessor?: boolean;\n} => {\n  const result: Provider[] = [];\n  let setControlValueAccessor: boolean | undefined;\n\n  for (const provider of flatten(providers || /* istanbul ignore next */ [])) {\n    const provide = funcGetType(provider);\n    if (provide === coreForm.NG_VALUE_ACCESSOR) {\n      setControlValueAccessor = false;\n    }\n    const mock = processProvider(sourceType, mockType, provider, resolutions);\n    if (mock) {\n      result.push(mock);\n    }\n  }\n\n  return {\n    providers: result,\n    setControlValueAccessor,\n  };\n};\n","import { Component, Directive, NgModule, ViewChild } from '@angular/core';\n\nimport CoreDefStack from '../common/core.def-stack';\nimport { AnyType, DirectiveIo } from '../common/core.types';\nimport decorateInputs from '../common/decorate.inputs';\nimport decorateMock from '../common/decorate.mock';\nimport decorateOutputs from '../common/decorate.outputs';\nimport decorateQueries from '../common/decorate.queries';\nimport { ngMocksMockConfig } from '../common/mock';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\nimport mockNgDef from '../mock-module/mock-ng-def';\nimport helperMockService from '../mock-service/helper.mock-service';\n\nimport cloneProviders from './clone-providers';\nimport toExistingProvider from './to-existing-provider';\n\nconst buildConfig = (\n  source: AnyType<any>,\n  meta: {\n    inputs?: Array<DirectiveIo>;\n    outputs?: Array<DirectiveIo>;\n    providers?: NgModule['providers'];\n    queries?: Record<string, ViewChild>;\n  },\n  setControlValueAccessor: boolean,\n) => {\n  return {\n    config: ngMocksUniverse.config.get(source),\n    outputs: meta.outputs,\n    queryScanKeys: [],\n    setControlValueAccessor: setControlValueAccessor,\n  };\n};\n\nexport default <T extends Component & Directive>(\n  source: AnyType<any>,\n  mock: AnyType<any>,\n  meta: Component &\n    Directive &\n    NgModule & {\n      hostBindings?: Array<[string, any]>;\n      hostListeners?: Array<[string, any, any]>;\n      hostDirectives?: Array<AnyType<any> | { directive: AnyType<any> }>;\n      imports?: any[];\n      standalone?: boolean;\n    },\n  params: T,\n): Component & Directive => {\n  const hasResolver = ngMocksUniverse.config.has('mockNgDefResolver');\n  if (!hasResolver) {\n    ngMocksUniverse.config.set('mockNgDefResolver', new CoreDefStack());\n  }\n\n  const options: T & { imports?: any[]; hostDirectives?: any[]; standalone?: boolean } = {\n    ...params,\n  };\n\n  if (meta.exportAs !== undefined) {\n    options.exportAs = meta.exportAs;\n  }\n  if (meta.selector !== undefined) {\n    options.selector = meta.selector;\n  }\n  if (meta.standalone !== undefined) {\n    options.standalone = meta.standalone;\n  }\n\n  if (meta.standalone && meta.imports) {\n    const [, { imports }] = mockNgDef({ imports: meta.imports, skipExports: true });\n    if (imports?.length) {\n      options.imports = imports as never;\n    }\n  }\n\n  if (meta.hostDirectives) {\n    const [, { hostDirectives }] = mockNgDef({ hostDirectives: meta.hostDirectives, skipExports: true });\n    if (hostDirectives?.length) {\n      options.hostDirectives = hostDirectives;\n    }\n  }\n\n  const { setControlValueAccessor, providers } = cloneProviders(\n    source,\n    mock,\n    meta.providers || [],\n    ngMocksUniverse.config.get('mockNgDefResolver'),\n  );\n  providers.push(toExistingProvider(source, mock));\n  options.providers = providers;\n\n  const { providers: viewProviders } = cloneProviders(\n    source,\n    mock,\n    meta.viewProviders || [],\n    ngMocksUniverse.config.get('mockNgDefResolver'),\n  );\n  if (viewProviders.length > 0) {\n    options.viewProviders = viewProviders;\n  }\n\n  const config: ngMocksMockConfig = buildConfig(\n    source,\n    meta,\n    setControlValueAccessor ??\n      helperMockService.extractMethodsFromPrototype(source.prototype).indexOf('writeValue') !== -1,\n  );\n  decorateMock(mock, source, config);\n\n  // istanbul ignore else\n  if (meta.queries) {\n    decorateInputs(mock, meta.inputs, Object.keys(meta.queries));\n  }\n  decorateOutputs(mock, meta.outputs);\n  config.queryScanKeys = decorateQueries(mock, meta.queries);\n\n  config.hostBindings = [];\n  for (const [key] of meta.hostBindings || /* istanbul ignore next */ []) {\n    // mock declarations should not have side effects based on host bindings.\n    // HostBinding(...args)(mock.prototype, key);\n    if (config.hostBindings.indexOf(key) === -1) {\n      config.hostBindings.push(key);\n    }\n  }\n\n  config.hostListeners = [];\n  for (const [key] of meta.hostListeners || /* istanbul ignore next */ []) {\n    // mock declarations should not have side effects based on host bindings.\n    // HostListener(...args)(mock.prototype, key);\n    if (config.hostListeners.indexOf(key) === -1) {\n      config.hostListeners.push(key);\n    }\n  }\n\n  if (!hasResolver) {\n    ngMocksUniverse.config.delete('mockNgDefResolver');\n  }\n\n  return options;\n};\n","import { Output } from '@angular/core';\n\nimport { AnyType, DirectiveIo } from './core.types';\nimport funcDirectiveIoBuild from './func.directive-io-build';\nimport funcDirectiveIoParse from './func.directive-io-parse';\n\n// Looks like an A9 bug, that queries from @Component are not processed.\n// Also, we have to pass prototype, not the class.\n// The same issue happens with outputs, but time to time\n// (when I restart tests with refreshing browser manually).\n// https://github.com/help-me-mom/ng-mocks/issues/109\nexport default (cls: AnyType<any>, outputs?: Array<DirectiveIo>) => {\n  // istanbul ignore else\n  if (outputs) {\n    for (const output of outputs) {\n      const { name, alias, required } = funcDirectiveIoParse(output);\n      Output(funcDirectiveIoBuild({ name, alias, required }, true) as never)(cls.prototype, name);\n    }\n  }\n};\n","import funcGetName from './func.get-name';\nimport { isNgDef } from './func.is-ng-def';\n\nconst getType = (value: any): string =>\n  isNgDef(value, 'p')\n    ? 'pipe'\n    : isNgDef(value, 'd')\n    ? 'directive'\n    : isNgDef(value, 'c')\n    ? 'component'\n    : isNgDef(value, 'm')\n    ? 'module'\n    : isNgDef(value, 'i')\n    ? 'service'\n    : isNgDef(value, 't')\n    ? 'token'\n    : '';\n\nexport default (value: any, funcName: string) => {\n  if (value === undefined || value === null) {\n    throw new Error(`null / undefined has been passed into ${funcName}. Please check that its import is correct.`);\n  }\n\n  if (funcName === 'MockPipe' && isNgDef(value, 'p')) {\n    return;\n  }\n  if (funcName === 'MockDirective' && isNgDef(value, 'd')) {\n    return;\n  }\n  if (funcName === 'MockComponent' && isNgDef(value, 'c')) {\n    return;\n  }\n  if (funcName === 'MockModule' && isNgDef(value, 'm')) {\n    return;\n  }\n\n  const type = getType(value);\n\n  if (type && funcName === 'MockPipe') {\n    throw new Error(`${funcName} accepts pipes, whereas ${funcGetName(value)} is a ${type}.`);\n  }\n  if (type && funcName === 'MockDirective') {\n    throw new Error(`${funcName} accepts directives, whereas ${funcGetName(value)} is a ${type}.`);\n  }\n  if (type && funcName === 'MockComponent') {\n    throw new Error(`${funcName} accepts components, whereas ${funcGetName(value)} is a ${type}.`);\n  }\n  if (type && funcName === 'MockModule') {\n    throw new Error(`${funcName} accepts modules, whereas ${funcGetName(value)} is a ${type}.`);\n  }\n};\n","import { MockedComponent } from '../mock-component/types';\nimport { MockedDirective } from '../mock-directive/types';\nimport { MockedModule } from '../mock-module/types';\nimport { MockedPipe } from '../mock-pipe/types';\n\nimport { AnyType, Type } from './core.types';\nimport { isNgDef } from './func.is-ng-def';\n\n/**\n * isMockNgDef verifies whether a class is a mock component class.\n *\n * @internal\n *\n * ```ts\n * isMockNgDef(MockComponent, 'c'); // returns true\n * isMockNgDef(RealComponent, 'c'); // returns false\n * isMockNgDef(ArbitraryClass, 'c'); // returns false\n * ```\n */\nexport function isMockNgDef<T>(component: AnyType<T>, ngType: 'c'): component is Type<MockedComponent<T>>;\n\n/**\n * isMockNgDef verifies whether a class is a mock directive class.\n *\n * @internal\n *\n * ```ts\n * isMockNgDef(MockDirective, 'd'); // returns true\n * isMockNgDef(RealDirective, 'd'); // returns false\n * isMockNgDef(ArbitraryClass, 'd'); // returns false\n * ```\n */\nexport function isMockNgDef<T>(directive: AnyType<T>, ngType: 'd'): directive is Type<MockedDirective<T>>;\n\n/**\n * isMockNgDef verifies whether a class is a mock pipe class.\n *\n * @internal\n *\n * ```ts\n * isMockNgDef(MockPipe, 'p'); // returns true\n * isMockNgDef(RealPipe, 'p'); // returns false\n * isMockNgDef(ArbitraryClass, 'p'); // returns false\n * ```\n */\nexport function isMockNgDef<T>(pipe: AnyType<T>, ngType: 'p'): pipe is Type<MockedPipe<T>>;\n\n/**\n * isMockNgDef verifies whether a class is a mock module class.\n *\n * @internal\n *\n * ```ts\n * isMockNgDef(MockModule, 'm'); // returns true\n * isMockNgDef(RealModule, 'm'); // returns false\n * isMockNgDef(ArbitraryClass, 'm'); // returns false\n * ```\n */\nexport function isMockNgDef<T>(module: AnyType<T>, ngType: 'm'): module is Type<MockedModule<T>>;\n\n/**\n * isMockNgDef verifies whether a class is a mock class.\n *\n * @internal\n *\n * ```ts\n * isMockNgDef(MockComponent); // returns true\n * isMockNgDef(RealModule); // returns false\n * isMockNgDef(ArbitraryClass); // returns false\n * ```\n */\nexport function isMockNgDef<T>(module: Type<T>): module is Type<T>;\n\nexport function isMockNgDef<TComponent>(\n  component: AnyType<TComponent> & { mockOf?: any },\n  type?: 'c' | 'd' | 'p' | 'm',\n): component is Type<TComponent> {\n  if (!(component as any).mockOf) {\n    return false;\n  }\n  if (!type) {\n    return true;\n  }\n\n  return isNgDef(component.mockOf, type as never);\n}\n","import { ComponentFixture, getTestBed } from '@angular/core/testing';\n\nexport default () => {\n  const fixtures: Array<ComponentFixture<any>> = (getTestBed() as any)._activeFixtures;\n\n  return fixtures[fixtures.length - 1];\n};\n","import { NG_MOCKS } from '../common/core.tokens';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\nimport funcGetLastFixture from '../mock-helper/func.get-last-fixture';\n\nexport default (declaration: any) => {\n  let result: any;\n\n  try {\n    result = funcGetLastFixture().debugElement.injector.get(NG_MOCKS).get(declaration);\n  } catch {\n    // nothing to do.\n  }\n\n  if (!result) {\n    result = ngMocksUniverse.cacheDeclarations.get(declaration);\n  }\n\n  if (declaration.__ngMocksResolutions && ngMocksUniverse.config.has('mockNgDefResolver')) {\n    ngMocksUniverse.config.get('mockNgDefResolver').merge(declaration.__ngMocksResolutions);\n  }\n\n  return result;\n};\n","import { extendClass } from '../common/core.helpers';\nimport funcImportExists from '../common/func.import-exists';\nimport { isMockNgDef } from '../common/func.is-mock-ng-def';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nimport returnCachedMock from './return-cached-mock';\n\nexport default (def: any, type: any, func: string, cacheFlag: string, base: any, decorator: any) => {\n  funcImportExists(def, func);\n\n  if (isMockNgDef(def, type)) {\n    return def;\n  }\n\n  if (ngMocksUniverse.flags.has(cacheFlag) && ngMocksUniverse.cacheDeclarations.has(def)) {\n    return returnCachedMock(def);\n  }\n\n  const hasNgMocksDepsResolution = ngMocksUniverse.config.has('ngMocksDepsResolution');\n  if (!hasNgMocksDepsResolution) {\n    ngMocksUniverse.config.set('ngMocksDepsResolution', new Map());\n  }\n\n  const mock = extendClass(base);\n  decorator(def, mock);\n\n  // istanbul ignore else\n  if (ngMocksUniverse.flags.has(cacheFlag)) {\n    ngMocksUniverse.cacheDeclarations.set(def, mock);\n  }\n\n  if (!hasNgMocksDepsResolution) {\n    ngMocksUniverse.config.delete('ngMocksDepsResolution');\n  }\n\n  return mock as any;\n};\n","import { Query, TemplateRef, ViewChild, ViewContainerRef } from '@angular/core';\n\nconst viewChildArgs: any = { read: ViewContainerRef, static: false };\n\nconst viewChildTemplate = (selector: string, key: string): string =>\n  `<div *ngIf=\"ngMocksRender_${key}_${selector}\" data-${key}=\"${selector}\"><ng-template #${key}_${selector}></ng-template></div>`;\n\nconst isTemplateRefQuery = (query: Query): boolean => {\n  if (query.isViewQuery) {\n    return false; // ignoring all internal @ViewChild\n  }\n  if (query.read && query.read !== TemplateRef) {\n    return false; // ignoring read of instances\n  }\n  if (typeof query.selector !== 'string' && !query.read) {\n    return false; // ignoring class selectors if they do not read TemplateRef\n  }\n\n  return true;\n};\n\nexport default (queries?: Record<keyof any, any>): string => {\n  const parts = ['<ng-content></ng-content>'];\n  // istanbul ignore if\n  if (!queries) {\n    return parts.join('');\n  }\n\n  for (const key of Object.keys(queries)) {\n    const query: Query = queries[key];\n    if (!isTemplateRefQuery(query)) {\n      continue;\n    }\n    if (typeof query.selector === 'string') {\n      const selector = query.selector.replace(new RegExp('\\\\W', 'mg'), '_');\n      queries[`__mockView_key_${selector}`] = new ViewChild(`key_${selector}`, viewChildArgs);\n      queries[`__mockTpl_key_${selector}`] = query;\n      parts.push(viewChildTemplate(selector, 'key'));\n    }\n    queries[`__mockView_prop_${key}`] = new ViewChild(`prop_${key}`, viewChildArgs);\n    parts.push(viewChildTemplate(key, 'prop'));\n  }\n\n  return parts.join('');\n};\n","export default (\n  contentChildSelector: string | [string, ...number[]],\n): [string, string, string, undefined | number[]] => {\n  if (typeof contentChildSelector === 'string') {\n    return ['key', `__mockTpl_key_${contentChildSelector}`, contentChildSelector, undefined];\n  }\n\n  const [key, ...indices] = contentChildSelector;\n\n  return ['prop', key, key, indices.length > 0 ? indices : undefined];\n};\n","import {\n  AfterContentInit,\n  ChangeDetectorRef,\n  Component,\n  EmbeddedViewRef,\n  Injector,\n  Optional,\n  QueryList,\n  Self,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\n\nimport coreDefineProperty from '../common/core.define-property';\nimport coreForm from '../common/core.form';\nimport coreReflectDirectiveResolve from '../common/core.reflect.directive-resolve';\nimport { Type } from '../common/core.types';\nimport funcIsMock from '../common/func.is-mock';\nimport { MockConfig } from '../common/mock';\nimport { LegacyControlValueAccessor } from '../common/mock-control-value-accessor';\nimport decorateDeclaration from '../mock/decorate-declaration';\nimport getMock from '../mock/get-mock';\n\nimport generateTemplate from './render/generate-template';\nimport getKey from './render/get-key';\nimport { MockedComponent } from './types';\n\nconst mixRenderPrepareVcr = (\n  instance: MockConfig & Record<keyof any, any>,\n  type: string,\n  selector: string,\n  cdr: ChangeDetectorRef,\n): ViewContainerRef | undefined => {\n  if (!instance[`ngMocksRender_${type}_${selector}`]) {\n    instance[`ngMocksRender_${type}_${selector}`] = true;\n    cdr.detectChanges();\n  }\n\n  return instance[`__mockView_${type}_${selector}`];\n};\n\nconst mixRenderReorderViews = (\n  viewContainer: ViewContainerRef,\n  views: Array<EmbeddedViewRef<any>>,\n  index: number,\n): void => {\n  for (const view of views.splice(index + 1)) {\n    view.destroy();\n  }\n\n  let viewIndex = 0;\n  for (const view of views) {\n    if (!view) {\n      continue;\n    }\n    viewContainer.move(view, viewIndex);\n    viewIndex += 1;\n  }\n};\n\nconst mixRenderApplyContext = (view: EmbeddedViewRef<any>, context: Record<keyof any, any>): void => {\n  for (const contextKey of Object.keys(view.context)) {\n    view.context[contextKey] = undefined;\n  }\n  for (const contextKey of Object.keys(context)) {\n    view.context[contextKey] = (context as any)[contextKey];\n  }\n  view.markForCheck();\n};\n\nconst mixRenderHandleViews = (\n  vcr: ViewContainerRef,\n  cdr: ChangeDetectorRef,\n  templates: any[],\n  views: Array<EmbeddedViewRef<any>>,\n  indices: undefined | number[],\n  context: Record<keyof any, any>,\n): number => {\n  let index = -1;\n\n  for (const templateRef of templates) {\n    index += 1;\n    views[index] = views[index] || undefined;\n    if ((indices && indices.indexOf(index) === -1) || !templateRef) {\n      continue;\n    }\n    if (!(templateRef instanceof TemplateRef)) {\n      throw new Error(`Cannot find TemplateRef`);\n    }\n    if (!views[index]) {\n      views[index] = vcr.createEmbeddedView(templateRef, {});\n    }\n    mixRenderApplyContext(views[index], context);\n  }\n  cdr.detectChanges();\n\n  return index;\n};\n\nconst mixRender = (instance: MockConfig & Record<keyof any, any>, cdr: ChangeDetectorRef): void => {\n  // Providing a method to render any @ContentChild based on its selector.\n  coreDefineProperty(\n    instance,\n    '__render',\n    (contentChildSelector: string | [string, ...number[]], $implicit?: any, variables?: Record<keyof any, any>) => {\n      const [type, key, selector, indices] = getKey(contentChildSelector);\n\n      const vcr = mixRenderPrepareVcr(instance, type, selector, cdr);\n      if (!vcr) {\n        return;\n      }\n\n      const property: any = instance[key];\n      const templates = property instanceof QueryList ? property.toArray() : [property];\n\n      const views = instance[`ngMocksRender_${type}_${selector}_views`] || [];\n      const index = mixRenderHandleViews(vcr, cdr, templates, views, indices, { ...variables, $implicit });\n\n      mixRenderReorderViews(vcr, views, index);\n      instance[`ngMocksRender_${type}_${selector}_views`] = views;\n      cdr.detectChanges();\n    },\n  );\n};\n\nconst mixHideHandler = (\n  instance: MockConfig & Record<keyof any, any>,\n  type: string,\n  selector: string,\n  indices: undefined | number[],\n) => {\n  const views = instance[`ngMocksRender_${type}_${selector}_views`];\n  let index = -1;\n  for (const view of views) {\n    index += 1;\n    if ((indices && indices.indexOf(index) === -1) || !view) {\n      continue;\n    }\n    view.destroy();\n    views[index] = undefined;\n  }\n};\n\nconst mixHide = (instance: MockConfig & Record<keyof any, any>, changeDetector: ChangeDetectorRef): void => {\n  // Providing method to hide any @ContentChild based on its selector.\n  coreDefineProperty(instance, '__hide', (contentChildSelector: string | [string, ...number[]]) => {\n    const [type, , selector, indices] = getKey(contentChildSelector);\n\n    if (!instance[`ngMocksRender_${type}_${selector}`]) {\n      return;\n    }\n    mixHideHandler(instance, type, selector, indices);\n\n    if (!indices) {\n      instance[`ngMocksRender_${type}_${selector}`] = false;\n    }\n    changeDetector.detectChanges();\n  });\n};\n\nclass ComponentMockBase extends LegacyControlValueAccessor implements AfterContentInit {\n  // istanbul ignore next\n  public constructor(\n    injector: Injector,\n    ngControl: any, // NgControl\n    changeDetector: ChangeDetectorRef,\n  ) {\n    super(injector, ngControl);\n    if (funcIsMock(this)) {\n      mixRender(this, changeDetector);\n      mixHide(this, changeDetector);\n    }\n  }\n\n  public ngAfterContentInit(): void {\n    const config = (this.__ngMocksConfig as any).config;\n    if (!(this as any).__rendered && config && config.render) {\n      for (const block of Object.keys(config.render)) {\n        const { $implicit, variables } =\n          config.render[block] === true\n            ? {\n                $implicit: undefined,\n                variables: {},\n              }\n            : config.render[block];\n        (this as any).__render(block, $implicit, variables);\n      }\n      (this as any).__rendered = true;\n    }\n  }\n}\n\ncoreDefineProperty(ComponentMockBase, 'parameters', [\n  [Injector],\n  [coreForm.NgControl || /* istanbul ignore next */ (() => undefined), new Optional(), new Self()],\n  [ChangeDetectorRef],\n]);\n\nconst decorateClass = (component: Type<any>, mock: Type<any>): void => {\n  const meta = coreReflectDirectiveResolve(component);\n  Component(\n    decorateDeclaration(component, mock, meta, {\n      template: generateTemplate(meta.queries),\n    }),\n  )(mock);\n};\n\n/**\n * MockComponents creates an array of mock component classes out of components passed as parameters.\n *\n * @see https://ng-mocks.sudo.eu/api/MockComponent\n *\n * ```ts\n * TestBed.configureTestingModule({\n *   declarations: MockComponents(\n *     Dep1Component,\n *     Dep2Component,\n *   ),\n * });\n * ```\n */\nexport function MockComponents(...components: Array<Type<any>>): Array<Type<MockedComponent<any>>> {\n  return components.map(MockComponent);\n}\n\n/**\n * MockComponent creates a mock component class out of an arbitrary component.\n *\n * @see https://ng-mocks.sudo.eu/api/MockComponent\n *\n * ```ts\n * TestBed.configureTestingModule({\n *   declarations: [\n *     MockComponent(Dep1Component),\n *     MockComponent(Dep2Component),\n *   ],\n * });\n * ```\n */\nexport function MockComponent<TComponent>(component: Type<TComponent>): Type<MockedComponent<TComponent>> {\n  return getMock(component, 'c', 'MockComponent', 'cacheComponent', ComponentMockBase, decorateClass);\n}\n","import {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  Injector,\n  OnInit,\n  Optional,\n  Self,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\n\nimport coreDefineProperty from '../common/core.define-property';\nimport coreForm from '../common/core.form';\nimport coreReflectDirectiveResolve from '../common/core.reflect.directive-resolve';\nimport { Type } from '../common/core.types';\nimport { LegacyControlValueAccessor } from '../common/mock-control-value-accessor';\nimport decorateDeclaration from '../mock/decorate-declaration';\nimport getMock from '../mock/get-mock';\n\nimport { MockedDirective } from './types';\n\nclass DirectiveMockBase extends LegacyControlValueAccessor implements OnInit {\n  // istanbul ignore next\n  public constructor(\n    injector: Injector,\n    ngControl: any, // NgControl\n    cdr: ChangeDetectorRef,\n    vcr: ViewContainerRef,\n    element: ElementRef | null = null,\n    template: TemplateRef<any> | null = null,\n  ) {\n    super(injector, ngControl);\n    this.__ngMocksInstall(vcr, cdr, element, template);\n  }\n\n  public ngOnInit(): void {\n    const config = (this.__ngMocksConfig as any).config;\n    if (config?.render) {\n      const { $implicit, variables } =\n        config.render === true\n          ? {\n              $implicit: undefined,\n              variables: {},\n            }\n          : config.render;\n      (this as any).__render($implicit, variables);\n    }\n  }\n\n  private __ngMocksInstall(\n    vcr: ViewContainerRef,\n    cdr: ChangeDetectorRef,\n    element: ElementRef | null,\n    template: TemplateRef<any> | null,\n  ): void {\n    // Basically any directive on ng-template is treated as structural, even it does not control render process.\n    // In our case we do not if we should render it or not and due to this we do nothing.\n    coreDefineProperty(this, '__element', element);\n    coreDefineProperty(this, '__template', template);\n    coreDefineProperty(this, '__viewContainer', vcr);\n    coreDefineProperty(this, '__vcr', vcr);\n    coreDefineProperty(this, '__cdr', cdr);\n    coreDefineProperty(this, '__isStructural', template && vcr);\n\n    // Providing method to render mock values.\n    coreDefineProperty(this, '__render', ($implicit?: any, variables?: Record<keyof any, any>) => {\n      if (vcr && template) {\n        vcr.clear();\n        vcr.createEmbeddedView(template, { ...variables, $implicit });\n        cdr.detectChanges();\n      }\n    });\n  }\n}\n\ncoreDefineProperty(DirectiveMockBase, 'parameters', [\n  [Injector],\n  [coreForm.NgControl || /* istanbul ignore next */ (() => undefined), new Optional(), new Self()],\n  [ChangeDetectorRef],\n  [ViewContainerRef],\n  [ElementRef, new Optional(), new Self()],\n  [TemplateRef, new Optional(), new Self()],\n]);\n\nconst decorateClass = (directive: Type<any>, mock: Type<any>): void => {\n  const meta = coreReflectDirectiveResolve(directive);\n  const options = decorateDeclaration(directive, mock, meta, {});\n  Directive(options)(mock);\n};\n\n/**\n * MockDirectives creates an array of mock directive classes out of directives passed as parameters.\n *\n * @see https://ng-mocks.sudo.eu/api/MockDirective\n *\n * ```ts\n * TestBed.configureTestingModule({\n *   declarations: MockDirectives(\n *     Dep1Directive,\n *     Dep2Directive,\n *   ),\n * });\n * ```\n */\nexport function MockDirectives(...directives: Array<Type<any>>): Array<Type<MockedDirective<any>>> {\n  return directives.map(MockDirective);\n}\n\n/**\n * MockDirective creates a mock directive class out of an arbitrary directive.\n *\n * @see https://ng-mocks.sudo.eu/api/MockDirective\n *\n * ```ts\n * TestBed.configureTestingModule({\n *   declarations: [\n *     MockDirective(Dep1Directive),\n *     MockDirective(Dep2Directive),\n *   ],\n * });\n * ```\n */\nexport function MockDirective<TDirective>(directive: Type<TDirective>): Type<MockedDirective<TDirective>> {\n  return getMock(directive, 'd', 'MockDirective', 'cacheDirective', DirectiveMockBase, decorateClass);\n}\n","import { Pipe } from '@angular/core';\n\nimport collectDeclarations from '../resolve/collect-declarations';\n\nimport coreReflectBodyCatch from './core.reflect.body-catch';\n\nexport default (def: any): Pipe & { standalone?: boolean } =>\n  coreReflectBodyCatch((arg: any) => {\n    const declaration = collectDeclarations(arg);\n    if (declaration.Pipe) {\n      return declaration.Pipe;\n    }\n\n    throw new Error('Cannot resolve declarations');\n  })(def);\n","import { Pipe, PipeTransform } from '@angular/core';\n\nimport { extendClass } from '../common/core.helpers';\nimport coreReflectPipeResolve from '../common/core.reflect.pipe-resolve';\nimport { Type } from '../common/core.types';\nimport decorateMock from '../common/decorate.mock';\nimport funcGetName from '../common/func.get-name';\nimport funcImportExists from '../common/func.import-exists';\nimport { isMockNgDef } from '../common/func.is-mock-ng-def';\nimport { Mock } from '../common/mock';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\nimport returnCachedMock from '../mock/return-cached-mock';\nimport helperMockService from '../mock-service/helper.mock-service';\n\nimport { MockedPipe } from './types';\n\n/**\n * MockPipes creates an array of mock pipe classes out of pipes passed as parameters.\n *\n * @see https://ng-mocks.sudo.eu/api/MockPipe\n *\n * ```ts\n * TestBed.configureTestingModule({\n *   declarations: MockPipes(\n *     Dep1Pipe,\n *     Dep2Pipe,\n *   ),\n * });\n * ```\n */\nexport function MockPipes(...pipes: Array<Type<PipeTransform>>): Array<Type<PipeTransform>> {\n  return pipes.map(pipe => MockPipe(pipe, undefined));\n}\n\nconst getMockClass = (pipe: Type<any>, transformValue?: PipeTransform['transform']): Type<any> => {\n  const config = ngMocksUniverse.config.get(pipe);\n  const transform = transformValue ?? config?.defValue?.transform;\n  const mock = extendClass(Mock);\n  Pipe(coreReflectPipeResolve(pipe))(mock);\n  decorateMock(mock, pipe, {\n    init: (instance: PipeTransform) => {\n      if (transform) {\n        instance.transform = transform;\n      }\n      if (!instance.transform) {\n        helperMockService.mock(instance, 'transform', `${funcGetName(instance)}.transform`);\n      }\n    },\n    transform,\n  });\n\n  return mock;\n};\n\n/**\n * MockPipe creates a mock pipe class out of an arbitrary pipe.\n *\n * @see https://ng-mocks.sudo.eu/api/MockPipe\n *\n * ```ts\n * TestBed.configureTestingModule({\n *   declarations: [\n *     MockPipe(Dep1Pipe),\n *     MockPipe(Dep2Pipe),\n *   ],\n * });\n * ```\n */\nexport function MockPipe<TPipe extends PipeTransform>(\n  pipe: Type<TPipe>,\n  transform?: TPipe['transform'],\n): Type<MockedPipe<TPipe>>;\n\nexport function MockPipe<TPipe extends PipeTransform>(\n  pipe: Type<TPipe>,\n  transform?: TPipe['transform'],\n): Type<MockedPipe<TPipe>> {\n  funcImportExists(pipe, 'MockPipe');\n\n  if (isMockNgDef(pipe, 'p')) {\n    return pipe;\n  }\n\n  // istanbul ignore next\n  if (ngMocksUniverse.flags.has('cachePipe') && ngMocksUniverse.cacheDeclarations.has(pipe)) {\n    return returnCachedMock(pipe);\n  }\n\n  const mock = getMockClass(pipe, transform);\n  if (ngMocksUniverse.flags.has('cachePipe')) {\n    ngMocksUniverse.cacheDeclarations.set(pipe, mock);\n  }\n\n  return mock as any;\n}\n","import { NgModule } from '@angular/core';\n\nimport coreConfig from '../common/core.config';\nimport coreDefineProperty from '../common/core.define-property';\nimport { extendClass } from '../common/core.helpers';\nimport coreReflectModuleResolve from '../common/core.reflect.module-resolve';\nimport { AnyType, Type } from '../common/core.types';\nimport decorateMock from '../common/decorate.mock';\nimport funcGetName from '../common/func.get-name';\nimport funcImportExists from '../common/func.import-exists';\nimport { isMockNgDef } from '../common/func.is-mock-ng-def';\nimport { isNgDef } from '../common/func.is-ng-def';\nimport { isNgModuleDefWithProviders, NgModuleWithProviders } from '../common/func.is-ng-module-def-with-providers';\nimport { Mock } from '../common/mock';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\nimport returnCachedMock from '../mock/return-cached-mock';\n\nimport mockNgDef from './mock-ng-def';\n\nconst flagMock = (resolution?: string): boolean => resolution === 'mock' && ngMocksUniverse.flags.has('skipMock');\n\nconst flagKeep = (resolution?: string): boolean => resolution === 'keep' && !ngMocksUniverse.flags.has('skipMock');\n\nconst flagReplace = (resolution?: string): boolean =>\n  resolution === 'replace' && !ngMocksUniverse.flags.has('skipMock');\n\nconst flagNever = (ngModule?: any): boolean =>\n  coreConfig.neverMockModule.indexOf(funcGetName(ngModule)) !== -1 && !ngMocksUniverse.flags.has('skipMock');\n\nconst preProcessFlags = (ngModule: AnyType<any>): { isRootModule: boolean; toggleSkipMockFlag: boolean } => {\n  let toggleSkipMockFlag = false;\n  let isRootModule = true;\n\n  if (ngMocksUniverse.flags.has('hasRootModule')) {\n    isRootModule = false;\n  } else {\n    ngMocksUniverse.flags.add('hasRootModule');\n  }\n\n  const resolution = ngMocksUniverse.getResolution(ngModule);\n  if (flagMock(resolution)) {\n    toggleSkipMockFlag = true;\n    ngMocksUniverse.flags.delete('skipMock');\n  }\n  if (flagNever(ngModule)) {\n    toggleSkipMockFlag = true;\n    ngMocksUniverse.flags.add('skipMock');\n  }\n  if (!isRootModule && (flagKeep(resolution) || flagReplace(resolution))) {\n    toggleSkipMockFlag = true;\n    ngMocksUniverse.flags.add('skipMock');\n  }\n\n  return {\n    isRootModule,\n    toggleSkipMockFlag,\n  };\n};\n\nconst postProcessFlags = ({\n  isRootModule,\n  toggleSkipMockFlag,\n}: {\n  isRootModule: boolean;\n  toggleSkipMockFlag: boolean;\n}): void => {\n  if (toggleSkipMockFlag && ngMocksUniverse.flags.has('skipMock')) {\n    ngMocksUniverse.flags.delete('skipMock');\n  } else if (toggleSkipMockFlag && !ngMocksUniverse.flags.has('skipMock')) {\n    ngMocksUniverse.flags.add('skipMock');\n  }\n  if (isRootModule) {\n    ngMocksUniverse.flags.delete('hasRootModule');\n  }\n};\n\nconst extractModuleAndProviders = (\n  module: any,\n): {\n  ngModule: Type<any>;\n  ngModuleProviders: NgModule['providers'];\n} => {\n  let ngModule: Type<any>;\n  let ngModuleProviders: NgModule['providers'];\n\n  if (isNgModuleDefWithProviders(module)) {\n    ngModule = module.ngModule;\n    if (module.providers) {\n      ngModuleProviders = module.providers;\n    }\n  } else {\n    ngModule = module;\n  }\n\n  return {\n    ngModule,\n    ngModuleProviders,\n  };\n};\n\nconst getExistingMockModule = (ngModule: Type<any>, isRootModule: boolean): Type<any> | undefined => {\n  if (isMockNgDef(ngModule, 'm')) {\n    return ngModule;\n  }\n\n  // Every module should be replaced with its mock copy only once to avoid errors like:\n  // Failed: Type ...Component is part of the declarations of 2 modules: ...Module and ...Module...\n  if (ngMocksUniverse.flags.has('cacheModule') && ngMocksUniverse.cacheDeclarations.has(ngModule)) {\n    return returnCachedMock(ngModule);\n  }\n\n  // Now we check if we need to keep the original module or to replace it with some other.\n  // and there is no override in its resolution.\n  if (isRootModule || ngMocksUniverse.config.get('ngMocksDepsResolution')?.get(ngModule) === 'mock') {\n    return undefined;\n  }\n  if (ngMocksUniverse.hasBuildDeclaration(ngModule)) {\n    const instance = ngMocksUniverse.getBuildDeclaration(ngModule);\n    if (isNgDef(instance, 'm') && instance !== ngModule) {\n      return instance;\n    }\n  }\n\n  return undefined;\n};\n\nconst detectMockModule = (ngModule: Type<any>, mockModule?: Type<any>): Type<any> => {\n  const [changed, ngModuleDef, resolutions] = mockModule\n    ? [false]\n    : mockNgDef(coreReflectModuleResolve(ngModule), ngModule);\n  if (resolutions) {\n    coreDefineProperty(ngModule, '__ngMocksResolutions', resolutions);\n  }\n\n  if (changed) {\n    const parent = ngMocksUniverse.flags.has('skipMock') ? ngModule : Mock;\n    const mock = extendClass(parent);\n\n    // the last thing is to apply decorators.\n    NgModule(ngModuleDef)(mock);\n    decorateMock(mock, ngModule);\n\n    return mock;\n  }\n\n  return mockModule || ngModule;\n};\n\nconst getMockProviders = (ngModuleProviders: NgModule['providers']): NgModule['providers'] => {\n  if (ngModuleProviders) {\n    const [changed, ngModuleDef] = mockNgDef({ providers: ngModuleProviders, skipExports: true });\n\n    return changed ? ngModuleDef.providers : ngModuleProviders;\n  }\n\n  return undefined;\n};\n\nconst generateReturn = (\n  module: any,\n  ngModule: AnyType<any>,\n  ngModuleProviders: NgModule['providers'],\n  mockModule: AnyType<any>,\n  mockModuleProviders: NgModule['providers'],\n): any =>\n  mockModule === ngModule && mockModuleProviders === ngModuleProviders\n    ? module\n    : isNgModuleDefWithProviders(module)\n    ? { ngModule: mockModule, ...(mockModuleProviders ? { providers: mockModuleProviders } : {}) }\n    : mockModule;\n\n/**\n * MockModule creates a mock module class out of an arbitrary module.\n * All declarations, imports, exports and providers will be mocked too.\n *\n * @see https://ng-mocks.sudo.eu/api/MockModule\n *\n * ```ts\n * TestBed.configureTestingModule({\n *   imports: [\n *     MockModule(SharedModule),\n *   ],\n * });\n * ```\n */\nexport function MockModule<T>(ngModule: Type<T>): Type<T>;\n\n/**\n * MockModule creates a mock module class with mock provides out of an arbitrary module with providers.\n * All declarations, imports, exports and providers will be mocked too.\n *\n * @see https://ng-mocks.sudo.eu/api/MockModule\n *\n * ```ts\n * TestBed.configureTestingModule({\n *   imports: [\n *     MockModule(StoreModule.forRoot()),\n *   ],\n * });\n * ```\n */\nexport function MockModule<T>(ngModule: NgModuleWithProviders<T>): NgModuleWithProviders<T>;\n\nexport function MockModule(def: any): any {\n  funcImportExists(def, 'MockModule');\n\n  const { ngModule, ngModuleProviders } = extractModuleAndProviders(def);\n  const flags = preProcessFlags(ngModule);\n  try {\n    const mockModule = detectMockModule(ngModule, getExistingMockModule(ngModule, flags.isRootModule));\n    // istanbul ignore else\n    if (ngMocksUniverse.flags.has('cacheModule')) {\n      ngMocksUniverse.cacheDeclarations.set(ngModule, mockModule);\n    }\n    if (ngMocksUniverse.flags.has('skipMock')) {\n      ngMocksUniverse.config.get('ngMocksDepsSkip')?.add(mockModule);\n    }\n    const mockModuleProviders = getMockProviders(ngModuleProviders);\n\n    return generateReturn(def, ngModule, ngModuleProviders, mockModule, mockModuleProviders);\n  } finally {\n    postProcessFlags(flags);\n  }\n}\n","import { Provider } from '@angular/core';\n\nimport CoreDefStack from '../common/core.def-stack';\nimport funcGetType from '../common/func.get-type';\nimport { isNgDef } from '../common/func.is-ng-def';\nimport { isNgModuleDefWithProviders } from '../common/func.is-ng-module-def-with-providers';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\nimport { MockComponent } from '../mock-component/mock-component';\nimport { MockDirective } from '../mock-directive/mock-directive';\nimport { MockPipe } from '../mock-pipe/mock-pipe';\nimport helperMockService from '../mock-service/helper.mock-service';\n\nimport { MockModule } from './mock-module';\n\nconst processDefMap: Array<[any, any]> = [\n  ['c', MockComponent],\n  ['d', MockDirective],\n  ['p', MockPipe],\n];\n\nconst processDef = (def: any) => {\n  if (isNgDef(def, 'm') || isNgModuleDefWithProviders(def)) {\n    return MockModule(def as any);\n  }\n  if (ngMocksUniverse.hasBuildDeclaration(def)) {\n    return ngMocksUniverse.getBuildDeclaration(def);\n  }\n  if (ngMocksUniverse.flags.has('skipMock') && ngMocksUniverse.getResolution(def) !== 'mock') {\n    return def;\n  }\n  for (const [flag, func] of processDefMap) {\n    if (isNgDef(def, flag)) {\n      return func(def);\n    }\n  }\n};\n\n// resolveProvider is a special case because of the def structure.\nconst createResolveProvider =\n  (resolutions: CoreDefStack<any, any>, change: () => void): ((def: Provider) => any) =>\n  (def: Provider) =>\n    helperMockService.resolveProvider(def, resolutions, change);\n\nconst createResolveWithProviders = (def: any, mockDef: any): boolean =>\n  isNgModuleDefWithProviders(mockDef) && isNgModuleDefWithProviders(def);\n\nconst createResolveExisting = (\n  def: any,\n  resolutions: CoreDefStack<any, any>,\n  change: (flag?: boolean) => void,\n): any => {\n  const mockDef = resolutions.get(def);\n  if (def !== mockDef) {\n    change();\n  }\n\n  return mockDef;\n};\n\nconst createResolveExcluded = (\n  def: any,\n  resolutions: CoreDefStack<any, any>,\n  change: (flag?: boolean) => void,\n): void => {\n  resolutions.set(def, undefined);\n\n  change();\n};\n\nconst createResolve =\n  (resolutions: CoreDefStack<any, any>, change: (flag?: boolean) => void): ((def: any) => any) =>\n  (def: any) => {\n    if (resolutions.has(def)) {\n      return createResolveExisting(def, resolutions, change);\n    }\n\n    const detectedDef = funcGetType(def);\n    if (ngMocksUniverse.isExcludedDef(detectedDef)) {\n      return createResolveExcluded(def, resolutions, change);\n    }\n    ngMocksUniverse.touches.add(detectedDef);\n\n    const mockDef = processDef(def);\n    if (createResolveWithProviders(def, mockDef)) {\n      resolutions.set(def.ngModule, mockDef.ngModule);\n    }\n    if (ngMocksUniverse.flags.has('skipMock')) {\n      ngMocksUniverse.config.get('ngMocksDepsSkip')?.add(mockDef);\n    }\n    resolutions.set(def, mockDef);\n    change(mockDef !== def);\n\n    return mockDef;\n  };\n\nexport default (\n  change: () => void,\n  resolutions: CoreDefStack<any, any>,\n): {\n  resolve: (def: any) => any;\n  resolveProvider: (def: Provider) => any;\n} => {\n  const resolve = createResolve(resolutions, change);\n  const resolveProvider = createResolveProvider(resolutions, change);\n\n  return {\n    resolve,\n    resolveProvider,\n  };\n};\n","import { flatten } from '../common/core.helpers';\nimport funcGetType from '../common/func.get-type';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nexport default (providers?: any[]): void => {\n  for (const provider of flatten(providers ?? [])) {\n    const provide = funcGetType(provider);\n\n    const config = ngMocksUniverse.configInstance.get(provide) ?? {};\n    if (!config.exported) {\n      config.exported = true;\n    }\n    ngMocksUniverse.configInstance.set(provide, config);\n  }\n};\n","import { NgModule, Provider } from '@angular/core';\n\nimport CoreDefStack from '../common/core.def-stack';\nimport { flatten } from '../common/core.helpers';\nimport { dependencyKeys, Type } from '../common/core.types';\nimport funcGetType from '../common/func.get-type';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nimport createResolvers from './create-resolvers';\nimport markProviders from './mark-providers';\n\nconst flatToExisting = <T, R>(data: T | T[], callback: (arg: T) => R | undefined): R[] =>\n  flatten(data)\n    .map(callback)\n    .filter((item): item is R => !!item);\n\nconst configureProcessMetaKeys = (\n  resolve: (def: any) => any,\n  resolveProvider: (def: Provider) => any,\n): Array<[dependencyKeys, (def: any) => any]> => [\n  ['declarations', resolve],\n  [\n    'hostDirectives',\n    <T>(data: T) => {\n      const def = funcGetType(data);\n      const directive = resolve(def);\n      return directive === def\n        ? data\n        : data == def\n        ? directive\n        : {\n            ...data,\n            directive,\n          };\n    },\n  ],\n  ['imports', resolve],\n  ['entryComponents', resolve],\n  ['bootstrap', resolve],\n  ['providers', resolveProvider],\n  ['viewProviders', resolveProvider],\n  ['exports', resolve],\n  ['schemas', v => v],\n];\n\nconst processMeta = <\n  T extends Partial<Record<dependencyKeys, any>> & {\n    skipMarkProviders?: boolean;\n  },\n>(\n  ngModule: T,\n  resolve: (def: any) => any,\n  resolveProvider: (def: Provider) => any,\n): Partial<T> => {\n  const mockModuleDef: Partial<T> = {};\n  const keys = configureProcessMetaKeys(resolve, resolveProvider);\n\n  const cachePipe = ngMocksUniverse.flags.has('cachePipe');\n  if (!cachePipe) {\n    ngMocksUniverse.flags.add('cachePipe');\n  }\n  for (const [key, callback] of keys) {\n    if (ngModule[key]?.length) {\n      mockModuleDef[key] = flatToExisting(ngModule[key], callback);\n    }\n  }\n  if (!ngModule.skipMarkProviders) {\n    markProviders(mockModuleDef.providers);\n    markProviders(mockModuleDef.viewProviders);\n  }\n\n  if (!cachePipe) {\n    ngMocksUniverse.flags.delete('cachePipe');\n  }\n\n  return mockModuleDef;\n};\n\nconst resolveDefForExport = (\n  def: any,\n  resolve: (def: any) => any,\n  correctExports: boolean,\n  ngModule?: Type<any>,\n): Type<any> | undefined => {\n  const moduleConfig = ngMocksUniverse.config.get(ngModule) || {};\n  const instance = funcGetType(def);\n  const mockDef = resolve(instance);\n  if (!mockDef) {\n    return undefined;\n  }\n\n  // If we export a declaration, then we have to export its module too.\n  const config = ngMocksUniverse.config.get(instance);\n  if (config?.export && ngModule && !moduleConfig.export) {\n    ngMocksUniverse.config.set(ngModule, {\n      ...moduleConfig,\n      export: true,\n    });\n  }\n\n  if (correctExports && !moduleConfig.exportAll && !config?.export) {\n    return undefined;\n  }\n\n  ngMocksUniverse.configInstance.set(instance, {\n    ...ngMocksUniverse.configInstance.get(instance),\n    exported: true,\n  });\n\n  return mockDef;\n};\n\nconst skipAddExports = (mockDef: any, mockModuleDef: NgModule): mockDef is undefined =>\n  !mockDef || (!!mockModuleDef.exports && mockModuleDef.exports.indexOf(mockDef) !== -1);\n\n// if we are in the skipMock mode we need to export only the default exports.\n// if we are in the correctModuleExports mode we need to export only default exports.\nconst addExports = (\n  resolve: (def: any) => any,\n  change: () => void,\n  ngModuleDef: NgModule,\n  mockModuleDef: NgModule,\n  ngModule?: Type<any>,\n): void => {\n  const correctExports = ngMocksUniverse.flags.has('skipMock') || ngMocksUniverse.flags.has('correctModuleExports');\n  for (const def of flatten([ngModuleDef.imports || [], ngModuleDef.declarations || []])) {\n    const mockDef = resolveDefForExport(def, resolve, correctExports, ngModule);\n    if (skipAddExports(mockDef, mockModuleDef)) {\n      continue;\n    }\n\n    change();\n    mockModuleDef.exports = mockModuleDef.exports || [];\n    mockModuleDef.exports.push(mockDef);\n  }\n};\n\nexport default <\n  T extends NgModule & {\n    hostDirectives?: Array<any>;\n    skipMarkProviders?: boolean;\n    skipExports?: boolean;\n  },\n>(\n  ngModuleDef: T,\n  ngModule?: Type<any>,\n): [boolean, Partial<T>, Map<any, any>] => {\n  const hasResolver = ngMocksUniverse.config.has('mockNgDefResolver');\n  if (!hasResolver) {\n    ngMocksUniverse.config.set('mockNgDefResolver', new CoreDefStack());\n  }\n  ngMocksUniverse.config.get('mockNgDefResolver').push();\n\n  let changed = !ngMocksUniverse.flags.has('skipMock');\n  const change = (flag = true) => {\n    changed = changed || flag;\n  };\n  const { resolve, resolveProvider } = createResolvers(change, ngMocksUniverse.config.get('mockNgDefResolver'));\n  const mockModuleDef = processMeta(ngModuleDef, resolve, resolveProvider);\n  if (!ngModuleDef.skipExports) {\n    addExports(resolve, change, ngModuleDef, mockModuleDef, ngModule);\n  }\n\n  const resolutions = ngMocksUniverse.config.get('mockNgDefResolver').pop();\n  if (!hasResolver) {\n    ngMocksUniverse.config.delete('mockNgDefResolver');\n  }\n\n  return [changed, mockModuleDef, resolutions];\n};\n","import { Directive, NgModule } from '@angular/core';\n\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\nimport mockNgDef from '../../mock-module/mock-ng-def';\n\nexport default (meta?: Directive | NgModule): NgModule | undefined => {\n  if (!meta) {\n    return undefined;\n  }\n\n  const skipMock = ngMocksUniverse.flags.has('skipMock');\n  // istanbul ignore else\n  if (!skipMock) {\n    ngMocksUniverse.flags.add('skipMock');\n  }\n  const [changed, def] = mockNgDef(meta);\n  // istanbul ignore else\n  if (!skipMock) {\n    ngMocksUniverse.flags.delete('skipMock');\n  }\n  if (!changed) {\n    return undefined;\n  }\n\n  return def;\n};\n","import ngMocksUniverse from '../../common/ng-mocks-universe';\n\nimport { BuilderData } from './types';\n\nexport default (\n  replaceDef: BuilderData['replaceDef'],\n  defValue: BuilderData['defValue'],\n  source: any,\n  value: any,\n): boolean => {\n  // no reason to touch mocks\n  if (ngMocksUniverse.cacheDeclarations.has(value)) {\n    return true;\n  }\n\n  // no customizations in replacements\n  if (replaceDef.has(source) && value === defValue.get(source)) {\n    return true;\n  }\n\n  return false;\n};\n","import { ComponentFactoryResolver, NgModule, Optional } from '@angular/core';\n\nimport coreDefineProperty from '../../common/core.define-property';\nimport { extendClass } from '../../common/core.helpers';\nimport { NG_MOCKS } from '../../common/core.tokens';\nimport { isNgDef } from '../../common/func.is-ng-def';\nimport helperCreateClone from '../../mock-service/helper.create-clone';\n\nimport { NgMeta } from './types';\n\nclass EntryComponentsModule {\n  public constructor(map: Map<any, any>, componentFactoryResolver?: ComponentFactoryResolver) {\n    // istanbul ignore if\n    if (!componentFactoryResolver) {\n      return;\n    }\n\n    const originCFR = componentFactoryResolver.resolveComponentFactory;\n    componentFactoryResolver.resolveComponentFactory = helperCreateClone(\n      originCFR,\n      undefined,\n      undefined,\n      (component: any, ...args: any[]) =>\n        originCFR.apply(componentFactoryResolver, [map.get(component) ?? component, ...args] as any),\n    );\n  }\n}\ncoreDefineProperty(EntryComponentsModule, 'parameters', [[NG_MOCKS], [ComponentFactoryResolver, new Optional()]]);\n\nclass IvyModule {}\nNgModule()(IvyModule);\n\nexport default (ngModule: NgMeta): void => {\n  const entryComponents: any[] = [];\n  for (const declaration of ngModule.declarations) {\n    if (isNgDef(declaration, 'c')) {\n      entryComponents.push(declaration);\n    }\n  }\n  // the way to cause entryComponents to do its work\n  const entryModule = extendClass(EntryComponentsModule);\n  NgModule({\n    // Ivy knows how to make any component an entry point,\n    // but we still would like to patch resolveComponentFactory in order to provide mocks.\n    // ɵmod is added only if Ivy has been enabled.\n    entryComponents: (IvyModule as any).ɵmod ? [] : /* istanbul ignore next */ entryComponents,\n  } as never)(entryModule);\n  ngModule.imports.push(entryModule);\n};\n","var x = y => { var x = {}; __webpack_require__.d(x, y); return x; }\nvar y = x => () => x\nconst __WEBPACK_NAMESPACE_OBJECT__ = x({ [\"DOCUMENT\"]: () => __WEBPACK_EXTERNAL_MODULE__angular_common_d12e0fe1__.DOCUMENT });","import { DOCUMENT } from '@angular/common';\n\nimport coreConfig from '../../common/core.config';\nimport coreReflectProvidedIn from '../../common/core.reflect.provided-in';\nimport { isNgInjectionToken } from '../../common/func.is-ng-injection-token';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\n\nconst skipResolution = (provide: any): boolean | undefined => {\n  const resolution = ngMocksUniverse.getResolution(provide);\n  if (resolution === 'keep' || resolution === 'exclude') {\n    return true;\n  }\n  if (resolution === 'mock') {\n    return false;\n  }\n\n  return undefined;\n};\n\nconst skipSystem = (provide: any): boolean => {\n  if (!provide || provide === DOCUMENT || ngMocksUniverse.touches.has(provide)) {\n    return true;\n  }\n  const skipByResolution = skipResolution(provide);\n  if (skipByResolution !== undefined) {\n    return skipByResolution;\n  }\n\n  if (typeof provide === 'function' && coreConfig.neverMockProvidedFunction.indexOf(provide.name) !== -1) {\n    return true;\n  }\n  // istanbul ignore if because we mock BrowserModule\n  if (isNgInjectionToken(provide) && coreConfig.neverMockToken.indexOf(provide.toString()) !== -1) {\n    return true;\n  }\n\n  return false;\n};\n\n// Checks if we should avoid mocking of the provider.\nexport default (provide: any): boolean => {\n  if (skipSystem(provide)) {\n    return true;\n  }\n\n  // Empty providedIn or things for a platform have to be skipped.\n  const providedIn = coreReflectProvidedIn(provide);\n  const skip = !providedIn || providedIn === 'platform';\n  if (typeof provide === 'function' && skip) {\n    return true;\n  }\n\n  return false;\n};\n","import { NG_MOCKS_ROOT_PROVIDERS } from '../../common/core.tokens';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\n\nimport skipDep from './skip-dep';\nimport { BuilderData } from './types';\n\nexport default (parameters: Set<any>, mockDef: BuilderData['mockDef'], def: any): void => {\n  if (\n    !skipDep(def) &&\n    (mockDef.has(NG_MOCKS_ROOT_PROVIDERS) || !ngMocksUniverse.config.get('ngMocksDepsSkip').has(def))\n  ) {\n    parameters.add(def);\n  }\n};\n","export default (provide: any, bucket: any[], touched: any[]): void => {\n  if (typeof provide === 'function' && touched.indexOf(provide) === -1) {\n    touched.push(provide);\n    bucket.push(provide);\n  }\n};\n","import funcExtractForwardRef from '../../common/func.extract-forward-ref';\n\n// Extracts dependency among flags of parameters.\nexport default (decorators?: any[]): any => {\n  if (!decorators) {\n    return;\n  }\n\n  let provide: any;\n  for (const decorator of decorators) {\n    if (decorator && typeof decorator === 'object' && decorator.token) {\n      provide = decorator.token;\n    }\n    if (!provide && decorator && (typeof decorator !== 'object' || !decorator.ngMetadataName)) {\n      provide = decorator;\n    }\n  }\n\n  return funcExtractForwardRef(provide);\n};\n","import coreReflectProvidedIn from '../../common/core.reflect.provided-in';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\n\nexport default (provide: any): void => {\n  if (ngMocksUniverse.touches.has(provide)) {\n    return;\n  }\n\n  const providedIn = coreReflectProvidedIn(provide);\n  if (!providedIn) {\n    return;\n  }\n\n  if (ngMocksUniverse.config.get('ngMocksDepsSkip').has(providedIn)) {\n    ngMocksUniverse.config.get('ngMocksDepsSkip').add(provide);\n  }\n};\n","import ngMocksUniverse from '../../common/ng-mocks-universe';\n\nimport skipDep from './skip-dep';\n\nexport default (provide: any): boolean => {\n  if (skipDep(provide)) {\n    return true;\n  }\n\n  return ngMocksUniverse.config.get('ngMocksDepsSkip').has(provide);\n};\n","import { flatten, mapValues } from '../../common/core.helpers';\nimport coreReflectProvidedIn from '../../common/core.reflect.provided-in';\nimport { AnyDeclaration } from '../../common/core.types';\nimport errorJestMock from '../../common/error.jest-mock';\nimport funcGetName from '../../common/func.get-name';\nimport funcGetType from '../../common/func.get-type';\nimport { isNgDef } from '../../common/func.is-ng-def';\nimport { isNgInjectionToken } from '../../common/func.is-ng-injection-token';\nimport { isStandalone } from '../../common/func.is-standalone';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\nimport markProviders from '../../mock-module/mark-providers';\n\nimport initModule from './init-module';\nimport { BuilderData, NgMeta } from './types';\n\nconst skipDef = (def: any): boolean =>\n  ngMocksUniverse.touches.has(def) || isNgDef(def) || isNgInjectionToken(def) || typeof def === 'string';\n\nconst handleDef = ({ imports, declarations, providers }: NgMeta, def: any, defProviders: Map<any, any>): void => {\n  if (!skipDef(def)) {\n    errorJestMock(def);\n  }\n\n  let touched = false;\n\n  if (isNgDef(def, 'm')) {\n    const extendedDef = initModule(def, defProviders);\n    imports.push(extendedDef);\n    touched = true;\n\n    // adding providers to touches\n    if (typeof extendedDef === 'object' && extendedDef.providers) {\n      for (const provider of flatten(extendedDef.providers)) {\n        ngMocksUniverse.touches.add(funcGetType(provider));\n      }\n    }\n  }\n\n  if (isNgDef(def, 'c') || isNgDef(def, 'd') || isNgDef(def, 'p')) {\n    (isStandalone(def) ? imports : declarations).push(ngMocksUniverse.getBuildDeclaration(def));\n    touched = true;\n  }\n\n  if (isNgDef(def, 'i') || !isNgDef(def)) {\n    const mock = ngMocksUniverse.builtProviders.get(def);\n    if (mock && typeof mock !== 'string' && isNgDef(mock, 't') === false) {\n      providers.push(mock);\n      touched = true;\n    }\n  }\n\n  if (touched) {\n    ngMocksUniverse.touches.add(def);\n  }\n};\n\nexport default (\n  { configDef, configDefault, keepDef, mockDef, replaceDef }: BuilderData,\n  defProviders: Map<any, any>,\n): NgMeta => {\n  const meta: NgMeta = { imports: [], declarations: [], providers: [] };\n\n  const forgotten: AnyDeclaration<any>[] = [];\n\n  // Adding suitable leftovers.\n  for (const def of [...mapValues(mockDef), ...mapValues(keepDef), ...mapValues(replaceDef)]) {\n    const configInstance = ngMocksUniverse.configInstance.get(def);\n    const config = configDef.get(def);\n\n    if (isNgDef(def, 'm') && config.onRoot) {\n      handleDef(meta, def, defProviders);\n    } else if (\n      !config.dependency &&\n      config.export &&\n      !configInstance?.exported &&\n      (isNgDef(def, 'i') || !isNgDef(def))\n    ) {\n      handleDef(meta, def, defProviders);\n      markProviders([def]);\n    } else if (!config.dependency && isNgDef(def, 'm') && defProviders.has(def)) {\n      handleDef(meta, def, defProviders);\n    } else if (!config.dependency && config.export && !configInstance?.exported) {\n      handleDef(meta, def, defProviders);\n    } else if (!ngMocksUniverse.touches.has(def) && !config.dependency) {\n      handleDef(meta, def, defProviders);\n    } else if (\n      config.dependency &&\n      configDefault.dependency &&\n      coreReflectProvidedIn(def) !== 'root' &&\n      (typeof def !== 'object' || !(def as any).__ngMocksSkip)\n    ) {\n      forgotten.push(def);\n    }\n  }\n\n  // Checking missing dependencies\n  const globalFlags = ngMocksUniverse.global.get('flags');\n  for (const def of forgotten) {\n    if (ngMocksUniverse.touches.has(def)) {\n      continue;\n    }\n\n    const errorMessage = [\n      `MockBuilder has found a missing dependency: ${funcGetName(def)}.`,\n      'It means no module provides it.',\n      'Please, use the \"export\" flag if you want to add it explicitly.',\n      'https://ng-mocks.sudo.eu/api/MockBuilder#export-flag',\n    ].join(' ');\n\n    if (globalFlags.onMockBuilderMissingDependency === 'warn') {\n      console.warn(errorMessage);\n    } else if (globalFlags.onMockBuilderMissingDependency === 'throw') {\n      throw new Error(errorMessage);\n    }\n  }\n\n  return meta;\n};\n","import { ModuleWithProviders } from '@angular/core';\n\nimport { Type } from '../../common/core.types';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\n\nimport { BuilderData } from './types';\n\nexport default (def: Type<any>, defProviders: BuilderData['defProviders']): Type<any> | ModuleWithProviders<any> => {\n  const loModule = ngMocksUniverse.getBuildDeclaration(def);\n  const loProviders = defProviders.has(def) ? defProviders.get(def) : undefined;\n\n  return loProviders\n    ? {\n        ngModule: loModule,\n        providers: loProviders,\n      }\n    : loModule;\n};\n","import collectDeclarations from '../resolve/collect-declarations';\n\nimport coreConfig from './core.config';\nimport { flatten } from './core.helpers';\nimport { AnyDeclaration } from './core.types';\nimport { getNgType } from './func.get-ng-type';\nimport funcGetType from './func.get-type';\n\nexport const funcExtractDeps = (def: any, result: Set<AnyDeclaration<any>>): Set<AnyDeclaration<any>> => {\n  const meta = collectDeclarations(def);\n  const type = getNgType(def);\n  // istanbul ignore if\n  if (!type || type === 'Injectable') {\n    return result;\n  }\n\n  const decorator = meta[type];\n  for (const field of coreConfig.dependencies) {\n    if (!decorator[field]) {\n      continue;\n    }\n\n    for (const item of flatten(decorator[field])) {\n      // istanbul ignore if: it is here for standalone things, however they don't support modules with providers.\n      result.add(funcGetType(item));\n    }\n  }\n\n  return result;\n};\n","import { isNgDef } from '../../common/func.is-ng-def';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\nimport mockHelperStub from '../../mock-helper/mock-helper.stub';\nimport helperUseFactory from '../../mock-service/helper.use-factory';\nimport mockProvider from '../../mock-service/mock-provider';\nimport { IMockBuilderConfigMock } from '../types';\n\nconst createInstance = (existing: any, params: any, config: IMockBuilderConfigMock): any => {\n  if (config.precise) {\n    return params;\n  }\n\n  return mockHelperStub(existing, params);\n};\n\nexport default (def: any, defValue: Map<any, any>): void => {\n  if (isNgDef(def, 'i') && defValue.has(def)) {\n    const config: IMockBuilderConfigMock = ngMocksUniverse.config.get(def);\n    const instance = defValue.get(def);\n    ngMocksUniverse.builtProviders.set(\n      def,\n      helperUseFactory(def, undefined, existing => createInstance(existing, instance, config)),\n    );\n  } else if (isNgDef(def, 'i')) {\n    ngMocksUniverse.builtProviders.set(def, mockProvider(def, true));\n  }\n\n  if (!isNgDef(def) && defValue.has(def)) {\n    const instance = defValue.get(def);\n    ngMocksUniverse.builtProviders.set(\n      def,\n      helperUseFactory(def, undefined, () => instance),\n    );\n  } else if (!isNgDef(def)) {\n    ngMocksUniverse.builtProviders.set(def, mockProvider(def, true));\n  }\n};\n","import { isNgDef } from '../../common/func.is-ng-def';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\nimport { MockComponent } from '../../mock-component/mock-component';\nimport { MockDirective } from '../../mock-directive/mock-directive';\nimport { MockPipe } from '../../mock-pipe/mock-pipe';\n\nexport default (def: any): void => {\n  if (ngMocksUniverse.builtDeclarations.get(def) !== undefined) {\n    return;\n  }\n\n  if (isNgDef(def, 'c')) {\n    ngMocksUniverse.builtDeclarations.set(def, MockComponent(def));\n  }\n  if (isNgDef(def, 'd')) {\n    ngMocksUniverse.builtDeclarations.set(def, MockDirective(def));\n  }\n  if (isNgDef(def, 'p')) {\n    ngMocksUniverse.builtDeclarations.set(def, MockPipe(def));\n  }\n};\n","import funcGetType from '../../common/func.get-type';\n\nexport default (\n  provider: any,\n): {\n  multi: boolean;\n  provide: any;\n} => {\n  const provide = funcGetType(provider);\n  const multi = provide !== provider && provider.multi;\n\n  return {\n    multi,\n    provide,\n  };\n};\n","import { NgModule, Provider } from '@angular/core';\nimport { TestBed, TestBedStatic, TestModuleMetadata } from '@angular/core/testing';\n\nimport CoreDefStack from '../common/core.def-stack';\nimport { flatten, mapValues } from '../common/core.helpers';\nimport { Type } from '../common/core.types';\nimport funcGetName from '../common/func.get-name';\nimport { isNgDef } from '../common/func.is-ng-def';\nimport { isNgModuleDefWithProviders } from '../common/func.is-ng-module-def-with-providers';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nimport { MockBuilder } from './mock-builder';\nimport { MockBuilderStash } from './mock-builder-stash';\nimport addRequestedProviders from './promise/add-requested-providers';\nimport applyPlatformModules from './promise/apply-platform-modules';\nimport createNgMocksOverridesToken from './promise/create-ng-mocks-overrides-token';\nimport createNgMocksToken from './promise/create-ng-mocks-token';\nimport createNgMocksTouchesToken from './promise/create-ng-mocks-touches-token';\nimport handleEntryComponents from './promise/handle-entry-components';\nimport handleRootProviders from './promise/handle-root-providers';\nimport initNgModules from './promise/init-ng-modules';\nimport initUniverse from './promise/init-universe';\nimport parseMockArguments from './promise/parse-mock-arguments';\nimport parseProvider from './promise/parse-provider';\nimport { BuilderData } from './promise/types';\nimport { IMockBuilder, IMockBuilderConfig, IMockBuilderConfigAll, IMockBuilderResult } from './types';\n\nconst normaliseModule = (\n  module: any,\n): {\n  def: Type<any>;\n  providers?: NgModule['providers'];\n} =>\n  isNgModuleDefWithProviders(module)\n    ? { def: module.ngModule, providers: module.providers }\n    : { def: module, providers: undefined };\n\nconst generateProviderValue = (provider: any, existing: any, multi: boolean): any =>\n  multi ? [...(Array.isArray(existing) ? existing : /* istanbul ignore next */ []), provider] : provider;\n\nconst defaultMock = {}; // simulating Symbol\n\nexport interface MockBuilderPromise {\n  [Symbol.toStringTag]: 'Promise';\n}\n\nexport class MockBuilderPromise implements IMockBuilder {\n  protected beforeCC: Set<(testBed: TestBedStatic) => void> = new Set();\n  protected configDef: BuilderData['configDef'] = new Map();\n  protected defProviders: BuilderData['defProviders'] = new Map();\n  protected defValue: BuilderData['defValue'] = new Map();\n  protected excludeDef: BuilderData['excludeDef'] = new Set();\n  protected keepDef: BuilderData['keepDef'] = new Set();\n  protected mockDef: BuilderData['mockDef'] = new Set();\n  protected providerDef: BuilderData['providerDef'] = new Map();\n  protected replaceDef: BuilderData['replaceDef'] = new Set();\n  protected stash: MockBuilderStash = new MockBuilderStash();\n\n  public constructor(protected configDefault: IMockBuilderConfigAll) {\n    // istanbul ignore else\n    if (typeof Symbol !== 'undefined') {\n      (this as any)[Symbol.toStringTag] = 'Promise';\n    }\n  }\n\n  public beforeCompileComponents(callback: (testBed: TestBedStatic) => void): this {\n    this.beforeCC.add(callback);\n\n    return this;\n  }\n\n  public build(): TestModuleMetadata {\n    this.stash.backup();\n    const defStack = new CoreDefStack();\n    ngMocksUniverse.config.set('mockNgDefResolver', defStack);\n    ngMocksUniverse.flags.add('hasRootModule');\n\n    try {\n      const params = this.combineParams();\n\n      const ngModule = initNgModules(params, initUniverse(params));\n      addRequestedProviders(ngModule, params, defStack);\n      handleRootProviders(ngModule, params, defStack);\n      handleEntryComponents(ngModule);\n      applyPlatformModules();\n\n      ngModule.providers.push(\n        createNgMocksToken(),\n        createNgMocksTouchesToken(),\n        createNgMocksOverridesToken(this.replaceDef, this.defValue),\n        MockBuilder as never,\n      );\n\n      return ngModule;\n    } finally {\n      ngMocksUniverse.flags.delete('hasRootModule');\n      ngMocksUniverse.config.delete('mockNgDefResolver');\n      this.stash.restore();\n    }\n  }\n\n  // istanbul ignore next\n  public async catch(reject?: ((reason: any) => PromiseLike<never>) | undefined | null): Promise<IMockBuilderResult> {\n    return this.then().catch(reject);\n  }\n\n  public exclude(def: any): this {\n    this.wipe(def);\n    this.excludeDef.add(def);\n    this.setConfigDef(def);\n\n    return this;\n  }\n\n  // istanbul ignore next\n  public async finally(callback?: (() => void) | null | undefined): Promise<IMockBuilderResult> {\n    return this.then().finally(callback);\n  }\n\n  public keep(input: any, config?: IMockBuilderConfig): this {\n    const { def, providers } = normaliseModule(input);\n\n    const existing = this.keepDef.has(def) ? this.defProviders.get(def) : [];\n    this.wipe(def);\n    this.keepDef.add(def);\n\n    // a magic to support modules with providers.\n    if (providers) {\n      this.defProviders.set(def, [...(existing || /* istanbul ignore next */ []), ...providers]);\n    }\n\n    this.setConfigDef(def, config);\n\n    return this;\n  }\n\n  public mock(input: any, a1: any = defaultMock, a2?: any): this {\n    const { def, providers } = normaliseModule(input);\n\n    const { config, mock } = parseMockArguments(def, a1, a2, defaultMock);\n    if (isNgDef(mock) && isNgDef(input) && !isNgDef(input, 't')) {\n      throw new Error(\n        [\n          `MockBuilder.mock(${funcGetName(input)}) received a class when its shape is expected.`,\n          'Please try ngMocks.defaultMock instead.',\n        ].join(' '),\n      );\n    }\n\n    const existing = this.mockDef.has(def) ? this.defProviders.get(def) : [];\n    this.wipe(def);\n    this.mockDef.add(def);\n\n    // a magic to support modules with providers.\n    if (providers) {\n      this.defProviders.set(def, [...(existing || /* istanbul ignore next */ []), ...providers]);\n    }\n\n    this.setDefValue(def, mock);\n    this.setConfigDef(def, config);\n\n    return this;\n  }\n\n  public provide(def: Provider): this {\n    for (const provider of flatten(def)) {\n      const { provide, multi } = parseProvider(provider);\n      const existing = this.providerDef.has(provide) ? this.providerDef.get(provide) : [];\n      this.providerDef.set(provide, generateProviderValue(provider, existing, multi));\n    }\n\n    return this;\n  }\n\n  public replace(source: Type<any>, destination: Type<any>, config?: IMockBuilderConfig): this {\n    if (!isNgDef(destination) || !isNgDef(source) || isNgDef(destination, 'i') || isNgDef(source, 'i')) {\n      throw new Error(\n        'Cannot replace the declaration, both have to be a Module, a Component, a Directive or a Pipe, for Providers use `.mock` or `.provide`',\n      );\n    }\n\n    this.wipe(source);\n    this.replaceDef.add(source);\n    this.defValue.set(source, destination);\n    this.setConfigDef(source, config);\n\n    return this;\n  }\n\n  // eslint-disable-next-line unicorn/no-thenable\n  public async then<TResult1 = IMockBuilderResult>(\n    fulfill?: ((value: IMockBuilderResult) => PromiseLike<TResult1>) | undefined | null,\n    reject?: ((reason: any) => PromiseLike<any>) | undefined | null,\n  ): Promise<TResult1> {\n    const promise = new Promise((resolve: (value: IMockBuilderResult) => void): void => {\n      const testBed: TestBedStatic = TestBed.configureTestingModule(this.build()) as never;\n      for (const callback of mapValues(this.beforeCC)) {\n        callback(testBed);\n      }\n      const testBedPromise = testBed.compileComponents();\n      testBedPromise.then(() => {\n        resolve({ testBed });\n      });\n    });\n\n    return promise.then(fulfill, reject);\n  }\n\n  private combineParams(): BuilderData {\n    return {\n      configDef: this.configDef,\n      configDefault: this.configDefault,\n      defProviders: this.defProviders,\n      defValue: this.defValue,\n      excludeDef: this.excludeDef,\n      keepDef: this.keepDef,\n      mockDef: this.mockDef,\n      providerDef: this.providerDef,\n      replaceDef: this.replaceDef,\n    };\n  }\n\n  private setConfigDef(def: any, config?: any): void {\n    if (config || !this.configDef.has(def)) {\n      this.configDef.set(def, config ?? this.configDefault);\n    }\n  }\n\n  private setDefValue(def: any, mock: any): void {\n    if (mock === defaultMock) {\n      this.defValue.delete(def);\n    } else {\n      this.defValue.set(def, mock);\n    }\n  }\n\n  private wipe(def: Type<any>): void {\n    this.defProviders.delete(def);\n    this.defValue.delete(def);\n    this.excludeDef.delete(def);\n    this.keepDef.delete(def);\n    this.mockDef.delete(def);\n    this.providerDef.delete(def);\n    this.replaceDef.delete(def);\n  }\n}\n","import { mapEntries, mapValues } from '../../common/core.helpers';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\n\nimport initExcludeDef from './init-exclude-def';\nimport initKeepDef from './init-keep-def';\nimport initMockDeclarations from './init-mock-declarations';\nimport initModules from './init-modules';\nimport initReplaceDef from './init-replace-def';\nimport { BuilderData } from './types';\n\nexport default ({\n  configDef,\n  defProviders,\n  defValue,\n  excludeDef,\n  keepDef,\n  mockDef,\n  replaceDef,\n}: BuilderData): Map<any, any> => {\n  ngMocksUniverse.flags.add('cachePipe');\n\n  // collecting multi flags of providers.\n  ngMocksUniverse.config.set('ngMocksMulti', new Set());\n  // collecting all deps of providers.\n  ngMocksUniverse.config.set('ngMocksDeps', new Set());\n  // collecting all declarations of kept modules.\n  ngMocksUniverse.config.set('ngMocksDepsSkip', new Set());\n  // flags to understand how to mock nested declarations.\n  ngMocksUniverse.config.set('ngMocksDepsResolution', new Map());\n\n  const dependencies = initKeepDef(keepDef, configDef);\n  for (const dependency of mapValues(dependencies)) {\n    ngMocksUniverse.touches.add(dependency);\n\n    // MockBuilder has instruction about the dependency, skipping it.\n    if (configDef.has(dependency)) {\n      continue;\n    }\n\n    // Checking global configuration for the dependency.\n    const resolution = ngMocksUniverse.getResolution(dependency);\n    if (resolution === 'replace') {\n      replaceDef.add(dependency);\n      defValue.set(dependency, ngMocksUniverse.getBuildDeclaration(dependency));\n    } else if (resolution === 'keep') {\n      keepDef.add(dependency);\n    } else if (resolution === 'exclude') {\n      excludeDef.add(dependency);\n    } else {\n      mockDef.add(dependency);\n    }\n\n    configDef.set(dependency, {\n      dependency: true,\n      __internal: true,\n    });\n  }\n\n  for (const [k, v] of mapEntries(configDef)) {\n    ngMocksUniverse.config.set(k, {\n      ...ngMocksUniverse.getConfigMock().get(k),\n      ...v,\n      defValue: defValue.get(k),\n    });\n  }\n\n  initReplaceDef(replaceDef, defValue);\n  initExcludeDef(excludeDef);\n  initMockDeclarations(mockDef, defValue);\n\n  return initModules(keepDef, mockDef, replaceDef, defProviders);\n};\n","import { mapValues } from '../../common/core.helpers';\nimport { funcExtractDeps } from '../../common/func.extract-deps';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\n\nexport default (keepDef: Set<any>, configDef: Map<any, any>): Set<any> => {\n  const dependencies = new Set<any>();\n  const builtDeclarations = ngMocksUniverse.builtDeclarations;\n  const builtProviders = ngMocksUniverse.builtProviders;\n  const resolutions = ngMocksUniverse.config.get('ngMocksDepsResolution');\n  for (const def of mapValues(keepDef)) {\n    builtDeclarations.set(def, def);\n    builtProviders.set(def, def);\n    resolutions.set(def, 'keep');\n\n    const config = configDef.get(def);\n    if (config.shallow) {\n      funcExtractDeps(def, dependencies);\n    }\n  }\n\n  return dependencies;\n};\n","import { mapValues } from '../../common/core.helpers';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\n\nexport default (replaceDef: Set<any>, defValue: Map<any, any>): void => {\n  const builtDeclarations = ngMocksUniverse.builtDeclarations;\n  const resolutions = ngMocksUniverse.config.get('ngMocksDepsResolution');\n  for (const def of mapValues(replaceDef)) {\n    builtDeclarations.set(def, defValue.get(def));\n    resolutions.set(def, 'replace');\n  }\n};\n","import { mapValues } from '../../common/core.helpers';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\n\nexport default (excludeDef: Set<any>): void => {\n  const builtDeclarations = ngMocksUniverse.builtDeclarations;\n  const builtProviders = ngMocksUniverse.builtProviders;\n  const resolutions = ngMocksUniverse.config.get('ngMocksDepsResolution');\n  for (const def of mapValues(excludeDef)) {\n    builtDeclarations.set(def, null);\n    builtProviders.set(def, null);\n    resolutions.set(def, 'exclude');\n  }\n};\n","import { mapValues } from '../../common/core.helpers';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\n\nimport tryMockProvider from './try-mock-provider';\n\nexport default (mockDef: Set<any>, defValue: Map<any, any>): void => {\n  const builtDeclarations = ngMocksUniverse.builtDeclarations;\n  const resolutions: Map<any, string> = ngMocksUniverse.config.get('ngMocksDepsResolution');\n  for (const def of mapValues(mockDef)) {\n    const deleteTouch = !ngMocksUniverse.touches.has(def);\n\n    resolutions.set(def, 'mock');\n    builtDeclarations.set(def, undefined);\n    tryMockProvider(def, defValue);\n\n    if (deleteTouch) {\n      ngMocksUniverse.touches.delete(def);\n    }\n  }\n};\n","import { mapValues } from '../../common/core.helpers';\nimport { isNgDef } from '../../common/func.is-ng-def';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\nimport { MockModule } from '../../mock-module/mock-module';\nimport mockNgDef from '../../mock-module/mock-ng-def';\nimport collectDeclarations from '../../resolve/collect-declarations';\n\nimport tryMockDeclaration from './try-mock-declaration';\n\nexport default (\n  keepDef: Set<any>,\n  mockDef: Set<any>,\n  replaceDef: Set<any>,\n  defProviders: Map<any, any>,\n): Map<any, any> => {\n  const loProviders = new Map();\n\n  for (const def of [...mapValues(keepDef), ...mapValues(mockDef), ...mapValues(replaceDef)]) {\n    const meta = collectDeclarations(def);\n    const providers = [\n      ...(defProviders.get(def) ?? []),\n      ...(meta.Component?.providers ?? []),\n      ...(meta.Directive?.providers ?? []),\n    ];\n\n    const deleteTouch = !ngMocksUniverse.touches.has(def);\n    if (!mockDef.has(def)) {\n      ngMocksUniverse.flags.add('skipMock');\n    }\n\n    const isModule = isNgDef(def, 'm');\n    if (providers.length > 0) {\n      const [, loDef] = mockNgDef({ providers, skipMarkProviders: !isModule, skipExports: true });\n      loProviders.set(def, loDef.providers);\n    }\n    if (isModule) {\n      ngMocksUniverse.builtDeclarations.set(def, MockModule(def));\n    }\n\n    ngMocksUniverse.flags.delete('skipMock');\n    if (deleteTouch) {\n      ngMocksUniverse.touches.delete(def);\n    }\n  }\n  for (const def of mapValues(mockDef)) {\n    tryMockDeclaration(def);\n  }\n\n  return loProviders;\n};\n","import CoreDefStack from '../../common/core.def-stack';\nimport { mapValues } from '../../common/core.helpers';\nimport { NG_MOCKS_ROOT_PROVIDERS } from '../../common/core.tokens';\nimport { isNgInjectionToken } from '../../common/func.is-ng-injection-token';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\nimport helperResolveProvider from '../../mock-service/helper.resolve-provider';\nimport helperUseFactory from '../../mock-service/helper.use-factory';\n\nimport getRootProviderParameters from './get-root-provider-parameters';\nimport { BuilderData, NgMeta } from './types';\n\n// Mocking root providers.\nexport default (ngModule: NgMeta, { keepDef, mockDef }: BuilderData, resolutions: CoreDefStack<any, any>): void => {\n  // Adding missed providers.\n  const parameters = keepDef.has(NG_MOCKS_ROOT_PROVIDERS) ? new Set() : getRootProviderParameters(mockDef);\n  if (parameters.size > 0) {\n    for (const parameter of mapValues(parameters)) {\n      const mock = helperResolveProvider(parameter, resolutions);\n      if (mock) {\n        ngModule.providers.push(mock);\n      } else if (isNgInjectionToken(parameter)) {\n        const multi =\n          ngMocksUniverse.config.has('ngMocksMulti') && ngMocksUniverse.config.get('ngMocksMulti').has(parameter);\n        ngModule.providers.push(helperUseFactory(parameter, () => (multi ? [] : undefined)));\n      }\n    }\n  }\n};\n","import coreReflectParametersResolve from '../../common/core.reflect.parameters-resolve';\nimport { NG_MOCKS_ROOT_PROVIDERS } from '../../common/core.tokens';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\n\nimport addDefToRootProviderParameters from './add-def-to-root-provider-parameters';\nimport checkRootProviderDependency from './check-root-provider-dependency';\nimport extractDep from './extract-dep';\nimport getRootProvidersData from './get-root-providers-data';\nimport handleProvidedInDependency from './handle-provided-in-dependency';\nimport skipRootProviderDependency from './skip-root-provider-dependency';\nimport { BuilderData } from './types';\n\nexport default (mockDef: BuilderData['mockDef']): Set<any> => {\n  const parameters = new Set();\n  const { buckets, touched } = getRootProvidersData();\n\n  for (const bucket of buckets) {\n    for (const def of bucket) {\n      addDefToRootProviderParameters(parameters, mockDef, def);\n\n      for (const decorators of coreReflectParametersResolve(def)) {\n        const provide: any = extractDep(decorators);\n        handleProvidedInDependency(provide);\n        if (skipRootProviderDependency(provide)) {\n          continue;\n        }\n        checkRootProviderDependency(provide, touched, bucket);\n        if (mockDef.has(NG_MOCKS_ROOT_PROVIDERS) || !ngMocksUniverse.config.get('ngMocksDepsSkip').has(def)) {\n          parameters.add(provide);\n        } else {\n          ngMocksUniverse.config.get('ngMocksDepsSkip').add(provide);\n        }\n      }\n    }\n  }\n\n  return parameters;\n};\n","import { mapValues } from '../../common/core.helpers';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\n\nexport default (): {\n  buckets: any[];\n  touched: any[];\n} => {\n  // We need buckets here to process first all depsSkip, then deps and only after that all other defs.\n  const buckets: any[] = [\n    mapValues(ngMocksUniverse.config.get('ngMocksDepsSkip')),\n    mapValues(ngMocksUniverse.config.get('ngMocksDeps')),\n    mapValues(ngMocksUniverse.touches),\n  ];\n\n  // Also, we need to track what has been touched to check params recursively, but avoiding duplicates.\n  const touched: any[] = [].concat(...buckets);\n\n  return {\n    buckets,\n    touched,\n  };\n};\n","import { getTestBed } from '@angular/core/testing';\n\nimport { flatten } from '../../common/core.helpers';\nimport funcGetType from '../../common/func.get-type';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\n\nexport default () => {\n  const testBed = getTestBed();\n  // istanbul ignore else\n  if (testBed.ngModule) {\n    for (const def of flatten<any>(testBed.ngModule)) {\n      ngMocksUniverse.touches.add(funcGetType(def));\n    }\n  }\n};\n","import { ValueProvider } from '@angular/core';\n\nimport { mapEntries } from '../../common/core.helpers';\nimport { NG_MOCKS } from '../../common/core.tokens';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\n\nexport default (): ValueProvider => {\n  const mocks = new Map();\n  for (const [key, value] of [\n    ...mapEntries(ngMocksUniverse.builtProviders),\n    ...mapEntries(ngMocksUniverse.builtDeclarations),\n    ...mapEntries(ngMocksUniverse.cacheDeclarations),\n    ...mapEntries(ngMocksUniverse.cacheProviders),\n  ]) {\n    if (mocks.has(key)) {\n      continue;\n    }\n    mocks.set(key, value);\n  }\n\n  return {\n    provide: NG_MOCKS,\n    useValue: mocks,\n  };\n};\n","import { ValueProvider } from '@angular/core';\n\nimport { mapValues } from '../../common/core.helpers';\nimport { NG_MOCKS_TOUCHES } from '../../common/core.tokens';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\n\nexport default (): ValueProvider => {\n  // Redefining providers for kept declarations.\n  const touches = new Set();\n  for (const proto of mapValues(ngMocksUniverse.touches)) {\n    const source: any = proto;\n    let value = ngMocksUniverse.getBuildDeclaration(source);\n\n    // kept declarations should be based on their source.\n    if (value === undefined) {\n      value = source;\n    }\n\n    touches.add(source);\n    touches.add(value);\n  }\n\n  return {\n    provide: NG_MOCKS_TOUCHES,\n    useValue: touches,\n  };\n};\n","import { ValueProvider } from '@angular/core';\nimport { MetadataOverride } from '@angular/core/testing';\n\nimport { mapValues } from '../../common/core.helpers';\nimport coreReflectMeta from '../../common/core.reflect.meta';\nimport { NG_MOCKS_OVERRIDES } from '../../common/core.tokens';\nimport { Type } from '../../common/core.types';\nimport ngMocksUniverse from '../../common/ng-mocks-universe';\n\nimport getOverrideDef from './get-override-def';\nimport skipOverride from './skip-override';\n\nexport default (replaceDef: Set<any>, defValue: Map<any, any>): ValueProvider => {\n  const overrides: Map<Type<any>, [MetadataOverride<any>, MetadataOverride<any>]> = new Map();\n  for (const proto of mapValues(ngMocksUniverse.touches)) {\n    const source: any = proto;\n    const value = ngMocksUniverse.getBuildDeclaration(source) || source;\n    if (skipOverride(replaceDef, defValue, source, value)) {\n      continue;\n    }\n\n    const original = coreReflectMeta(value);\n    const override = getOverrideDef(original);\n    if (!override) {\n      continue;\n    }\n\n    // We need to delete standalone, because Angular was too lazy to check whether it has been really changed.\n    const patchedOriginal: Partial<typeof original> = {};\n    for (const key of Object.keys(override)) {\n      patchedOriginal[key] = original[key];\n    }\n\n    overrides.set(value, [{ set: override }, { set: patchedOriginal }]);\n  }\n\n  return {\n    provide: NG_MOCKS_OVERRIDES,\n    useValue: overrides,\n  };\n};\n","import { isNgDef } from '../../common/func.is-ng-def';\n\nexport default (\n  def: any,\n  a1: any,\n  a2: any,\n  defaultMockValue: any,\n): {\n  config: any;\n  mock: any;\n} => {\n  let mock: any = def === a1 ? defaultMockValue : a1;\n  let config: any = a2 ?? (a1 !== defaultMockValue && typeof a1 === 'object' ? a1 : undefined);\n  if (isNgDef(def, 'p') && typeof a1 === 'function' && a1 !== def && !isNgDef(a1, 'p')) {\n    mock = {\n      transform: a1,\n    };\n    config = a2;\n  } else if (isNgDef(def, 'i') || !isNgDef(def)) {\n    config = a2;\n  }\n  mock = mock === config ? defaultMockValue : mock;\n\n  return {\n    config,\n    mock,\n  };\n};\n","const objectsDiffer = (prototype: any, source: any): boolean => {\n  const prototypeKeys = Object.keys(prototype);\n  const sourceKeys = Object.keys(source);\n  if (prototypeKeys.length !== sourceKeys.length) {\n    return true;\n  }\n  for (const key of prototypeKeys) {\n    if (prototype[key] !== source[key]) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nexport default (prototype: any, source: any): boolean => {\n  if (prototype === source) {\n    return true;\n  }\n  if ((prototype && !source) || (!prototype && source)) {\n    return false;\n  }\n  if (objectsDiffer(prototype, source)) {\n    return false;\n  }\n\n  return true;\n};\n","import equalVariables from './equal-variables';\n\nexport default (prototype: any, source: any): boolean => {\n  if (prototype === source) {\n    return true;\n  }\n  if ((typeof prototype === 'boolean' || typeof source === 'boolean') && prototype !== source) {\n    return false;\n  }\n\n  return prototype.$implicit === source.$implicit && equalVariables(prototype.variables, source.variables);\n};\n","import equalRenderConfigs from './equal-render-configs';\n\nexport default (source: any, destination: any): boolean => {\n  if (destination === source) {\n    return true;\n  }\n  if (destination.dependency !== source.dependency) {\n    return false;\n  }\n  if (destination.export !== source.export) {\n    return false;\n  }\n  if (destination.exportAll !== source.exportAll) {\n    return false;\n  }\n  if (!equalRenderConfigs(source.render, destination.render)) {\n    return false;\n  }\n\n  return true;\n};\n","import equalRenderDefs from './equal-render-defs';\n\nconst objectsDiffer = (destination: any, source: any): boolean => {\n  if (Object.keys(destination).length !== Object.keys(source).length) {\n    return true;\n  }\n  for (const key of Object.keys(destination)) {\n    if (!equalRenderDefs(destination[key], source[key])) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nexport default (source: any, destination: any): boolean => {\n  if (!equalRenderDefs(destination, source)) {\n    return false;\n  }\n  if (typeof destination !== 'object' || typeof source !== 'object') {\n    return true;\n  }\n  if (objectsDiffer(destination, source)) {\n    return false;\n  }\n\n  return true;\n};\n","import { mapKeys } from '../../common/core.helpers';\n\nexport default (source: Map<any, any>, destination: Map<any, any>, compare = (a: any, b: any) => a === b): boolean => {\n  if (!destination || destination.size !== source.size) {\n    return false;\n  }\n  for (const value of mapKeys(source)) {\n    if (!destination.has(value)) {\n      return false;\n    }\n    if (!compare(destination.get(value), source.get(value))) {\n      return false;\n    }\n  }\n\n  return true;\n};\n","import { flatten } from '../../common/core.helpers';\n\nconst areEqualProviderDefs = (thisDef: any, prototypeDef: any, ...keys: string[]) => {\n  for (const key of keys) {\n    if (prototypeDef && thisDef && prototypeDef[key] && thisDef[key] && prototypeDef[key] === thisDef[key]) {\n      return true;\n    }\n  }\n\n  return prototypeDef === thisDef;\n};\n\nexport default (prototype: any, source: any): boolean => {\n  if (Array.isArray(prototype) !== Array.isArray(source)) {\n    return false;\n  }\n\n  const [prototypeDefs, thisDefs] = [flatten(prototype), flatten(source)];\n  if (prototypeDefs.length !== thisDefs.length) {\n    return false;\n  }\n\n  for (let index = 0; index < prototypeDefs.length; index += 1) {\n    const [prototypeDef, thisDef] = [prototypeDefs[index], thisDefs[index]];\n\n    if (prototypeDef && thisDef && prototypeDef.multi !== thisDef.multi) {\n      return false;\n    }\n    if (areEqualProviderDefs(thisDef, prototypeDef, 'useValue', 'useClass', 'useFactory', 'useExisting')) {\n      continue;\n    }\n\n    return false;\n  }\n\n  return true;\n};\n","import { mapValues } from '../../common/core.helpers';\n\nexport default (source: Set<any>, destination: Set<any>): boolean => {\n  if (!destination || destination.size !== source.size) {\n    return false;\n  }\n  for (const value of mapValues(source)) {\n    if (!destination.has(value)) {\n      return false;\n    }\n  }\n\n  return true;\n};\n","import { TestModuleMetadata } from '@angular/core/testing';\n\nexport default (\n  ngModule: TestModuleMetadata,\n): TestModuleMetadata & {\n  declarations: any[];\n  imports: any[];\n  providers: any[];\n} => ({\n  ...ngModule,\n  declarations: [...(ngModule.declarations || /* istanbul ignore next */ [])],\n  imports: [...(ngModule.imports || /* istanbul ignore next */ [])],\n  providers: [...(ngModule.providers || /* istanbul ignore next */ [])],\n});\n","import { TestBed, TestModuleMetadata } from '@angular/core/testing';\n\nimport { mapEntries, mapValues } from '../common/core.helpers';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nimport { MockBuilderPromise } from './mock-builder.promise';\nimport areEqualConfigParams from './performance/are-equal-config-params';\nimport areEqualMaps from './performance/are-equal-maps';\nimport areEqualProviders from './performance/are-equal-providers';\nimport areEqualSets from './performance/are-equal-sets';\nimport getEmptyConfig from './performance/get-empty-config';\nimport requiredMetadata from './performance/required-metadata';\nimport { IMockBuilderResult } from './types';\n\nexport class MockBuilderPerformance extends MockBuilderPromise {\n  public build(): TestModuleMetadata {\n    const global = ngMocksUniverse.global;\n\n    // avoiding influences on cache when users extend the testing module.\n    if (global.has('builder:module') && global.has('builder:config') && this.equalsTo(global.get('builder:config'))) {\n      return requiredMetadata(global.get('builder:module'));\n    }\n\n    // removal of cached promise in case of mismatch\n    if (global.has('builder:module')) {\n      global.delete(global.get('builder:module'));\n    }\n\n    const clone = this.cloneConfig();\n    const ngModule = super.build();\n    global.set('builder:config', clone);\n    global.set('builder:module', ngModule);\n\n    // avoiding influences on cache when users extend the testing module.\n    return requiredMetadata(ngModule);\n  }\n\n  // eslint-disable-next-line unicorn/no-thenable\n  public async then<TResult1 = IMockBuilderResult>(\n    fulfill?: ((value: IMockBuilderResult) => PromiseLike<TResult1>) | undefined | null,\n    reject?: ((reason: any) => PromiseLike<never>) | undefined | null,\n  ): Promise<TResult1> {\n    const global = ngMocksUniverse.global;\n\n    const flags = global.has('bullet') && global.has('builder:module') && global.has('builder:config');\n    if (flags && this.equalsTo(global.get('builder:config'))) {\n      return global.get(global.get('builder:module')).then(fulfill, reject);\n    }\n\n    // we need to reset testing module in case if we are in bullet mode but current module does not match.\n    if (global.has('bullet') && global.has('bullet:reset')) {\n      console.warn('ngMocks.faster has zero effect due to changes in testing module between runs');\n      global.delete('bullet');\n      TestBed.resetTestingModule();\n      global.set('bullet', true);\n    }\n\n    const promise = super.then(fulfill, reject);\n    global.set(global.get('builder:module'), promise);\n\n    return promise;\n  }\n\n  private cloneConfig() {\n    const config = getEmptyConfig();\n\n    mapValues(this.beforeCC, config.beforeCC);\n    mapValues(this.excludeDef, config.excludeDef);\n    mapValues(this.keepDef, config.keepDef);\n    mapValues(this.mockDef, config.mockDef);\n    mapValues(this.replaceDef, config.replaceDef);\n\n    mapEntries(this.configDef, config.configDef);\n    mapEntries(this.defProviders, config.defProviders);\n    mapEntries(this.defValue, config.defValue);\n    mapEntries(this.providerDef, config.providerDef);\n\n    return config;\n  }\n\n  private equalsTo(prototype: Record<keyof any, any>): boolean {\n    for (const key of ['beforeCC', 'keepDef', 'replaceDef', 'excludeDef', 'mockDef']) {\n      if (!areEqualSets((this as any)[key], prototype[key])) {\n        return false;\n      }\n    }\n    for (const key of ['defValue']) {\n      if (!areEqualMaps((this as any)[key], prototype[key])) {\n        return false;\n      }\n    }\n    for (const key of ['providerDef', 'defProviders']) {\n      if (!areEqualMaps((this as any)[key], prototype[key], areEqualProviders)) {\n        return false;\n      }\n    }\n\n    return areEqualMaps(this.configDef, prototype.configDef, areEqualConfigParams);\n  }\n}\n","export default () => ({\n  beforeCC: new Set(),\n  configDef: new Map(),\n  defProviders: new Map(),\n  defValue: new Map(),\n  excludeDef: new Set(),\n  keepDef: new Set(),\n  mockDef: new Set(),\n  providerDef: new Map(),\n  replaceDef: new Set(),\n});\n","import { flatten } from '../common/core.helpers';\nimport { AnyDeclaration } from '../common/core.types';\nimport { NgModuleWithProviders } from '../common/func.is-ng-module-def-with-providers';\nimport { isStandalone } from '../common/func.is-standalone';\n\nimport { MockBuilderPerformance } from './mock-builder.performance';\nimport { IMockBuilder } from './types';\n\nexport type MockBuilderParam = string | AnyDeclaration<any> | NgModuleWithProviders;\n\n/**\n * MockBuilder provides reach and simple interfaces of chain functions\n * to build desired mock environment for tests.\n *\n * @see https://ng-mocks.sudo.eu/api/MockBuilder\n */\nexport function MockBuilder(\n  keepDeclaration?: MockBuilderParam | MockBuilderParam[] | null | undefined,\n  itsModuleToMock?: MockBuilderParam | MockBuilderParam[] | null | undefined,\n): IMockBuilder;\n\nexport function MockBuilder(...args: Array<MockBuilderParam | MockBuilderParam[] | null | undefined>): IMockBuilder {\n  const [keepDeclaration, itsModuleToMock] = args;\n\n  const instance = new MockBuilderPerformance(args.length < 2 ? { export: true } : { dependency: true });\n\n  if (keepDeclaration) {\n    for (const declaration of flatten(keepDeclaration)) {\n      instance.keep(declaration, {\n        export: true,\n        shallow: isStandalone(declaration),\n      });\n    }\n  }\n  if (itsModuleToMock) {\n    for (const declaration of flatten(itsModuleToMock)) {\n      instance.mock(declaration, declaration, {\n        export: true,\n        exportAll: true,\n      });\n    }\n  }\n\n  return instance;\n}\n","import { MockedDebugNode } from '../../mock-render/types';\n\nexport default (value: any): value is MockedDebugNode => {\n  return !!value?.nativeElement || !!value?.nativeNode;\n};\n","import { AnyType, DebugNodeSelector } from '../common/core.types';\nimport { isNgDef } from '../common/func.is-ng-def';\n\nexport default (selector: AnyType<any> | DebugNodeSelector): string => {\n  if (typeof selector === 'string') {\n    return selector;\n  }\n  if (typeof selector === 'function') {\n    return selector.name;\n  }\n  if (isNgDef(selector, 't')) {\n    return (selector as any)._desc;\n  }\n  if (Array.isArray(selector)) {\n    return selector[0];\n  }\n  if (!selector) {\n    return '<EMPTY>';\n  }\n\n  return '<UNKNOWN>';\n};\n","import { MockedDebugNode } from '../../mock-render/types';\n\nexport default (value: any): value is { debugElement: MockedDebugNode } => {\n  return !!value && typeof value === 'object' && value.debugElement !== undefined;\n};\n","import { DebugElement } from '@angular/core';\n\nimport isFixture from '../format/is-fixture';\nimport funcGetLastFixture from '../func.get-last-fixture';\n\nconst findDebugElement = (el: any): DebugElement | undefined => {\n  if (isFixture(el)) {\n    return findDebugElement(el.debugElement);\n  }\n  if (el && el.injector && el.query) {\n    return el;\n  }\n\n  return undefined;\n};\n\nexport default (args: any[], defaultNotFoundValue?: any): [any, any, any] => {\n  let el;\n  let sel;\n  let notFoundValue = defaultNotFoundValue;\n  if (args.length === 3) {\n    el = findDebugElement(args[0]);\n    sel = args[1];\n    notFoundValue = args[2];\n  } else if (args.length === 1) {\n    el = findDebugElement(funcGetLastFixture());\n    [sel] = args;\n  } else if (args[0]) {\n    el = findDebugElement(args[0]);\n    if (el) {\n      sel = args[1];\n    } else {\n      el = findDebugElement(funcGetLastFixture());\n      [sel, notFoundValue] = args;\n    }\n  } else {\n    sel = args[1];\n  }\n  sel = findDebugElement(sel) ?? sel;\n\n  return [el, sel, notFoundValue];\n};\n","var x = y => { var x = {}; __webpack_require__.d(x, y); return x; }\nvar y = x => () => x\nconst __WEBPACK_NAMESPACE_OBJECT__ = x({ [\"By\"]: () => __WEBPACK_EXTERNAL_MODULE__angular_platform_browser_bc6fa964__.By });","import { MockedComponent } from '../mock-component/types';\nimport { MockedDirective } from '../mock-directive/types';\nimport { MockedModule } from '../mock-module/types';\nimport { MockedPipe } from '../mock-pipe/types';\n\nimport { AnyType, Type } from './core.types';\n\n/**\n * Returns the original class of a mock module class.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/getSourceOfMock\n *\n * ```ts\n * getSourceOfMock(MockModule); // returns RealModule\n * getSourceOfMock(RealModule); // returns RealModule\n * ```\n */\nexport function getSourceOfMock<T>(declaration: AnyType<MockedModule<T>>): Type<T>;\n\n/**\n * Returns the original class of a mock component class.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/getSourceOfMock\n *\n * ```ts\n * getSourceOfMock(MockComponent); // returns RealComponent\n * getSourceOfMock(RealComponent); // returns RealComponent\n * ```\n */\nexport function getSourceOfMock<T>(declaration: AnyType<MockedComponent<T>>): Type<T>;\n\n/**\n * Returns the original class of a mock directive class.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/getSourceOfMock\n *\n * ```ts\n * getSourceOfMock(MockDirective); // returns RealDirective\n * getSourceOfMock(RealDirective); // returns RealDirective\n * ```\n */\nexport function getSourceOfMock<T>(declaration: AnyType<MockedDirective<T>>): Type<T>;\n\n/**\n * Returns the original class of a mock pipe class.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/getSourceOfMock\n *\n * ```ts\n * getSourceOfMock(MockPipe); // returns RealPipe\n * getSourceOfMock(RealPipe); // returns RealPipe\n * ```\n */\nexport function getSourceOfMock<T>(declaration: AnyType<MockedPipe<T>>): Type<T>;\n\n/**\n * Returns the original class of a mock class.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/getSourceOfMock\n *\n * ```ts\n * getSourceOfMock(MockClass); // returns RealClass\n * getSourceOfMock(RealClass); // returns RealClass\n * ```\n */\nexport function getSourceOfMock<T>(declaration: AnyType<T>): Type<T>;\n\nexport function getSourceOfMock<T>(declaration: any): Type<T> {\n  return typeof declaration === 'function' && declaration.mockOf ? declaration.mockOf : declaration;\n}\n","import { DebugElement, Predicate } from '@angular/core';\nimport { By } from '@angular/platform-browser';\n\nimport { AnyType } from '../../common/core.types';\nimport { getSourceOfMock } from '../../common/func.get-source-of-mock';\n\nexport default (selector: string | AnyType<any> | [string] | [string, any]): Predicate<DebugElement> => {\n  return Array.isArray(selector)\n    ? By.css(selector.length === 1 ? `[${selector[0]}]` : `[${selector[0]}=\"${selector[1]}\"]`)\n    : typeof selector === 'string'\n    ? By.css(selector)\n    : By.directive(getSourceOfMock(selector));\n};\n","import { DebugElement } from '@angular/core';\n\nimport isDebugNode from '../format/is-debug-node';\nimport funcParseFindArgsName from '../func.parse-find-args-name';\n\nimport funcParseFindArgs from './func.parse-find-args';\nimport funcParseFindTerm from './func.parse-find-term';\n\nconst defaultNotFoundValue = {}; // simulating Symbol\n\nexport default (...args: any[]): DebugElement => {\n  const [el, sel, notFoundValue] = funcParseFindArgs(args, defaultNotFoundValue);\n  const result = isDebugNode(sel) ? sel : el?.query(funcParseFindTerm(sel));\n  if (result) {\n    return result;\n  }\n  if (notFoundValue !== defaultNotFoundValue) {\n    return notFoundValue;\n  }\n  throw new Error(`Cannot find an element via ngMocks.find(${funcParseFindArgsName(sel)})`);\n};\n","import { MockedDebugNode } from '../../mock-render/types';\n\nexport default (node: MockedDebugNode): boolean => {\n  return node.nativeNode.nodeName === '#text';\n};\n","export default (a: any, b: any): boolean => {\n  if (!a || !b) {\n    return false;\n  }\n\n  return a === b;\n};\n","import detectTextNode from './detect-text-node';\n\nexport default (node: any) => {\n  return detectTextNode(node)\n    ? undefined\n    : node.injector._tNode || // ivy\n        node.injector.elDef || // classic\n        undefined;\n};\n","import { Injector } from '@angular/core';\n\nimport { getTestBedInjection } from './core.helpers';\n\nconst defaultInjector: any = {};\n\nexport default (declaration: any, injector: Injector = defaultInjector): any => {\n  if (injector === defaultInjector) {\n    return getTestBedInjection(declaration);\n  }\n  try {\n    return injector.get(declaration);\n  } catch {\n    return undefined;\n  }\n};\n","import { DebugElement, ViewContainerRef } from '@angular/core';\n\nimport coreInjector from '../../common/core.injector';\n\nimport elDefGetNode from './el-def-get-node';\n\nconst getVcr = (node: any, child: any): undefined | ViewContainerRef => {\n  if (node === child) {\n    return undefined;\n  }\n  if (child.nativeNode.nodeName !== '#comment') {\n    return undefined;\n  }\n\n  return coreInjector(ViewContainerRef, child.injector);\n};\n\nconst getScanViewRefRootNodes = (node: any, child: any): Array<[number, any]> => {\n  const vcr = getVcr(node, child);\n  if (!vcr) {\n    return [];\n  }\n\n  const result: Array<[number, any]> = [];\n  for (let vrIndex = 0; vrIndex < vcr.length; vrIndex += 1) {\n    const vr = vcr.get(vrIndex);\n    for (let rnIndex = 0; rnIndex < (vr as any).rootNodes.length; rnIndex += 1) {\n      result.push([rnIndex, (vr as any).rootNodes[rnIndex]]);\n    }\n  }\n\n  return result;\n};\n\nconst scanViewRef = (node: DebugElement) => {\n  let result: any;\n  let index: any;\n\n  for (const child of node.parent?.childNodes || []) {\n    for (const [rnIndex, rootNode] of getScanViewRefRootNodes(node, child)) {\n      if (rootNode === node.nativeNode && (index === undefined || rnIndex < index)) {\n        result = elDefGetNode(child);\n        index = rnIndex;\n      }\n    }\n  }\n\n  return result;\n};\n\nexport default (node: any) => {\n  return (\n    node.injector._tNode?.parent || // ivy\n    node.injector.elDef?.parent || // classic\n    scanViewRef(node) ||\n    node.parent?.injector._tNode || // ivy\n    node.parent?.injector.elDef || // classic\n    undefined\n  );\n};\n","import { MockedDebugNode } from '../../mock-render/types';\n\nimport detectTextNode from './detect-text-node';\nimport elDefCompare from './el-def-compare';\nimport elDefGetNode from './el-def-get-node';\nimport elDefGetParent from './el-def-get-parent';\n\nexport default (node: MockedDebugNode): MockedDebugNode[] => {\n  const elDef = elDefGetNode(node);\n  if (!elDef || detectTextNode(node)) {\n    return [];\n  }\n\n  const isDirect = (node as any).childNodes !== undefined;\n  const children: MockedDebugNode[] = [];\n  for (const childNode of (node as any).childNodes || node.parent?.childNodes || []) {\n    const childNodeParent = elDefGetParent(childNode);\n\n    if (!isDirect && !elDefCompare(elDef, childNodeParent)) {\n      continue;\n    }\n    if (childNodeParent && !elDefCompare(elDef, childNodeParent)) {\n      continue;\n    }\n\n    children.push(childNode);\n  }\n\n  if ((node as any).parent?.name === 'BODY') {\n    const childNodes: any[] = (node as any).parent.childNodes;\n    let start = childNodes.length;\n    let end = 0;\n    for (let i = childNodes.length - 1; i >= 0; i -= 1) {\n      const childNode = childNodes[i];\n      if (childNode.nativeNode.nodeName === '#comment') {\n        end = i;\n      } else if (childNode.nativeNode === node.nativeNode) {\n        start = i + 1;\n        break;\n      }\n    }\n    for (let i = start; i < end; i += 1) {\n      children.push(childNodes[i]);\n    }\n  }\n\n  return children;\n};\n","import { MockedDebugNode } from '../../mock-render/types';\n\nimport elDefCompare from './el-def-compare';\nimport elDefGetNode from './el-def-get-node';\nimport elDefGetParent from './el-def-get-parent';\n\nconst detectParent = (node: MockedDebugNode, parent: MockedDebugNode | undefined): MockedDebugNode | undefined => {\n  if (parent) {\n    return parent;\n  }\n\n  const expected = elDefGetParent(node);\n  const currentParent = node.parent ? elDefGetNode(node.parent) : undefined;\n  if (node.parent && elDefCompare(expected, currentParent)) {\n    return node.parent;\n  }\n  for (const childNode of node.parent?.childNodes || []) {\n    const childElDef = elDefGetNode(childNode);\n    if (elDefCompare(expected, childElDef)) {\n      return childNode;\n    }\n  }\n\n  return undefined;\n};\n\nexport default ((): typeof detectParent => detectParent)();\n","import { MockedDebugNode } from '../../mock-render/types';\n\nimport detectTextNode from './detect-text-node';\nimport nestedCheckChildren from './nested-check-children';\nimport nestedCheckParent from './nested-check-parent';\n\nconst nestedCheck = (\n  node: MockedDebugNode | null | undefined,\n  parent: MockedDebugNode | undefined,\n  check: (node: MockedDebugNode, parent?: MockedDebugNode) => void | boolean,\n  includeTextNode = false,\n): boolean => {\n  if (!node) {\n    return false;\n  }\n  if (!includeTextNode && detectTextNode(node)) {\n    return false;\n  }\n  if (check(node, nestedCheckParent(node, parent))) {\n    return true;\n  }\n\n  for (const childNode of nestedCheckChildren(node)) {\n    if (nestedCheck(childNode, node, check, includeTextNode)) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nexport default ((): typeof nestedCheck => nestedCheck)();\n","import { DebugNode } from '@angular/core';\n\nimport { DebugNodeSelector } from '../../common/core.types';\nimport mockHelperFind from '../find/mock-helper.find';\nimport funcGetLastFixture from '../func.get-last-fixture';\n\nimport nestedCheck from './nested-check';\n\nexport default (\n  sel: DebugNode | DebugNodeSelector,\n  callback: (node: DebugNode, parent?: DebugNode) => void | boolean,\n  includeTextNode = false,\n): void => {\n  const el = mockHelperFind(funcGetLastFixture(), sel, undefined);\n  nestedCheck(el, undefined, callback, includeTextNode);\n};\n","import isDebugNode from './format/is-debug-node';\nimport isFixture from './format/is-fixture';\nimport funcGetLastFixture from './func.get-last-fixture';\n\nconst isSelector = (value: any): boolean => {\n  if (typeof value === 'string') {\n    return true;\n  }\n  if (Array.isArray(value) && typeof value[0] === 'string') {\n    return true;\n  }\n  if (isFixture(value)) {\n    return true;\n  }\n  if (isDebugNode(value)) {\n    return true;\n  }\n\n  return true;\n};\n\nexport default (args: any[], isValidValue: (value: any) => boolean, defaultNotFoundValue?: any): [any, any, any] => {\n  let el;\n  let sel;\n  let notFoundValue = defaultNotFoundValue;\n  if (args.length === 3) {\n    [el, sel, notFoundValue] = args;\n  } else if (args.length === 1) {\n    el = funcGetLastFixture();\n    [sel] = args;\n  } else if (isValidValue(args[1]) && isSelector(args[0])) {\n    [el, sel] = args;\n  } else {\n    el = funcGetLastFixture();\n    [sel, notFoundValue] = args;\n  }\n\n  return [el, sel, notFoundValue];\n};\n","import { DebugNode, Directive } from '@angular/core';\n\nimport coreInjector from '../common/core.injector';\nimport coreReflectDirectiveResolve from '../common/core.reflect.directive-resolve';\nimport funcGetType from '../common/func.get-type';\n\nconst getMeta = (token: any): Directive | undefined => {\n  try {\n    return coreReflectDirectiveResolve(token);\n  } catch {\n    return undefined;\n  }\n};\n\nexport default (el: DebugNode | null | undefined, token: any): Directive | undefined => {\n  // istanbul ignore if\n  if (!el) {\n    return undefined;\n  }\n\n  try {\n    const provider = funcGetType(token);\n    const instance = coreInjector(provider, el.injector);\n\n    return getMeta(instance.constructor);\n  } catch {\n    return undefined;\n  }\n};\n","import { MockedDebugNode } from '../../mock-render/types';\n\nexport default (node: MockedDebugNode): string[] => {\n  return (node.injector as any).elDef ? Object.keys((node.injector as any).elDef.element.publicProviders) : [];\n};\n","import { DirectiveIo } from '../../common/core.types';\nimport { MockedDebugNode } from '../../mock-render/types';\nimport funcParseProviderTokensDirectives from '../func.parse-provider-tokens-directives';\n\nexport default (node: MockedDebugNode, key: string): [Array<DirectiveIo>, string[], number] => {\n  const config = (node.injector as any).elDef.element.publicProviders[key];\n  const token = config.provider.value;\n  if (!token) {\n    return [[], [], 0];\n  }\n  const meta = funcParseProviderTokensDirectives(node, token);\n\n  const requiredAttributes = config.bindings.map((binding: any) => binding.nonMinifiedName || binding.name);\n\n  return [meta?.inputs || [], requiredAttributes, config.nodeIndex];\n};\n","import funcDirectiveIoParse from '../../common/func.directive-io-parse';\nimport { MockedDebugNode } from '../../mock-render/types';\nimport funcParseProviderTokensDirectives from '../func.parse-provider-tokens-directives';\n\nimport funcGetPublicProviderKeys from './func.get-public-provider-keys';\nimport funcParseInputsAndRequiresAttributes from './func.parse-inputs-and-requires-attributes';\n\nconst collectSelectors = (node: MockedDebugNode): string[] => {\n  const selectors: string[] = [];\n\n  for (const token of node.providerTokens) {\n    const meta = funcParseProviderTokensDirectives(node, token);\n    if (meta?.selector && selectors.indexOf(meta.selector) === -1) {\n      selectors.push(meta.selector);\n    }\n  }\n\n  return selectors;\n};\n\nconst collectAttributesClassic = (node: MockedDebugNode): string[] => {\n  const result: string[] = [];\n\n  for (const key of funcGetPublicProviderKeys(node)) {\n    const [inputs, expectedAttributes] = funcParseInputsAndRequiresAttributes(node, key);\n    for (const input of inputs) {\n      const { name, alias } = funcDirectiveIoParse(input);\n      const attr = alias || name;\n      if (expectedAttributes.indexOf(name) !== -1 && result.indexOf(attr) === -1) {\n        result.push(attr);\n      }\n    }\n  }\n\n  return result;\n};\n\nconst collectAttributesIvy = (node: MockedDebugNode): string[] => {\n  const result: string[] = [];\n\n  const attrs = (node.injector as any)._tNode?.attrs || [];\n  let step = 2;\n  for (let index = 0; index < attrs.length; index += step) {\n    // 3 is a divider between static and dynamic bindings\n    if (typeof attrs[index] === 'number') {\n      step = 1;\n      continue;\n    }\n    const attr = attrs[index];\n    if ((node.injector as any)._tNode.inputs?.[attr] && result.indexOf(attr) === -1) {\n      result.push(attr);\n    }\n  }\n\n  return result;\n};\n\nexport default (node: MockedDebugNode): [string[], string[]] => {\n  const selectors = collectSelectors(node);\n  const attributes = [...collectAttributesClassic(node), ...collectAttributesIvy(node)];\n\n  return [selectors, attributes];\n};\n","import { MockedDebugNode } from '../../mock-render/types';\n\nimport detectAttributeInSelectors from './detect-attribute-in-selectors';\nimport detectSelectorsFromNode from './detect-selectors-from-node';\n\nexport default (attribute: string): ((node: MockedDebugNode) => boolean) =>\n  node => {\n    const [selectors, attributes] = detectSelectorsFromNode(node);\n\n    if (attributes.indexOf(attribute) !== -1) {\n      return true;\n    }\n\n    if (detectAttributeInSelectors(selectors, attribute)) {\n      return true;\n    }\n\n    return false;\n  };\n","export default (selectors: string[], query: string): boolean => {\n  for (const selector of selectors) {\n    const attributes = selector.match(/\\[([^=\\]]+)/g);\n    if (!attributes) {\n      continue;\n    }\n\n    for (const attribute of attributes) {\n      if (attribute === `[${query}`) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n","import funcDirectiveIoParse from '../../common/func.directive-io-parse';\nimport { MockedDebugNode } from '../../mock-render/types';\n\nimport funcGetPublicProviderKeys from './func.get-public-provider-keys';\nimport funcParseInputsAndRequiresAttributes from './func.parse-inputs-and-requires-attributes';\n\nconst detectInClassic = (node: MockedDebugNode, attribute: string, value: any): boolean => {\n  for (const key of funcGetPublicProviderKeys(node)) {\n    const [inputs, expectedAttributes, nodeIndex] = funcParseInputsAndRequiresAttributes(node, key);\n    for (const input of inputs) {\n      const { name, alias } = funcDirectiveIoParse(input);\n      if (attribute !== (alias || name) || expectedAttributes.indexOf(name) === -1) {\n        continue;\n      }\n      if (value === (node.injector as any).view.nodes[nodeIndex].instance[name]) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n\nconst detectInIvy = (node: MockedDebugNode, attribute: string, value: any): boolean => {\n  const attrs = (node.injector as any)._tNode?.attrs || [];\n  let step = 2;\n  for (let index = 0; index < attrs.length; index += step) {\n    // 3 is a divider between static and dynamic bindings\n    if (typeof attrs[index] === 'number') {\n      step = 1;\n      continue;\n    }\n    const attr = attrs[index];\n    if (attr !== attribute || !(node.injector as any)._tNode.inputs?.[attr]) {\n      continue;\n    }\n    const [attrIndex, attrProp] = (node.injector as any)._tNode.inputs[attr];\n\n    if (value === (node.injector as any)._lView?.[attrIndex][attrProp]) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nexport default (attribute: string, value: any): ((node: MockedDebugNode) => boolean) =>\n  node => {\n    if (detectInIvy(node, attribute, value)) {\n      return true;\n    }\n\n    return detectInClassic(node, attribute, value);\n  };\n","import coreInjector from '../../common/core.injector';\nimport { AnyType } from '../../common/core.types';\nimport { getSourceOfMock } from '../../common/func.get-source-of-mock';\nimport { MockedDebugNode } from '../../mock-render/types';\n\nexport default (declaration: AnyType<any>): ((node: MockedDebugNode) => boolean) => {\n  const source = getSourceOfMock(declaration);\n\n  return node =>\n    !!node && node.providerTokens.indexOf(source) !== -1 && coreInjector(source, node.injector) !== undefined;\n};\n","import { MockedDebugNode } from '../../mock-render/types';\n\nexport default (id: string): ((node: MockedDebugNode) => boolean) =>\n  node => {\n    return !!node.references[id];\n  };\n","const regExp = new RegExp('\\\\[.*?\\\\]', 'g');\n\nexport default (selectors: string[], query: string): boolean => {\n  for (const selector of selectors) {\n    const attributes = selector.replace(regExp, '').split(',');\n\n    for (const attribute of attributes) {\n      if (attribute.trim() === query) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n","import { AnyType } from '../../common/core.types';\nimport { MockedDebugNode } from '../../mock-render/types';\n\nimport crawlByAttribute from './crawl-by-attribute';\nimport crawlByAttributeValue from './crawl-by-attribute-value';\nimport crawlByDeclaration from './crawl-by-declaration';\nimport crawlById from './crawl-by-id';\nimport crawlByTagName from './crawl-by-tag-name';\n\ntype SELECTOR = string | AnyType<any> | [any] | [any, any];\n\nconst isCrawlByAttribute = (selector: SELECTOR): selector is [string] => {\n  return Array.isArray(selector) && selector.length === 1 && typeof selector[0] === 'string';\n};\n\nconst isCrawlByAttributeValue = (selector: SELECTOR): selector is [string, any] => {\n  return Array.isArray(selector) && selector.length === 2 && typeof selector[0] === 'string';\n};\n\nconst isCrawlById = (selector: SELECTOR): selector is string => {\n  return typeof selector === 'string' && selector.indexOf('#') === 0 && selector.length > 1;\n};\n\nconst isCrawlByTagName = (selector: SELECTOR): selector is string => {\n  return typeof selector === 'string' && selector.indexOf('#') !== 0 && selector.length > 0;\n};\n\nconst isCrawlByDeclaration = (selector: SELECTOR): selector is AnyType<any> => {\n  return typeof selector === 'function';\n};\n\nexport default (selector: SELECTOR): ((node: MockedDebugNode) => boolean) => {\n  if (isCrawlByAttribute(selector)) {\n    return crawlByAttribute(selector[0]);\n  }\n  if (isCrawlByAttributeValue(selector)) {\n    return crawlByAttributeValue(selector[0], selector[1]);\n  }\n  if (isCrawlById(selector)) {\n    return crawlById(selector.slice(1));\n  }\n  if (isCrawlByTagName(selector)) {\n    return crawlByTagName(selector);\n  }\n  if (isCrawlByDeclaration(selector)) {\n    return crawlByDeclaration(selector);\n  }\n\n  throw new Error('Unknown selector');\n};\n","import { MockedDebugNode } from '../../mock-render/types';\n\nimport detectSelectorsFromNode from './detect-selectors-from-node';\nimport detectTagNameInSelectors from './detect-tag-name-in-selectors';\n\nexport default (attribute: string): ((node: MockedDebugNode) => boolean) =>\n  node => {\n    const [selectors] = detectSelectorsFromNode(node);\n\n    return detectTagNameInSelectors(selectors, attribute);\n  };\n","export default (value: any) => {\n  if (typeof value === 'string') {\n    return true;\n  }\n  if (Array.isArray(value) && typeof value[0] === 'string') {\n    return true;\n  }\n\n  return typeof value === 'function';\n};\n","import mockHelperFind from '../find/mock-helper.find';\nimport funcGetLastFixture from '../func.get-last-fixture';\nimport funcParseFindArgs from '../func.parse-find-args';\nimport funcParseFindArgsName from '../func.parse-find-args-name';\n\nimport detectCrawler from './detect-crawler';\nimport detectTextNode from './detect-text-node';\nimport funcIsValidRevealSelector from './func.is-valid-reveal-selector';\nimport mockHelperCrawl from './mock-helper.crawl';\n\nconst defaultNotFoundValue = {}; // simulating Symbol\n\nexport default (...args: any[]): any => {\n  const [el, sel, notFoundValue] = funcParseFindArgs(args, funcIsValidRevealSelector, defaultNotFoundValue);\n  const root = mockHelperFind(funcGetLastFixture(), el, undefined);\n\n  const detector = detectCrawler(sel);\n\n  let result;\n  mockHelperCrawl(root, node => {\n    if (node !== root && !detectTextNode(node) && detector(node)) {\n      result = node;\n\n      return true;\n    }\n\n    return false;\n  });\n  if (result) {\n    return result;\n  }\n  if (notFoundValue !== defaultNotFoundValue) {\n    return notFoundValue;\n  }\n\n  throw new Error(`Cannot find a DebugElement via ngMocks.reveal(${funcParseFindArgsName(sel)})`);\n};\n","import funcIsMock from './func.is-mock';\nimport { MockControlValueAccessor } from './mock-control-value-accessor';\n\n/**\n * isMockControlValueAccessor helps to assert that an instance is a mock ControlValueAccessor\n * to perform valueChange or touch simulations.\n * Usually, it is used in if statements.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isMockControlValueAccessor\n * @see https://ng-mocks.sudo.eu/api/ngMocks/change\n * @see https://ng-mocks.sudo.eu/api/ngMocks/touch\n */\nexport const isMockControlValueAccessor = <T>(value: T): value is T & MockControlValueAccessor => {\n  if (!funcIsMock(value)) {\n    return false;\n  }\n\n  return !!value.__ngMocksConfig.isControlValueAccessor;\n};\n","export default (value: any): value is HTMLElement => {\n  return !!value && typeof value === 'object' && value.innerHTML !== undefined;\n};\n","import mockHelperStub from '../mock-helper.stub';\n\n/**\n * @see https://developer.mozilla.org/de/docs/Web/Events\n */\nconst preventBubble = ['focus', 'blur', 'load', 'unload', 'change', 'reset', 'scroll'];\n\n// istanbul ignore next\nconst customEvent = (event: string, params?: EventInit) => {\n  const initParams = {\n    bubbles: false,\n    cancelable: false,\n    ...params,\n  };\n  const eventObj = document.createEvent('CustomEvent');\n  eventObj.initCustomEvent(event, initParams.bubbles, initParams.cancelable, null);\n\n  return eventObj;\n};\n\nconst eventCtor =\n  typeof (Event as any) === 'function'\n    ? (event: string, init?: EventInit): CustomEvent => new CustomEvent(event, init)\n    : /* istanbul ignore next */ customEvent;\n\nconst keyMap: Record<string, object> = {\n  alt: {\n    altKey: true,\n    code: 'AltLeft',\n    key: 'Alt',\n    location: 1,\n    which: 18,\n  },\n  arrowdown: {\n    code: 'ArrowDown',\n    key: 'ArrowDown',\n    location: 0,\n    which: 40,\n  },\n  arrowleft: {\n    code: 'ArrowLeft',\n    key: 'ArrowLeft',\n    location: 0,\n    which: 37,\n  },\n  arrowright: {\n    code: 'ArrowRight',\n    key: 'ArrowRight',\n    location: 0,\n    which: 39,\n  },\n  arrowup: {\n    code: 'ArrowUp',\n    key: 'ArrowUp',\n    location: 0,\n    which: 38,\n  },\n  backspace: {\n    code: 'Backspace',\n    key: 'Backspace',\n    location: 0,\n    which: 8,\n  },\n  control: {\n    code: 'ControlLeft',\n    ctrlKey: true,\n    key: 'Control',\n    location: 1,\n    which: 17,\n  },\n  enter: {\n    code: 'Enter',\n    key: 'Enter',\n    location: 0,\n    which: 13,\n  },\n  esc: {\n    code: 'Escape',\n    key: 'Escape',\n    location: 0,\n    which: 27,\n  },\n  meta: {\n    code: 'MetaLeft',\n    key: 'Meta',\n    location: 1,\n    metaKey: true,\n    which: 91,\n  },\n  shift: {\n    code: 'ShiftLeft',\n    key: 'Shift',\n    location: 1,\n    shiftKey: true,\n    which: 16,\n  },\n  space: {\n    code: 'Space',\n    key: ' ',\n    location: 0,\n    which: 32,\n  },\n  tab: {\n    code: 'Tab',\n    key: 'Tab',\n    location: 0,\n    which: 9,\n  },\n};\nfor (let f = 1; f <= 12; f += 1) {\n  keyMap[`f${f}`] = {\n    code: `F${f}`,\n    key: `F${f}`,\n    location: 0,\n    which: f + 111,\n  };\n}\n\nconst getCode = (char: string): string => {\n  const code = char.codePointAt(0);\n  // a-z\n  if (code && code >= 97 && code <= 122) {\n    return `Key${char.toUpperCase()}`;\n  }\n  // A-Z\n  if (code && code >= 65 && code <= 90) {\n    return `Key${char.toUpperCase()}`;\n  }\n  // A-Z\n  if (code && code >= 48 && code <= 57) {\n    return `Digit${char}`;\n  }\n\n  return 'Unknown';\n};\n\nconst applyPayload = (event: Event, payload?: string): void => {\n  const keyData: object = {};\n  for (const key of payload ? payload.split('.') : []) {\n    let map = keyMap[key];\n    if (!map && key.length === 1) {\n      map = {\n        code: getCode(key),\n        key,\n      };\n    }\n\n    if (!map) {\n      throw new Error(`Unknown event part ${key}`);\n    }\n\n    mockHelperStub(keyData, map);\n  }\n\n  if (payload) {\n    mockHelperStub(event, keyData);\n  }\n};\n\nexport default (\n  event: string,\n  init?: EventInit,\n  overrides?: Partial<UIEvent | KeyboardEvent | MouseEvent | TouchEvent | Event>,\n): CustomEvent => {\n  const dot = event.indexOf('.');\n  const [eventName, eventPayload] = dot === -1 ? [event] : [event.slice(0, Math.max(0, dot)), event.slice(dot + 1)];\n  const eventObj = eventCtor(eventName, {\n    bubbles: preventBubble.indexOf(event) === -1,\n    cancelable: true,\n    ...init,\n  });\n  applyPayload(eventObj, eventPayload);\n\n  if (overrides) {\n    mockHelperStub(eventObj, overrides);\n  }\n\n  return eventObj;\n};\n","import { DebugElement } from '@angular/core';\nimport { ComponentFixture } from '@angular/core/testing';\n\nimport { DebugNodeSelector } from '../../common/core.types';\nimport mockHelperFind from '../find/mock-helper.find';\nimport isDebugNode from '../format/is-debug-node';\nimport isFixture from '../format/is-fixture';\nimport isHtmlElement from '../format/is-html-element';\nimport funcGetLastFixture from '../func.get-last-fixture';\nimport mockHelperStub from '../mock-helper.stub';\n\nimport mockHelperEvent from './mock-helper.event';\n\n/**\n * @see https://developer.mozilla.org/de/docs/Web/Events\n */\nconst preventBubble = ['focus', 'blur', 'load', 'unload', 'change', 'reset', 'scroll'];\n\nconst toEventObj = (event: string | UIEvent | KeyboardEvent | MouseEvent | TouchEvent | Event): Event => {\n  return typeof event === 'string'\n    ? mockHelperEvent(event, {\n        bubbles: preventBubble.indexOf(event) === -1,\n        cancelable: true,\n      })\n    : event;\n};\n\nconst getNativeElement = (\n  debugElement: DebugElement | HTMLElement | ComponentFixture<any> | undefined | null,\n): HTMLElement | undefined => {\n  if (isDebugNode(debugElement) || isFixture(debugElement)) {\n    return debugElement.nativeElement;\n  }\n  if (isHtmlElement(debugElement)) {\n    return debugElement;\n  }\n\n  return undefined;\n};\n\nexport default (\n  selector: DebugElement | HTMLElement | ComponentFixture<any> | DebugNodeSelector,\n  eventName: string | UIEvent | KeyboardEvent | MouseEvent | TouchEvent | Event,\n  payload?: Partial<UIEvent | KeyboardEvent | MouseEvent | TouchEvent | Event>,\n) => {\n  const debugElement = isHtmlElement(selector) ? selector : mockHelperFind(funcGetLastFixture(), selector, undefined);\n  const nativeElement = getNativeElement(debugElement);\n\n  if (!nativeElement) {\n    throw new Error(\n      `Cannot trigger ${typeof eventName === 'string' ? eventName : eventName.type} event undefined element`,\n    );\n  }\n\n  // nothing to emit on disabled elements\n  if ((nativeElement as HTMLInputElement).disabled) {\n    return;\n  }\n\n  const event = toEventObj(eventName);\n  if (!event.target) {\n    mockHelperStub(event, {\n      target: nativeElement,\n    });\n  }\n  if (payload) {\n    mockHelperStub(event, payload);\n  }\n  nativeElement.dispatchEvent(event);\n};\n","import { DebugNode } from '@angular/core';\n\nimport coreForm from '../../common/core.form';\nimport coreInjector from '../../common/core.injector';\n\nconst message = [\n  'Cannot find ControlValueAccessor on the element.',\n  'If it is a mock input with [formControlName],',\n  'you need either to avoid mocking ReactiveFormsModule',\n  'or to avoid accessing the control in such a way,',\n  'because this tests ReactiveFormsModule instead of own implementation.',\n].join(' ');\n\nexport default (el: DebugNode): Record<keyof any, any> => {\n  const ngControl = coreForm && coreInjector(coreForm.NgControl, el.injector);\n  const valueAccessor = ngControl?.valueAccessor;\n  if (valueAccessor) {\n    return valueAccessor;\n  }\n\n  const formControlDirective = coreForm && coreInjector(coreForm.FormControlDirective, el.injector);\n  if (formControlDirective?.form) {\n    return formControlDirective.form;\n  }\n\n  const ngModel = coreForm && coreInjector(coreForm.NgModel, el.injector);\n  if (ngModel) {\n    return ngModel;\n  }\n\n  throw new Error(message);\n};\n","import { DebugElement } from '@angular/core';\n\nimport coreForm from '../../common/core.form';\nimport { DebugNodeSelector } from '../../common/core.types';\nimport { isMockControlValueAccessor } from '../../common/func.is-mock-control-value-accessor';\nimport helperDefinePropertyDescriptor from '../../mock-service/helper.define-property-descriptor';\nimport helperExtractMethodsFromPrototype from '../../mock-service/helper.extract-methods-from-prototype';\nimport mockHelperTrigger from '../events/mock-helper.trigger';\nimport mockHelperFind from '../find/mock-helper.find';\nimport funcGetLastFixture from '../func.get-last-fixture';\nimport funcParseFindArgsName from '../func.parse-find-args-name';\nimport mockHelperStubMember from '../mock-helper.stub-member';\n\nimport funcGetVca from './func.get-vca';\n\n// default html behavior\nconst triggerInput = (el: DebugElement, value: any): void => {\n  mockHelperTrigger(el, 'focus');\n\n  const descriptor = Object.getOwnPropertyDescriptor(el.nativeElement, 'value');\n  mockHelperStubMember(el.nativeElement, 'value', value);\n  mockHelperTrigger(el, 'input');\n  mockHelperTrigger(el, 'change');\n  if (descriptor) {\n    helperDefinePropertyDescriptor(el.nativeElement, 'value', descriptor);\n    el.nativeElement.value = value;\n  }\n\n  mockHelperTrigger(el, 'blur');\n};\n\nconst handleKnown = (valueAccessor: any, value: any): boolean => {\n  if (coreForm && valueAccessor instanceof coreForm.AbstractControl) {\n    valueAccessor.setValue(value);\n\n    return true;\n  }\n\n  if (coreForm && valueAccessor instanceof coreForm.NgModel) {\n    valueAccessor.update.emit(value);\n\n    return true;\n  }\n\n  if (isMockControlValueAccessor(valueAccessor.instance)) {\n    valueAccessor.instance.__simulateChange(value);\n\n    return true;\n  }\n\n  return false;\n};\n\nconst hasListener = (el: DebugElement): boolean =>\n  el.listeners.some(listener => listener.name === 'input' || listener.name === 'change');\n\nconst keys = [\n  'onChange',\n  'onChangeCallback',\n  'onChangeCb',\n  'onChangeClb',\n  'onChangeFn',\n\n  '_onChange',\n  '_onChangeCallback',\n  '_onChangeCb',\n  '_onChangeClb',\n  '_onChangeFn',\n\n  'changeFn',\n  '_changeFn',\n\n  'onModelChange',\n\n  'cvaOnChange',\n  'cvaOnChangeCallback',\n  'cvaOnChangeCb',\n  'cvaOnChangeClb',\n  'cvaOnChangeFn',\n\n  '_cvaOnChange',\n  '_cvaOnChangeCallback',\n  '_cvaOnChangeCb',\n  '_cvaOnChangeClb',\n  '_cvaOnChangeFn',\n];\n\nexport default (selector: DebugNodeSelector, value: any, methodName?: string): void => {\n  const el = mockHelperFind(funcGetLastFixture(), selector, undefined);\n  if (!el) {\n    throw new Error(`Cannot find an element via ngMocks.change(${funcParseFindArgsName(selector)})`);\n  }\n\n  const valueAccessor = funcGetVca(el);\n  if (handleKnown(valueAccessor, value) || hasListener(el)) {\n    triggerInput(el, value);\n\n    return;\n  }\n\n  for (const key of methodName ? [methodName] : keys) {\n    if (typeof valueAccessor[key] === 'function') {\n      valueAccessor.writeValue(value);\n      valueAccessor[key](value);\n\n      return;\n    }\n  }\n\n  const methods = helperExtractMethodsFromPrototype(valueAccessor);\n  throw new Error(\n    [\n      'Unsupported type of ControlValueAccessor,',\n      `please ensure it has '${methodName || 'onChange'}' method.`,\n      `If it is a 3rd-party library, please provide the correct name of the method in the 'methodName' parameter.`,\n      'Possible Names: ' + methods.join(', ') + '.',\n    ].join(' '),\n  );\n};\n","import { DebugElement } from '@angular/core';\n\nimport coreForm from '../../common/core.form';\nimport { DebugNodeSelector } from '../../common/core.types';\nimport { isMockControlValueAccessor } from '../../common/func.is-mock-control-value-accessor';\nimport helperExtractMethodsFromPrototype from '../../mock-service/helper.extract-methods-from-prototype';\nimport mockHelperTrigger from '../events/mock-helper.trigger';\nimport mockHelperFind from '../find/mock-helper.find';\nimport funcGetLastFixture from '../func.get-last-fixture';\nimport funcParseFindArgsName from '../func.parse-find-args-name';\n\nimport funcGetVca from './func.get-vca';\n\n// default html behavior\nconst triggerTouch = (el: DebugElement): void => {\n  mockHelperTrigger(el, 'focus');\n  mockHelperTrigger(el, 'blur');\n};\n\nconst handleKnown = (valueAccessor: any): boolean => {\n  if (coreForm && valueAccessor instanceof coreForm.AbstractControl) {\n    valueAccessor.markAsTouched();\n\n    return true;\n  }\n\n  if (isMockControlValueAccessor(valueAccessor.instance)) {\n    valueAccessor.instance.__simulateTouch();\n\n    return true;\n  }\n\n  return false;\n};\n\nconst hasListener = (el: DebugElement): boolean =>\n  el.listeners.some(listener => listener.name === 'focus' || listener.name === 'blur');\n\nconst keys = [\n  'onTouched',\n  'onTouchedCallback',\n  'onTouchedCb',\n  'onTouchedClb',\n  'onTouchedFn',\n\n  '_onTouched',\n  '_onTouchedCallback',\n  '_onTouchedCb',\n  '_onTouchedClb',\n  '_onTouchedFn',\n\n  'markAsTouched',\n  '_markAsTouched',\n\n  'onModelTouched',\n\n  'cvaOnTouch',\n  'cvaOnTouchCallback',\n  'cvaOnTouchCb',\n  'cvaOnTouchClb',\n  'cvaOnTouchFn',\n\n  '_cvaOnTouch',\n  '_cvaOnTouchCallback',\n  '_cvaOnTouchCb',\n  '_cvaOnTouchClb',\n  '_cvaOnTouchFn',\n];\n\nexport default (sel: DebugElement | DebugNodeSelector, methodName?: string): void => {\n  const el = mockHelperFind(funcGetLastFixture(), sel, undefined);\n  if (!el) {\n    throw new Error(`Cannot find an element via ngMocks.touch(${funcParseFindArgsName(sel)})`);\n  }\n\n  const valueAccessor = funcGetVca(el);\n  if (handleKnown(valueAccessor) || hasListener(el)) {\n    triggerTouch(el);\n\n    return;\n  }\n\n  for (const key of methodName ? [methodName] : keys) {\n    if (typeof valueAccessor[key] === 'function') {\n      valueAccessor[key]();\n\n      return;\n    }\n  }\n\n  const methods = helperExtractMethodsFromPrototype(valueAccessor);\n  throw new Error(\n    [\n      'Unsupported type of ControlValueAccessor,',\n      `please ensure it has '${methodName || 'onTouched'}' method.`,\n      `If it is a 3rd-party library, please provide the correct name of the method in the 'methodName' parameter.`,\n      'Possible Names: ' + methods.join(', ') + '.',\n    ].join(' '),\n  );\n};\n","import { DebugElement } from '@angular/core';\n\nimport isDebugNode from '../format/is-debug-node';\n\nimport funcParseFindArgs from './func.parse-find-args';\nimport funcParseFindTerm from './func.parse-find-term';\n\nexport default (...args: any[]): DebugElement[] => {\n  const [el, sel] = funcParseFindArgs(args);\n  if (isDebugNode(sel)) {\n    return [sel as any];\n  }\n\n  return el?.queryAll(funcParseFindTerm(sel)) || [];\n};\n","import { DebugNode } from '@angular/core';\n\nexport default (node: DebugNode): DebugNode =>\n  node.nativeNode?.nodeName === '#text' && node.parent ? node.parent : node;\n","import { DebugNode } from '@angular/core';\n\nimport { AnyType } from '../common/core.types';\n\nconst detectGatherFlag = (gather: boolean, el: DebugNode | null, node: any): boolean => {\n  // LContainer for structural directives can be a trigger for pipes.\n  if (\n    el &&\n    el.nativeNode &&\n    el.nativeNode.nodeName === '#comment' &&\n    Array.isArray(node) &&\n    node[0] === el.nativeNode\n  ) {\n    return true;\n  }\n\n  // LContainer should stop the scan.\n  if (Array.isArray(node)) {\n    return false;\n  }\n\n  if (!el || !node.nodeName) {\n    return gather;\n  }\n\n  // checking if a commentNode belongs to the current element.\n  // it comes from structural directives.\n  if (node.nodeName === '#comment') {\n    return node === el.nativeNode;\n  }\n\n  // checking if a textNode belongs to the current element.\n  if (node.nodeName === '#text') {\n    return node.parentNode === el.nativeNode;\n  }\n\n  return false;\n};\n\nconst isNotObject = <T>(node: T): boolean => !node || typeof node !== 'object';\n\nconst shouldBeScanned = (scanned: any[], node: any): boolean => scanned.indexOf(node) === -1 && Array.isArray(node);\n\nconst scan = <T>(\n  {\n    result,\n    el,\n    nodes,\n    normalize,\n    proto,\n  }: {\n    el: DebugNode | null;\n    nodes: any[];\n    normalize: (item: T) => T;\n    proto: AnyType<T>;\n    result: T[];\n  },\n  gatherDefault: boolean,\n  scanned: any[] = [],\n): void => {\n  scanned.push(nodes);\n  let gather = gatherDefault;\n\n  let nodesLength = nodes.length;\n  if (nodes.length > 1 && nodes[1] && typeof nodes[1] === 'object' && nodes[1].bindingStartIndex) {\n    nodesLength = nodes[1].bindingStartIndex;\n  }\n\n  for (let index = 0; index < nodesLength; index += 1) {\n    const node = normalize(nodes[index]);\n    if (isNotObject(node)) {\n      continue;\n    }\n\n    if (shouldBeScanned(scanned, node) && Array.isArray(node)) {\n      scan({ result, el, nodes: node, normalize, proto }, gather, scanned);\n    }\n\n    gather = detectGatherFlag(gather, el, node);\n    if (!gather) {\n      continue;\n    }\n\n    if (result.indexOf(node) === -1 && node instanceof proto) {\n      result.push(node);\n    }\n  }\n};\n\nexport default (() => scan)();\n","import { DebugNode } from '@angular/core';\n\nimport { AnyType } from '../common/core.types';\n\nimport { Node } from './func.get-from-node';\nimport funcGetFromNodeElement from './func.get-from-node-element';\nimport funcGetFromNodeScan from './func.get-from-node-scan';\n\nconst detectContextByIndex = (rootView: any, index: number) => {\n  if (typeof rootView[1] === 'object' && rootView[20] === index) {\n    return rootView;\n  }\n\n  for (let i = 21; i < rootView.length; i += 1) {\n    const item = rootView[i];\n    if (Array.isArray(item) && typeof item[1] === 'object' && item[20] === index) {\n      return item;\n    }\n  }\n\n  return undefined;\n};\n\nconst detectContext = (node: DebugNode): any => {\n  let current = node;\n  let context = current.nativeNode?.__ngContext__;\n  while (context === undefined && current.parent) {\n    current = current.parent;\n    context = current.nativeNode.__ngContext__;\n  }\n  if (typeof context !== 'number') {\n    return context;\n  }\n  // welcome to A12 and its optimization\n  // https://github.com/angular/angular/pull/41358\n\n  const rootView = (current.injector as any)._lView;\n  if (Array.isArray(rootView)) {\n    return detectContextByIndex(rootView, context);\n  }\n\n  return undefined;\n};\n\nconst contextToNodes = (context: any): any => (Array.isArray(context) ? context : context?.lView);\n\nexport default <T>(result: T[], node: (DebugNode & Node) | null | undefined, proto: AnyType<T>): void => {\n  if (!node || node._debugContext) {\n    return;\n  }\n\n  const el = funcGetFromNodeElement(node);\n  funcGetFromNodeScan(\n    {\n      el,\n      nodes: contextToNodes(detectContext(node)) || [],\n      normalize: item => item,\n      proto,\n      result,\n    },\n    true,\n  );\n};\n","import { DebugNode } from '@angular/core';\n\nimport { AnyType } from '../common/core.types';\n\nimport { Node } from './func.get-from-node';\nimport funcGetFromNodeElement from './func.get-from-node-element';\nimport funcGetFromNodeScan from './func.get-from-node-scan';\n\nconst normalize = (item: any): any => {\n  if (!item || typeof item !== 'object') {\n    return item;\n  }\n\n  for (const key of ['renderElement', 'renderText', 'instance']) {\n    if (item[key]) {\n      return item[key];\n    }\n  }\n\n  return null;\n};\n\nexport default <T>(result: T[], node: (DebugNode & Node) | null | undefined, proto: AnyType<T>): void => {\n  if (!node || !node._debugContext) {\n    return;\n  }\n\n  const el = funcGetFromNodeElement(node);\n\n  funcGetFromNodeScan(\n    {\n      el,\n      nodes: node._debugContext.view.nodes,\n      normalize,\n      proto,\n      result,\n    },\n    true,\n  );\n};\n","import { DebugNode } from '@angular/core';\n\nimport { AnyDeclaration } from '../common/core.types';\nimport { isNgDef } from '../common/func.is-ng-def';\n\nimport funcGetFromNodeInjector from './func.get-from-node-injector';\nimport funcGetFromNodeIvy from './func.get-from-node-ivy';\nimport funcGetFromNodeStandard from './func.get-from-node-standard';\n\nexport interface Node {\n  _debugContext?: {\n    elDef: {\n      nodeIndex: number;\n    };\n    nodeDef: {\n      nodeIndex: number;\n    };\n    nodeIndex: number;\n    view: {\n      nodes: Array<{\n        instance?: any;\n        renderElement?: any;\n        renderText?: any;\n        value?: any;\n      }>;\n    };\n  };\n  parent?: (DebugNode & Node) | null;\n}\n\nexport default <T>(result: T[], node: DebugNode & Node, proto: AnyDeclaration<T>): T[] => {\n  funcGetFromNodeInjector(result, node, proto);\n  if (!isNgDef(proto, 't') && typeof proto !== 'string') {\n    funcGetFromNodeStandard(result, node, proto);\n    funcGetFromNodeIvy(result, node, proto);\n  }\n\n  return result;\n};\n","import { DebugNode, Injector } from '@angular/core';\n\nimport coreInjector from '../common/core.injector';\nimport { AnyDeclaration } from '../common/core.types';\nimport { isNgDef } from '../common/func.is-ng-def';\n\nimport { Node } from './func.get-from-node';\n\nconst getParentWithInjector = (node: (DebugNode & Node) | null): Injector | undefined => {\n  let parent: DebugNode | null = node;\n  while (parent?.injector.constructor.name === 'NullInjector') {\n    parent = parent.parent;\n  }\n\n  if (parent) {\n    return parent.injector;\n  }\n\n  return undefined;\n};\n\nexport default <T>(result: T[], node: DebugNode & Node, proto: AnyDeclaration<T>): void => {\n  if (!node.injector || node.injector.constructor.name === 'NullInjector') {\n    return;\n  }\n\n  const parentInjector = getParentWithInjector(node.parent);\n  const parentInstance = parentInjector ? coreInjector(proto, parentInjector) : undefined;\n  const instance = coreInjector(proto, node.injector);\n  // a way to avoid inherited injections\n  if (parentInstance === instance) {\n    return;\n  }\n\n  if (isNgDef(proto, 't') && instance !== undefined) {\n    result.push(instance);\n  } else if (instance !== undefined && result.indexOf(instance) === -1) {\n    result.push(instance);\n  }\n};\n","import { isNgDef } from '../../common/func.is-ng-def';\n\nexport default (value: any): boolean => {\n  return typeof value === 'function' || isNgDef(value, 't');\n};\n","import { getInjection } from '../../common/core.helpers';\nimport { Type } from '../../common/core.types';\nimport { getSourceOfMock } from '../../common/func.get-source-of-mock';\nimport { isNgDef } from '../../common/func.is-ng-def';\nimport mockHelperCrawl from '../crawl/mock-helper.crawl';\nimport mockHelperFind from '../find/mock-helper.find';\nimport funcGetFromNode from '../func.get-from-node';\nimport funcGetLastFixture from '../func.get-last-fixture';\nimport funcParseFindArgs from '../func.parse-find-args';\nimport funcParseFindArgsName from '../func.parse-find-args-name';\n\nimport funcIsValidFindInstanceSelector from './func.is-valid-find-instance-selector';\n\nconst defaultNotFoundValue = {}; // simulating Symbol\n\nexport default <T>(...args: any[]): T => {\n  const [el, sel, notFoundValue] = funcParseFindArgs(args, funcIsValidFindInstanceSelector, defaultNotFoundValue);\n  if (typeof sel !== 'function' && !isNgDef(sel, 't') && typeof sel !== 'string') {\n    throw new Error('Only classes or tokens are accepted');\n  }\n\n  const declaration: Type<T> = getSourceOfMock(sel);\n  const result: T[] = [];\n  const fixture = funcGetLastFixture();\n  if (fixture) {\n    mockHelperCrawl(\n      mockHelperFind(fixture, el, undefined),\n      (node, parent) => {\n        funcGetFromNode(result, node, declaration);\n        if (result.length === 0 && parent && parent.nativeNode.nodeName === '#comment') {\n          funcGetFromNode(result, parent, declaration);\n        }\n\n        return result.length > 0;\n      },\n      true,\n    );\n  } else {\n    try {\n      result.push(getInjection(declaration));\n    } catch {\n      // nothing to do\n    }\n  }\n\n  if (result.length > 0) {\n    return result[0];\n  }\n  if (notFoundValue !== defaultNotFoundValue) {\n    return notFoundValue;\n  }\n  throw new Error(`Cannot find an instance via ngMocks.findInstance(${funcParseFindArgsName(sel)})`);\n};\n","import nestedCheckChildren from '../crawl/nested-check-children';\n\nimport handleArray from './handle-array';\nimport isDebugNode from './is-debug-node';\nimport isFixture from './is-fixture';\nimport { FORMAT_SET, FORMAT_SINGLE } from './types';\n\nexport default (handlePrimitives: any) =>\n  (html: any, outer = false) => {\n    const format = (value: Text | Comment | FORMAT_SINGLE | FORMAT_SET, innerOuter = false): any => {\n      if (Array.isArray(value)) {\n        return handleArray(format, value);\n      }\n      if (isFixture(value)) {\n        return format(value.debugElement, outer);\n      }\n      const result = handlePrimitives(format, value, innerOuter);\n      if (result !== undefined) {\n        return result;\n      }\n\n      if (isDebugNode(value) && value.nativeNode.nodeName === '#comment') {\n        return format(nestedCheckChildren(value), true);\n      }\n\n      return isDebugNode(value) ? format(value.nativeNode, innerOuter) : '';\n    };\n\n    return Array.isArray(html) ? html.map((item: any) => format(item, outer)) : format(html, outer);\n  };\n","export default (format: any, html: any) => {\n  return format((html as any[]).map(item => format(item, true)).join(''));\n};\n","export default (html: Text): string => html.nodeValue ?? html.textContent ?? html.wholeText;\n","export default (value: any): value is Text => {\n  return !!value && typeof value === 'object' && value.nodeName === '#text';\n};\n","import formatHandler from './format-handler';\nimport handleText from './handle-text';\nimport isHtmlElement from './is-html-element';\nimport isText from './is-text';\n\nconst normalizeValue = (html: string | undefined): string =>\n  html\n    ? html\n        .replace(new RegExp('\\\\s+', 'mg'), ' ')\n        .replace(new RegExp('<!--(.|\\\\n|\\\\r)*?-->|<!--(.|\\\\n|\\\\r)*', 'mg'), '')\n        .replace(new RegExp('\\\\s+', 'mg'), ' ')\n        .replace(new RegExp('>\\\\s+<', 'mg'), '><')\n        .replace(new RegExp('\"\\\\s+>', 'mg'), '\">')\n    : '';\n\nconst normalizeText = (text: string): string =>\n  text\n    .replace(new RegExp('&', 'mg'), '&amp;')\n    .replace(new RegExp('\"', 'mg'), '&quot;')\n    .replace(new RegExp('<', 'mg'), '&lt;')\n    .replace(new RegExp('>', 'mg'), '&gt;')\n    .replace(new RegExp(\"'\", 'mg'), '&#39;');\n\nconst getElementValue = (element: HTMLElement, outer: boolean): string =>\n  outer ? element.outerHTML : element.innerHTML;\n\nconst handlePrimitives = (format: any, value: any, outer: boolean): string | undefined => {\n  if (typeof value === 'string' || value === undefined) {\n    const result = normalizeValue(value);\n\n    return outer ? result : result.trim();\n  }\n  if (isHtmlElement(value)) {\n    return format(getElementValue(value, outer));\n  }\n  if (isText(value)) {\n    return handlePrimitives(format, normalizeText(handleText(value)), outer);\n  }\n\n  return undefined;\n};\n\nexport default (() => formatHandler(handlePrimitives))();\n","import formatHandler from './format-handler';\nimport handleText from './handle-text';\nimport isHtmlElement from './is-html-element';\nimport isText from './is-text';\n\nconst normalizeValue = (html: string | undefined): string => (html ? html.replace(new RegExp('\\\\s+', 'mg'), ' ') : '');\n\nconst getElementValue = (element: HTMLElement, outer: boolean): string => {\n  const value = element.textContent ?? '';\n\n  return outer ? value : value.trim();\n};\n\nconst handlePrimitives = (format: any, value: any, outer: boolean): string | undefined => {\n  if (typeof value === 'string' || value === undefined) {\n    const result = normalizeValue(value);\n\n    return outer ? result : result.trim();\n  }\n  if (isHtmlElement(value)) {\n    return format(getElementValue(value, outer));\n  }\n  if (isText(value)) {\n    return handlePrimitives(format, handleText(value), outer);\n  }\n\n  return undefined;\n};\n\nexport default (() => formatHandler(handlePrimitives))();\n","import { registerMockFunction } from '../mock-service/helper.mock-service';\nimport { CustomMockFunction } from '../mock-service/types';\n\ntype param = 'jasmine' | 'jest' | 'default' | 'reset' | CustomMockFunction;\n\nconst calls: param[] = [];\n\nexport default (type: param) => {\n  if (type === 'reset') {\n    calls.pop();\n  } else {\n    calls.push(type);\n  }\n  const action: param | undefined = calls[calls.length - 1];\n\n  if (action === 'jasmine') {\n    return registerMockFunction(mockName => jasmine.createSpy(mockName));\n  }\n  // istanbul ignore if: because it is run with jasmine\n  if (action === 'jest') {\n    return registerMockFunction(name => jest.fn().mockName(name));\n  }\n  if (!action || action === 'default' || action === 'reset') {\n    return registerMockFunction();\n  }\n\n  return registerMockFunction(action);\n};\n","/* eslint-disable no-console */\n\nimport coreDefineProperty from '../common/core.define-property';\n\n// Thanks Ivy, it does not throw an error, and we have to use injector.\nexport default (defaultMethods: Array<keyof typeof console>, factory: (name: string) => any) =>\n  (...methods: Array<keyof typeof console>): void => {\n    const backup: Array<keyof typeof console> = [];\n\n    beforeEach(() => {\n      for (const method of defaultMethods) {\n        if (methods.indexOf(method) === -1) {\n          methods.push(method);\n        }\n      }\n\n      for (const method of methods) {\n        coreDefineProperty(console, `__ngMocksBackup_${method}`, (console as any)[`__ngMocksBackup_${method}`] || []);\n        (console as any)[`__ngMocksBackup_${method}`].push(console[method]);\n        backup.push(method);\n        console[method] = factory(method) as never;\n      }\n    });\n\n    afterEach(() => {\n      for (const method of backup) {\n        console[method] = (console as any)[`__ngMocksBackup_${method}`].pop();\n      }\n      backup.splice(0, backup.length);\n    });\n  };\n","import helperMockService from '../mock-service/helper.mock-service';\n\nimport mockHelperConsole from './mock-helper.console';\n\nconst factory = (propName: string) => helperMockService.mockFunction(`console.${propName}`);\n\n// Thanks Ivy, it does not throw an error, and we have to use injector.\nexport default mockHelperConsole(['log'], factory);\n","import coreDefineProperty from '../common/core.define-property';\n\nimport mockHelperConsole from './mock-helper.console';\n\nconst factory =\n  (propName: string) =>\n  (...args: any[]) => {\n    const error = new Error(args.join(' '));\n    coreDefineProperty(error, 'ngMocksConsoleCatch', propName);\n    throw error;\n  };\n\n// Thanks Ivy, it does not throw an error, and we have to use injector.\nexport default mockHelperConsole(['warn', 'error'], factory);\n","import { Injector } from '@angular/core';\n\nimport { flatten } from '../common/core.helpers';\nimport { AnyDeclaration } from '../common/core.types';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nexport default <T>(\n  def: AnyDeclaration<T> | string | Array<AnyDeclaration<T> | string>,\n  callback?: (instance: undefined | T, injector: Injector) => void | Partial<T>,\n): void => {\n  const map = ngMocksUniverse.getOverrides();\n  for (const item of flatten(def)) {\n    if (callback) {\n      const set: Set<any> = map.has(item) ? map.get(item) : new Set();\n      set.add(callback);\n      map.set(item, set);\n    } else {\n      map.delete(item);\n    }\n  }\n};\n","import { getTestBed, TestBed, TestBedStatic, TestModuleMetadata } from '@angular/core/testing';\n\nimport coreDefineProperty from '../common/core.define-property';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nconst hooks: {\n  after: Array<\n    (original: TestBedStatic['resetTestingModule'], instance: TestBedStatic) => TestBedStatic['resetTestingModule']\n  >;\n  before: Array<\n    (\n      original: TestBedStatic['configureTestingModule'],\n      instance: TestBedStatic,\n    ) => TestBedStatic['configureTestingModule']\n  >;\n} = ngMocksUniverse.global.get('faster-hooks') || {\n  after: [],\n  before: [],\n};\nngMocksUniverse.global.set('faster-hooks', hooks);\n\nconst configureTestingModule =\n  (\n    original: TestBedStatic['configureTestingModule'],\n    instance: TestBedStatic,\n  ): TestBedStatic['configureTestingModule'] =>\n  (moduleDef: TestModuleMetadata) => {\n    if ((TestBed as any).ngMocksFasterLock) {\n      return original.call(instance, moduleDef);\n    }\n\n    ngMocksUniverse.global.set('bullet:customized', true);\n\n    let final = original;\n    for (const callback of hooks.before) {\n      final = callback(final, instance);\n    }\n\n    try {\n      coreDefineProperty(TestBed, 'ngMocksFasterLock', true);\n\n      return final.call(instance, moduleDef);\n    } finally {\n      coreDefineProperty(TestBed, 'ngMocksFasterLock', undefined);\n    }\n  };\n\nconst resetTestingModule =\n  (original: TestBedStatic['resetTestingModule'], instance: TestBedStatic): TestBedStatic['resetTestingModule'] =>\n  () => {\n    if ((TestBed as any).ngMocksFasterLock) {\n      return original.call(instance);\n    }\n\n    if (ngMocksUniverse.global.has('bullet')) {\n      if (ngMocksUniverse.global.has('bullet:customized')) {\n        ngMocksUniverse.global.set('bullet:reset', true);\n      }\n\n      return instance;\n    }\n    ngMocksUniverse.global.delete('bullet:customized');\n    ngMocksUniverse.global.delete('bullet:reset');\n\n    let final = original;\n    for (const callback of hooks.after) {\n      final = callback(final, instance);\n    }\n\n    try {\n      coreDefineProperty(TestBed, 'ngMocksFasterLock', true);\n\n      return final.call(instance);\n    } finally {\n      coreDefineProperty(TestBed, 'ngMocksFasterLock', undefined);\n    }\n  };\n\nexport default () => {\n  if (!(TestBed as any).ngMocksFasterInstalled) {\n    TestBed.configureTestingModule = configureTestingModule(TestBed.configureTestingModule as never, TestBed as never);\n    TestBed.resetTestingModule = resetTestingModule(TestBed.resetTestingModule as never, TestBed as never);\n    coreDefineProperty(TestBed, 'ngMocksFasterInstalled', true);\n  }\n\n  const testBed = getTestBed();\n  if (!(testBed as any).ngMocksFasterInstalled) {\n    testBed.configureTestingModule = configureTestingModule(testBed.configureTestingModule as never, testBed as never);\n    testBed.resetTestingModule = resetTestingModule(testBed.resetTestingModule as never, testBed as never);\n    coreDefineProperty(testBed, 'ngMocksFasterInstalled', true);\n  }\n\n  return hooks;\n};\n","import { getTestBed } from '@angular/core/testing';\n\nexport default (): void => {\n  const testBed: any = getTestBed();\n  testBed._instantiated = false;\n  testBed._moduleFactory = undefined;\n  testBed._testModuleRef = null;\n};\n","import { ComponentFixture, getTestBed, TestBed } from '@angular/core/testing';\n\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nimport mockHelperFasterInstall from './mock-helper.faster-install';\nimport mockHelperFlushTestBed from './mock-helper.flush-test-bed';\n\nconst resetFixtures = (id: never) => {\n  const activeFixtures: Array<ComponentFixture<any> & { ngMocksStackId?: any }> =\n    (getTestBed() as any)._activeFixtures || /* istanbul ignore next */ [];\n\n  let active = 0;\n  for (let i = activeFixtures.length - 1; i >= 0; i -= 1) {\n    if (!activeFixtures[i].ngMocksStackId || activeFixtures[i].ngMocksStackId === id) {\n      activeFixtures[i].ngMocksStackId = undefined;\n      activeFixtures[i].destroy();\n      activeFixtures.splice(i, 1);\n    } else {\n      active += 1;\n    }\n  }\n  if (active === 0) {\n    mockHelperFlushTestBed();\n  }\n};\n\nconst idAdd = (id: any) => {\n  const bulletStack: any[] = ngMocksUniverse.global.get('bullet:stack') ?? [];\n  bulletStack.push(id);\n  ngMocksUniverse.global.set('bullet:stack', bulletStack);\n  ngMocksUniverse.global.set('bullet:stack:id', id);\n};\nconst idRemove = (id: any) => {\n  const bulletStack: any[] = ngMocksUniverse.global.get('bullet:stack');\n  bulletStack.splice(bulletStack.indexOf(id), 1);\n  if (bulletStack.length > 0) {\n    ngMocksUniverse.global.set('bullet:stack:id', bulletStack[bulletStack.length - 1]);\n  } else {\n    ngMocksUniverse.global.delete('bullet:stack:id');\n  }\n\n  resetFixtures(id as never);\n};\n\nexport default () => {\n  mockHelperFasterInstall();\n\n  const idAll = {};\n  const idEach = {};\n\n  beforeAll(() => {\n    if (ngMocksUniverse.global.has('bullet:customized')) {\n      TestBed.resetTestingModule();\n    }\n    ngMocksUniverse.global.set('bullet', true);\n    idAdd(idAll);\n  });\n\n  beforeEach(() => {\n    idAdd(idEach);\n  });\n  afterEach(() => {\n    idRemove(idEach);\n  });\n\n  afterAll(() => {\n    idRemove(idAll);\n    ngMocksUniverse.global.delete('bullet');\n    if (ngMocksUniverse.global.has('bullet:reset')) {\n      TestBed.resetTestingModule();\n    }\n  });\n};\n","import { DebugElement } from '@angular/core';\nimport { TestBed } from '@angular/core/testing';\n\nimport { Type } from '../common/core.types';\nimport funcGetName from '../common/func.get-name';\nimport { getSourceOfMock } from '../common/func.get-source-of-mock';\nimport { MockedDebugElement } from '../mock-render/types';\n\nimport nestedCheckParent from './crawl/nested-check-parent';\nimport mockHelperFind from './find/mock-helper.find';\nimport funcGetFromNode from './func.get-from-node';\nimport funcGetLastFixture from './func.get-last-fixture';\nimport funcParseFindArgsName from './func.parse-find-args-name';\n\nconst defaultNotFoundValue = {}; // simulating Symbol\n\nconst parseArgs = <T>(\n  args: any[],\n): {\n  el: MockedDebugElement | null | undefined;\n  notFoundValue: any;\n  sel: Type<T>;\n} => ({\n  el: args[0],\n  notFoundValue: args.length === 3 ? args[2] : defaultNotFoundValue,\n  sel: args[1],\n});\n\nexport default <T>(...args: any[]) => {\n  if (args.length === 1) {\n    try {\n      return TestBed.inject ? TestBed.inject(args[0]) : /* istanbul ignore next */ TestBed.get(args[0]);\n    } catch {\n      throw new Error(`Cannot find an instance via ngMocks.get(${funcParseFindArgsName(args[0])})`);\n    }\n  }\n\n  const { el, sel, notFoundValue } = parseArgs<T>(args);\n  const root: DebugElement | undefined = mockHelperFind(funcGetLastFixture(), el, undefined);\n  const source = getSourceOfMock(sel);\n\n  // Looking in the root.\n  if (root) {\n    const result = funcGetFromNode([], root, source);\n    if (result.length > 0) {\n      return result[0];\n    }\n  }\n\n  // Looking for a related structural directive.\n  if (root) {\n    const parent = nestedCheckParent(root, undefined);\n    if (parent && parent.nativeNode.nodeName === '#comment') {\n      const result = funcGetFromNode([], parent, source);\n      if (result.length > 0) {\n        return result[0];\n      }\n    }\n  }\n\n  if (notFoundValue !== defaultNotFoundValue) {\n    return notFoundValue;\n  }\n  throw new Error(`Cannot find ${funcGetName(sel)} instance via ngMocks.get`);\n};\n","import collectDeclarations from '../resolve/collect-declarations';\n\nimport coreConfig from './core.config';\nimport { flatten } from './core.helpers';\nimport { AnyDeclaration } from './core.types';\nimport funcGetType from './func.get-type';\n\nconst iterator = <T = any>(\n  source: AnyDeclaration<T>,\n  callback: (source: AnyDeclaration<T>) => void,\n  scanned = new Set<any>(),\n): void => {\n  const meta = collectDeclarations(source);\n  for (const decorator of meta.decorators) {\n    for (const key of coreConfig.dependencies) {\n      if (!meta[decorator][key]) {\n        continue;\n      }\n      for (const def of flatten(meta[decorator][key])) {\n        const declaration = funcGetType(def);\n        if (!declaration || scanned.has(declaration)) {\n          continue;\n        }\n        scanned.add(declaration);\n        callback(declaration);\n        iterator(declaration, callback, scanned);\n      }\n    }\n  }\n};\n\nexport default iterator;\n","import ngMocksUniverse from '../common/ng-mocks-universe';\n\nexport default () => {\n  ngMocksUniverse.cacheDeclarations.clear();\n  ngMocksUniverse.config.get('ngMocksDepsSkip')?.clear();\n};\n","import { AnyDeclaration } from '../common/core.types';\nimport funcIterateDeclaration from '../common/func.iterate-declaration';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nimport funcGlobalPrepare from './func.global-prepare';\n\nconst action = (source: AnyDeclaration<any>): void => {\n  ngMocksUniverse.getDefaults().set(source, ['exclude']);\n};\nexport default (source: AnyDeclaration<any>, recursively = false): void => {\n  funcGlobalPrepare();\n  action(source);\n\n  if (recursively) {\n    funcIterateDeclaration(source, action);\n  }\n};\n","import { AnyDeclaration } from '../common/core.types';\nimport funcIterateDeclaration from '../common/func.iterate-declaration';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nimport funcGlobalPrepare from './func.global-prepare';\n\nconst action = (source: AnyDeclaration<any>): void => {\n  ngMocksUniverse.getDefaults().set(source, ['keep']);\n};\nexport default (source: AnyDeclaration<any>, recursively = false): void => {\n  funcGlobalPrepare();\n  action(source);\n\n  if (recursively) {\n    funcIterateDeclaration(source, action);\n  }\n};\n","import { AnyDeclaration } from '../common/core.types';\nimport funcIterateDeclaration from '../common/func.iterate-declaration';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nimport funcGlobalPrepare from './func.global-prepare';\n\nconst action = (source: AnyDeclaration<any>): void => {\n  ngMocksUniverse.getDefaults().set(source, ['mock']);\n};\nexport default (source: AnyDeclaration<any>, recursively = false): void => {\n  funcGlobalPrepare();\n  action(source);\n\n  if (recursively) {\n    funcIterateDeclaration(source, action);\n  }\n};\n","import { AnyDeclaration } from '../common/core.types';\nimport funcIterateDeclaration from '../common/func.iterate-declaration';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nimport funcGlobalPrepare from './func.global-prepare';\nimport mockHelperDefaultMock from './mock-helper.default-mock';\n\nconst action = (source: AnyDeclaration<any>): void => {\n  ngMocksUniverse.getDefaults().delete(source);\n  mockHelperDefaultMock(source);\n};\n\nexport default (source: AnyDeclaration<any>, recursively = false): void => {\n  funcGlobalPrepare();\n  action(source);\n\n  if (recursively) {\n    funcIterateDeclaration(source, action);\n  }\n};\n","import { TestModuleMetadata } from '@angular/core/testing';\n\nimport CoreDefStack from '../common/core.def-stack';\nimport { flatten, mapKeys, mapValues } from '../common/core.helpers';\nimport coreReflectModuleResolve from '../common/core.reflect.module-resolve';\nimport funcGetType from '../common/func.get-type';\nimport { isNgDef } from '../common/func.is-ng-def';\nimport { isNgInjectionToken } from '../common/func.is-ng-injection-token';\nimport { isNgModuleDefWithProviders } from '../common/func.is-ng-module-def-with-providers';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\nimport { MockComponent } from '../mock-component/mock-component';\nimport { MockDirective } from '../mock-directive/mock-directive';\nimport { MockModule } from '../mock-module/mock-module';\nimport { MockPipe } from '../mock-pipe/mock-pipe';\nimport mockProvider from '../mock-service/mock-provider';\n\ntype Data = {\n  declarations: any[];\n  exclude: Set<any>;\n  imports: any[];\n  keep: Set<any>;\n  mock: Set<any>;\n  optional: Map<any, any>;\n  providers: any[];\n  skip: Set<any>;\n};\n\nconst skipDef = (def: any, skip: Set<any>, exclude: Set<any>): boolean => {\n  if (skip.has(def)) {\n    return true;\n  }\n  skip.add(def);\n\n  return exclude.has(def);\n};\n\nconst createMetaHandler = (\n  optional: Map<any, any>,\n  proto: any,\n  imports: any[],\n  declarations: any[],\n  providers: any[],\n): void => {\n  const def = optional.get(proto) || proto;\n\n  if (isNgDef(def, 'm')) {\n    imports.push(def);\n  } else if (isNgDef(def, 'c') || isNgDef(def, 'd')) {\n    declarations.push(def);\n  } else if (isNgDef(def, 'p')) {\n    declarations.push(def);\n    providers.push(def);\n  } else if (!isNgInjectionToken(def)) {\n    providers.push(def);\n  }\n};\n\nconst createMeta = ({ keep, skip, optional, exclude, imports, declarations, providers }: Data): TestModuleMetadata => {\n  for (const proto of keep) {\n    if (skip.has(proto) || exclude.has(proto) || optional.has(proto)) {\n      continue;\n    }\n    createMetaHandler(optional, proto, imports, declarations, providers);\n  }\n\n  return { declarations, imports, providers };\n};\n\nconst typeMap: Array<[any, string]> = [\n  ['m', 'module'],\n  ['c', 'component'],\n  ['d', 'directive'],\n  ['p', 'pipe'],\n];\n\nconst getType = (def: any, keep: Set<any>): string => {\n  if (isNgModuleDefWithProviders(def)) {\n    return 'module-with-providers';\n  }\n  for (const [flag, value] of typeMap) {\n    if (isNgDef(def, flag)) {\n      return flag === 'm' && keep.has(def) ? `${value}-keep` : value;\n    }\n  }\n\n  return '';\n};\n\nconst handleModuleWithProviders = (data: Data, def: any): void => {\n  if (data.skip.has(def.ngModule)) {\n    return;\n  }\n  data.skip.add(def.ngModule);\n  if (data.exclude.has(def.ngModule)) {\n    return;\n  }\n\n  data.imports.push(data.keep.has(def.ngModule) ? def : MockModule(def));\n};\n\nconst handleDeclaration = (data: Data, def: any, callback: any, bucket: any[]): void => {\n  if (skipDef(def, data.skip, data.exclude)) {\n    return;\n  }\n\n  bucket.push(data.keep.has(def) ? def : callback(def));\n};\n\nconst handleDestructuring = (data: Data, def: any, callback: any): void => {\n  if (skipDef(def, data.skip, data.exclude)) {\n    return;\n  }\n\n  const meta = coreReflectModuleResolve(def);\n  for (const toMock of flatten([meta.declarations, meta.imports])) {\n    callback(data, toMock);\n  }\n  for (const toMock of meta.providers ? flatten(meta.providers) : []) {\n    resolveProvider(data, toMock);\n  }\n};\n\nconst resolveProvider = ({ skip, keep, providers, exclude }: Data, def: any): void => {\n  const provider = funcGetType(def);\n  skip.add(provider);\n  if (exclude.has(provider)) {\n    return;\n  }\n\n  const providerDef = keep.has(provider) ? def : mockProvider(def);\n  if (providerDef) {\n    providers.push(providerDef);\n  }\n};\n\nconst resolveMap: Record<string, any> = {\n  component: MockComponent,\n  directive: MockDirective,\n  pipe: MockPipe,\n};\n\nconst resolveHandler = (data: Data, type: string, def: any, skipDestruction: boolean): void => {\n  if (type === 'module-with-providers') {\n    handleModuleWithProviders(data, def);\n  } else if (type === 'module-keep') {\n    handleDeclaration(data, def, MockModule, data.imports); // MockModule will not be called because the def is kept.\n  } else if (type === 'module' && skipDestruction) {\n    handleDeclaration(data, def, MockModule, data.imports);\n  } else if (type === 'module') {\n    handleDestructuring(data, def, resolve);\n  } else if (resolveMap[type]) {\n    handleDeclaration(data, def, resolveMap[type], data.declarations);\n  } else {\n    resolveProvider(data, def);\n  }\n};\n\nconst resolve = (data: Data, proto: any, skipDestruction = true): void => {\n  if (!proto) {\n    return;\n  }\n\n  const type = getType(proto, data.keep);\n  let def: any;\n\n  // an attempt to replace declarations.\n  if (type !== 'module-with-providers') {\n    const value = data.optional.get(proto);\n    if (value && value !== proto) {\n      def = value;\n      data.keep.add(def);\n    }\n  }\n  if (!def) {\n    def = proto;\n  }\n\n  resolveHandler(data, type, def, skipDestruction);\n};\n\nconst generateDataWithUniverse = (keep: Set<any>, mock: Set<any>, exclude: Set<any>, optional: Map<any, any>): void => {\n  for (const k of mapKeys(ngMocksUniverse.getDefaults())) {\n    const v = ngMocksUniverse.getBuildDeclaration(k);\n    if (keep.has(k) || mock.has(k) || exclude.has(k)) {\n      continue;\n    }\n    optional.set(k, v);\n\n    if (v === null) {\n      exclude.add(k);\n    } else if (v === undefined) {\n      mock.add(k);\n    } else if (k === v) {\n      keep.add(k);\n    }\n  }\n};\n\nconst generateData = (protoKeep: any, protoMock: any, protoExclude: any): Data => {\n  const keep = new Set(flatten(protoKeep || []));\n  const mock = new Set(flatten(protoMock || []));\n  const exclude = new Set(flatten(protoExclude || []));\n  const optional = new Map();\n  generateDataWithUniverse(keep, mock, exclude, optional);\n\n  return {\n    declarations: [],\n    exclude,\n    imports: [],\n    keep,\n    mock,\n    optional,\n    providers: [],\n    skip: new Set(),\n  };\n};\n\nexport default (keep: any, mock: any = null, exclude: any = null): TestModuleMetadata => {\n  const data: Data = generateData(keep, mock, exclude);\n\n  const resolutions = new Map();\n  ngMocksUniverse.config.set('ngMocksDepsResolution', resolutions);\n  for (const mockDef of mapValues(data.keep)) {\n    resolutions.set(mockDef, 'keep');\n  }\n  for (const mockDef of mapValues(data.exclude)) {\n    resolutions.set(mockDef, 'exclude');\n  }\n\n  ngMocksUniverse.config.set('mockNgDefResolver', new CoreDefStack());\n  for (const def of mapValues(data.mock)) {\n    resolutions.set(def, 'mock');\n    if (data.optional.has(def)) {\n      continue;\n    }\n    resolve(data, def, false);\n  }\n  const meta = createMeta(data);\n  ngMocksUniverse.config.delete('mockNgDefResolver');\n  ngMocksUniverse.config.delete('ngMocksDepsResolution');\n\n  return meta;\n};\n","import { DirectiveIo } from '../common/core.types';\nimport funcDirectiveIoParse from '../common/func.directive-io-parse';\nimport { MockedDebugElement } from '../mock-render/types';\n\nimport mockHelperFind from './find/mock-helper.find';\nimport funcGetLastFixture from './func.get-last-fixture';\nimport funcParseProviderTokensDirectives from './func.parse-provider-tokens-directives';\nimport mockHelperGet from './mock-helper.get';\n\nconst defaultNotFoundValue = {}; // simulating Symbol\n\nconst parseArgs = (args: any[]): [MockedDebugElement | null | undefined, string, any] => [\n  args[0],\n  args[1],\n  args.length === 3 ? args[2] : defaultNotFoundValue,\n];\n\nconst attrMatches = (attribute: DirectiveIo, selector: string): string | undefined => {\n  const { name, alias = '' } = funcDirectiveIoParse(attribute);\n\n  if ((!alias && name === selector) || (!!alias && alias === selector)) {\n    return name;\n  }\n\n  return undefined;\n};\n\nconst detectAttribute = (el: MockedDebugElement | null | undefined, attr: 'inputs' | 'outputs', sel: string) => {\n  for (const token of el?.providerTokens || []) {\n    const meta = funcParseProviderTokensDirectives(el, token);\n    if (!meta) {\n      continue;\n    }\n\n    for (const attrDef of meta[attr] || /* istanbul ignore next */ []) {\n      const prop = attrMatches(attrDef, sel);\n      if (prop) {\n        return mockHelperGet(el, token)[prop];\n      }\n    }\n  }\n\n  throw new Error('Not found');\n};\n\nexport default (label: string, attr: 'inputs' | 'outputs', ...args: any[]) => {\n  const [el, sel, notFoundValue] = parseArgs(args);\n\n  try {\n    return detectAttribute(mockHelperFind(funcGetLastFixture(), el, undefined), attr, sel);\n  } catch {\n    // nothing to do\n  }\n  if (notFoundValue !== defaultNotFoundValue) {\n    return notFoundValue;\n  }\n  throw new Error(`Cannot find ${sel} ${label} via ngMocks.${label}`);\n};\n","import { QueryList, TemplateRef, ViewContainerRef } from '@angular/core';\n\nimport funcIsMock from '../../common/func.is-mock';\nimport { MockConfig } from '../../common/mock';\n\nconst getValVcr = (entryPoint: MockConfig): Array<[any, ViewContainerRef]> => {\n  const result: Array<[any, ViewContainerRef]> = [];\n\n  for (const key of entryPoint.__ngMocksConfig.queryScanKeys || /* istanbul ignore next */ []) {\n    const value = (entryPoint as any)[key];\n    const vcr = (entryPoint as any)[`__ngMocksVcr_${key}`];\n\n    const scanValue = value instanceof QueryList ? value.toArray() : [value];\n    const scanVcr = vcr instanceof QueryList ? vcr.toArray() : [vcr];\n\n    for (let index = 0; index < scanValue.length; index += 1) {\n      result.push([scanValue[index], scanVcr[index]]);\n    }\n  }\n\n  return result;\n};\n\nconst handleDirective = (\n  entryPoint: {\n    __template?: TemplateRef<any>;\n    __vcr?: ViewContainerRef;\n  },\n  isExpectedTemplate: (tpl: TemplateRef<any>) => boolean,\n  callback: (vcr: ViewContainerRef, tpl: TemplateRef<any>) => boolean,\n): boolean => {\n  return (\n    !!entryPoint.__template &&\n    !!entryPoint.__vcr &&\n    isExpectedTemplate(entryPoint.__template) &&\n    callback(entryPoint.__vcr, entryPoint.__template)\n  );\n};\n\nconst isRightTemplate = (\n  localVcr: ViewContainerRef | undefined,\n  localValue: any,\n  isExpectedTemplate: (tpl: TemplateRef<any>) => boolean,\n): boolean => {\n  return !!localVcr && localValue instanceof TemplateRef && isExpectedTemplate(localValue);\n};\n\nconst findDeep = (\n  entryPoint: object,\n  isExpectedTemplate: (tpl: TemplateRef<any>) => boolean,\n  callback: (vcr: ViewContainerRef, tpl: TemplateRef<any>) => boolean,\n): boolean => {\n  if (!funcIsMock(entryPoint)) {\n    throw new Error('Only instances of mock declarations are accepted');\n  }\n\n  // structural directive\n  if (handleDirective(entryPoint, isExpectedTemplate, callback)) {\n    return true;\n  }\n\n  for (const [localValue, localVcr] of getValVcr(entryPoint)) {\n    if (funcIsMock(localValue) && findDeep(localValue, isExpectedTemplate, callback)) {\n      return true;\n    }\n    if (isRightTemplate(localVcr, localValue, isExpectedTemplate)) {\n      return callback(localVcr, localValue);\n    }\n  }\n\n  return false;\n};\n\nexport default ((): typeof findDeep => findDeep)();\n","import { TemplateRef } from '@angular/core';\n\nimport coreInjector from '../../common/core.injector';\nimport funcIsMock from '../../common/func.is-mock';\n\nexport default (param: any): TemplateRef<any> => {\n  if (param instanceof TemplateRef) {\n    return param;\n  }\n  if (funcIsMock(param) && param.__template) {\n    return param.__template;\n  }\n\n  const injector = param?.nativeNode && param.injector;\n  if (injector) {\n    const template = coreInjector(TemplateRef, injector);\n\n    if (template) {\n      return template;\n    }\n  }\n\n  const error = new Error(\n    'Unknown template has been passed, only TemplateRef or a mock structural directive are supported',\n  );\n  (error as any).param = param;\n\n  throw error;\n};\n","import { Type } from '../../common/core.types';\nimport crawlByAttribute from '../crawl/crawl-by-attribute';\nimport crawlByAttributeValue from '../crawl/crawl-by-attribute-value';\nimport crawlByDeclaration from '../crawl/crawl-by-declaration';\nimport crawlById from '../crawl/crawl-by-id';\n\nexport default (selector: string | Type<any> | [string] | [string, any] | any) => {\n  if (typeof selector === 'string') {\n    return crawlById(selector);\n  }\n  if (Array.isArray(selector) && selector.length === 1 && typeof selector[0] === 'string') {\n    return crawlByAttribute(selector[0]);\n  }\n  if (Array.isArray(selector) && selector.length === 2 && typeof selector[0] === 'string') {\n    return crawlByAttributeValue(selector[0], selector[1]);\n  }\n  if (typeof selector === 'function') {\n    return crawlByDeclaration(selector);\n  }\n\n  throw new Error('Unknown selector');\n};\n","import { TemplateRef } from '@angular/core';\n\nimport coreInjector from '../../common/core.injector';\nimport { MockedDebugNode } from '../../mock-render/types';\nimport detectTextNode from '../crawl/detect-text-node';\n\nexport default (\n    result: Array<TemplateRef<any>>,\n    detector: (node: MockedDebugNode) => boolean,\n    limit = 0,\n  ): ((node: MockedDebugNode) => boolean) =>\n  node => {\n    try {\n      const instance = !detectTextNode(node) && detector(node) ? coreInjector(TemplateRef, node.injector) : undefined;\n      if (instance) {\n        result.push(instance);\n      }\n    } catch {\n      // nothing to do\n    }\n\n    return !!limit && result.length === limit;\n  };\n","export default (value: any): boolean => {\n  if (typeof value === 'string') {\n    return true;\n  }\n  if (Array.isArray(value) && typeof value[0] === 'string') {\n    return true;\n  }\n  if (typeof value === 'function') {\n    return true;\n  }\n\n  return false;\n};\n","import { TemplateRef } from '@angular/core';\n\nimport nestedCheck from '../crawl/nested-check';\nimport mockHelperFind from '../find/mock-helper.find';\nimport funcGetLastFixture from '../func.get-last-fixture';\nimport funcParseFindArgs from '../func.parse-find-args';\nimport funcParseFindArgsName from '../func.parse-find-args-name';\n\nimport detectCrawler from './detect-crawler';\nimport detectTemplateRef from './detect-template-ref';\nimport funcIsValidTemplateRefSelector from './func.is-valid-template-ref-selector';\n\nconst defaultNotFoundValue = {}; // simulating Symbol\n\nexport default (...args: any[]) => {\n  const [el, sel, notFoundValue] = funcParseFindArgs(args, funcIsValidTemplateRefSelector, defaultNotFoundValue);\n\n  const result: Array<TemplateRef<any>> = [];\n  const detector = detectCrawler(sel);\n  nestedCheck(mockHelperFind(funcGetLastFixture(), el, undefined), undefined, detectTemplateRef(result, detector, 1));\n  if (result.length > 0) {\n    return result[0];\n  }\n  if (notFoundValue !== defaultNotFoundValue) {\n    return notFoundValue;\n  }\n\n  throw new Error(`Cannot find a TemplateRef via ngMocks.findTemplateRef(${funcParseFindArgsName(sel)})`);\n};\n","import coreConfig from '../common/core.config';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nimport mockHelperCrawl from './crawl/mock-helper.crawl';\nimport mockHelperReveal from './crawl/mock-helper.reveal';\nimport mockHelperRevealAll from './crawl/mock-helper.reveal-all';\nimport mockHelperChange from './cva/mock-helper.change';\nimport mockHelperTouch from './cva/mock-helper.touch';\nimport mockHelperClick from './events/mock-helper.click';\nimport mockHelperEvent from './events/mock-helper.event';\nimport mockHelperTrigger from './events/mock-helper.trigger';\nimport mockHelperFind from './find/mock-helper.find';\nimport mockHelperFindAll from './find/mock-helper.find-all';\nimport mockHelperFindInstance from './find-instance/mock-helper.find-instance';\nimport mockHelperFindInstances from './find-instance/mock-helper.find-instances';\nimport mockHelperFormatHtml from './format/mock-helper.format-html';\nimport mockHelperFormatText from './format/mock-helper.format-text';\nimport mockHelperAutoSpy from './mock-helper.auto-spy';\nimport mockHelperConsoleIgnore from './mock-helper.console-ignore';\nimport mockHelperConsoleThrow from './mock-helper.console-throw';\nimport mockHelperDefaultConfig from './mock-helper.default-config';\nimport mockHelperDefaultMock from './mock-helper.default-mock';\nimport mockHelperFaster from './mock-helper.faster';\nimport mockHelperFlushTestBed from './mock-helper.flush-test-bed';\nimport mockHelperGet from './mock-helper.get';\nimport mockHelperGlobalExclude from './mock-helper.global-exclude';\nimport mockHelperGlobalKeep from './mock-helper.global-keep';\nimport mockHelperGlobalMock from './mock-helper.global-mock';\nimport mockHelperGlobalReplace from './mock-helper.global-replace';\nimport mockHelperGlobalWipe from './mock-helper.global-wipe';\nimport mockHelperGuts from './mock-helper.guts';\nimport mockHelperInput from './mock-helper.input';\nimport mockHelperOutput from './mock-helper.output';\nimport mockHelperReset from './mock-helper.reset';\nimport mockHelperStub from './mock-helper.stub';\nimport mockHelperStubMember from './mock-helper.stub-member';\nimport mockHelperHide from './render/mock-helper.hide';\nimport mockHelperRender from './render/mock-helper.render';\nimport mockHelperFindTemplateRef from './template-ref/mock-helper.find-template-ref';\nimport mockHelperFindTemplateRefs from './template-ref/mock-helper.find-template-refs';\n\nconst flagNames = ['onMockBuilderMissingDependency', 'onMockInstanceRestoreNeed', 'onTestBedFlushNeed'] as const;\n\nexport default {\n  autoSpy: mockHelperAutoSpy,\n  change: mockHelperChange,\n  click: mockHelperClick,\n  config: (config: {\n    mockRenderCacheSize?: number | null;\n    onMockBuilderMissingDependency?: 'throw' | 'warn' | 'i-know-but-disable' | null;\n    onMockInstanceRestoreNeed?: 'throw' | 'warn' | 'i-know-but-disable' | null;\n    onTestBedFlushNeed?: 'throw' | 'warn' | 'i-know-but-disable' | null;\n  }) => {\n    const flags = ngMocksUniverse.global.get('flags');\n    for (const flag of flagNames) {\n      if (config[flag] === null) {\n        flags[flag] = coreConfig[flag];\n      } else if (config[flag] !== undefined) {\n        flags[flag] = config[flag];\n      }\n    }\n    if (config.mockRenderCacheSize === null) {\n      ngMocksUniverse.global.delete('mockRenderCacheSize');\n    } else if (config.mockRenderCacheSize !== undefined) {\n      ngMocksUniverse.global.set('mockRenderCacheSize', config.mockRenderCacheSize);\n    }\n  },\n  crawl: mockHelperCrawl,\n  defaultConfig: mockHelperDefaultConfig,\n  defaultMock: mockHelperDefaultMock,\n  event: mockHelperEvent,\n  faster: mockHelperFaster,\n  find: mockHelperFind,\n  findAll: mockHelperFindAll,\n  findInstance: mockHelperFindInstance,\n  findInstances: mockHelperFindInstances,\n  findTemplateRef: mockHelperFindTemplateRef,\n  findTemplateRefs: mockHelperFindTemplateRefs,\n  flushTestBed: mockHelperFlushTestBed,\n  formatHtml: mockHelperFormatHtml,\n  formatText: mockHelperFormatText,\n  get: mockHelperGet,\n  globalExclude: mockHelperGlobalExclude,\n  globalKeep: mockHelperGlobalKeep,\n  globalMock: mockHelperGlobalMock,\n  globalReplace: mockHelperGlobalReplace,\n  globalWipe: mockHelperGlobalWipe,\n  guts: mockHelperGuts,\n  hide: mockHelperHide,\n  ignoreOnConsole: mockHelperConsoleIgnore,\n  input: mockHelperInput,\n  output: mockHelperOutput,\n  render: mockHelperRender,\n  reset: mockHelperReset,\n  reveal: mockHelperReveal,\n  revealAll: mockHelperRevealAll,\n  stub: mockHelperStub,\n  stubMember: mockHelperStubMember,\n  throwOnConsole: mockHelperConsoleThrow,\n  touch: mockHelperTouch,\n  trigger: mockHelperTrigger,\n};\n","import { DebugNodeSelector } from '../../common/core.types';\n\nimport mockHelperTrigger from './mock-helper.trigger';\n\nexport default (selector: DebugNodeSelector, payload?: object) => {\n  mockHelperTrigger(selector, 'click', payload);\n};\n","import { flatten } from '../common/core.helpers';\nimport { AnyDeclaration } from '../common/core.types';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\nimport { IMockBuilderConfig } from '../mock-builder/types';\n\nexport default <T>(\n  def: AnyDeclaration<T> | string | Array<AnyDeclaration<T> | string>,\n  config?: IMockBuilderConfig,\n): void => {\n  const map = ngMocksUniverse.getConfigMock();\n  for (const item of flatten(def)) {\n    if (config) {\n      map.set(item, config);\n    } else {\n      map.delete(item);\n    }\n  }\n};\n","import { getInjection } from '../../common/core.helpers';\nimport { Type } from '../../common/core.types';\nimport { getSourceOfMock } from '../../common/func.get-source-of-mock';\nimport { isNgDef } from '../../common/func.is-ng-def';\nimport mockHelperCrawl from '../crawl/mock-helper.crawl';\nimport mockHelperFindAll from '../find/mock-helper.find-all';\nimport funcGetFromNode from '../func.get-from-node';\nimport funcGetLastFixture from '../func.get-last-fixture';\nimport funcParseFindArgs from '../func.parse-find-args';\n\nimport funcIsValidFindInstanceSelector from './func.is-valid-find-instance-selector';\n\nexport default <T>(...args: any[]): T[] => {\n  const [el, sel] = funcParseFindArgs(args, funcIsValidFindInstanceSelector);\n  if (typeof sel !== 'function' && !isNgDef(sel, 't') && typeof sel !== 'string') {\n    throw new Error('Only classes or tokens are accepted');\n  }\n\n  const declaration: Type<T> = getSourceOfMock(sel);\n  const result: T[] = [];\n  const scanned: any[] = [];\n  const fixture = funcGetLastFixture();\n  if (fixture) {\n    const elements = mockHelperFindAll(fixture, el, undefined);\n    for (const element of elements) {\n      mockHelperCrawl(\n        element,\n        (node, parent) => {\n          if (scanned.indexOf(node) === -1) {\n            funcGetFromNode(result, node, declaration);\n            scanned.push(node);\n          }\n          if (parent && parent.nativeNode.nodeName === '#comment' && scanned.indexOf(parent) === -1) {\n            funcGetFromNode(result, parent, declaration);\n            scanned.push(parent);\n          }\n        },\n        true,\n      );\n    }\n  } else {\n    try {\n      result.push(getInjection(declaration));\n    } catch {\n      // nothing to do\n    }\n  }\n\n  return result;\n};\n","import { TemplateRef } from '@angular/core';\n\nimport nestedCheck from '../crawl/nested-check';\nimport mockHelperFind from '../find/mock-helper.find';\nimport funcGetLastFixture from '../func.get-last-fixture';\nimport funcParseFindArgs from '../func.parse-find-args';\n\nimport detectCrawler from './detect-crawler';\nimport detectTemplateRef from './detect-template-ref';\nimport funcIsValidTemplateRefSelector from './func.is-valid-template-ref-selector';\n\nexport default (...args: any[]): Array<TemplateRef<any>> => {\n  const [el, sel] = funcParseFindArgs(args, funcIsValidTemplateRefSelector);\n\n  const result: Array<TemplateRef<any>> = [];\n  const detector = detectCrawler(sel);\n  nestedCheck(mockHelperFind(funcGetLastFixture(), el, undefined), undefined, detectTemplateRef(result, detector));\n\n  return result;\n};\n","import { AnyType } from '../common/core.types';\nimport { isNgDef } from '../common/func.is-ng-def';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nimport funcGlobalPrepare from './func.global-prepare';\n\nexport default (source: AnyType<any>, destination: AnyType<any>): void => {\n  let fail = true;\n  if (isNgDef(source, 'm') && isNgDef(destination, 'm')) {\n    fail = false;\n  } else if (isNgDef(source, 'c') && isNgDef(destination, 'c')) {\n    fail = false;\n  } else if (isNgDef(source, 'd') && isNgDef(destination, 'd')) {\n    fail = false;\n  } else if (isNgDef(source, 'p') && isNgDef(destination, 'p')) {\n    fail = false;\n  }\n\n  if (fail) {\n    throw new Error('Cannot replace the declaration, both have to be a Module, a Component, a Directive or a Pipe');\n  }\n\n  funcGlobalPrepare();\n  ngMocksUniverse.getDefaults().set(source, ['replace', destination]);\n};\n","import funcFindDeep from './func.find-deep';\nimport funcParseTemplate from './func.parse-template';\n\nexport default (instance: object, param?: object) => {\n  const template = param ? funcParseTemplate(param) : undefined;\n\n  let result = false;\n  funcFindDeep(\n    instance,\n    tpl => {\n      if (!template) {\n        return true;\n      }\n\n      return tpl.elementRef.nativeElement === template.elementRef.nativeElement;\n    },\n    vcr => {\n      vcr.clear();\n      result = true;\n\n      return false;\n    },\n  );\n\n  if (!result) {\n    throw new Error('Cannot find path to the TemplateRef');\n  }\n};\n","import mockHelperAttributes from './mock-helper.attributes';\n\nexport default (...args: any[]) => mockHelperAttributes('input', 'inputs', ...args);\n","import mockHelperAttributes from './mock-helper.attributes';\n\nexport default (...args: any[]) => mockHelperAttributes('output', 'outputs', ...args);\n","import funcFindDeep from './func.find-deep';\nimport funcParseTemplate from './func.parse-template';\n\nexport default (instance: object, param: object, $implicit?: any, variables?: Record<keyof any, any>) => {\n  const template = funcParseTemplate(param);\n\n  const result = funcFindDeep(\n    instance,\n    tpl => tpl.elementRef.nativeElement === template.elementRef.nativeElement,\n    (vcr, tpl) => {\n      const context = {\n        ...variables,\n        $implicit,\n      };\n      vcr.clear();\n      vcr.createEmbeddedView(tpl, context).detectChanges();\n\n      return true;\n    },\n  );\n\n  if (!result) {\n    throw new Error('Cannot find path to the TemplateRef');\n  }\n};\n","import coreConfig from '../common/core.config';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nexport default (): void => {\n  ngMocksUniverse.builtDeclarations = new Map();\n  ngMocksUniverse.builtProviders = new Map();\n  ngMocksUniverse.cacheDeclarations = new Map();\n  ngMocksUniverse.cacheProviders = new Map();\n  ngMocksUniverse.config = new Map();\n  ngMocksUniverse.configInstance = new Map();\n  ngMocksUniverse.flags = new Set(coreConfig.flags);\n  ngMocksUniverse.touches = new Set();\n};\n","import mockHelperFind from '../find/mock-helper.find';\nimport funcGetLastFixture from '../func.get-last-fixture';\nimport funcParseFindArgs from '../func.parse-find-args';\n\nimport detectCrawler from './detect-crawler';\nimport detectTextNode from './detect-text-node';\nimport funcIsValidRevealSelector from './func.is-valid-reveal-selector';\nimport mockHelperCrawl from './mock-helper.crawl';\n\nexport default (...args: any[]): any[] => {\n  const [el, sel] = funcParseFindArgs(args, funcIsValidRevealSelector);\n  const root = mockHelperFind(funcGetLastFixture(), el, undefined);\n\n  const detector = detectCrawler(sel);\n\n  const result: any[] = [];\n  mockHelperCrawl(root, node => {\n    if (node !== root && !detectTextNode(node) && detector(node)) {\n      result.push(node);\n    }\n  });\n\n  return result;\n};\n","/* eslint-disable max-lines */\n\nimport { DebugNode, EventEmitter, InjectionToken, Injector, Provider, TemplateRef } from '@angular/core';\nimport { ComponentFixture, TestModuleMetadata } from '@angular/core/testing';\n\nimport { AnyDeclaration, AnyType, DebugNodeSelector, Type } from '../common/core.types';\nimport { NgModuleWithProviders } from '../common/func.is-ng-module-def-with-providers';\nimport { IMockBuilderConfig } from '../mock-builder/types';\nimport { MockedDebugElement, MockedDebugNode } from '../mock-render/types';\nimport { CustomMockFunction, MockedFunction } from '../mock-service/types';\n\nimport { FORMAT_SET, FORMAT_SINGLE } from './format/types';\nimport mockHelperObject from './mock-helper.object';\n\n/**\n * ngMocks provides a lot of tools to simply testing.\n *\n * @see https://ng-mocks.sudo.eu/api/ngMocks\n */\nexport const ngMocks: {\n  /**\n   * ngMocks.autoSpy installs proper spies instead of empty functions.\n   *\n   * @see https://ng-mocks.sudo.eu/extra/auto-spy\n   */\n  autoSpy(type: 'jasmine' | 'jest' | 'default' | 'reset'): void;\n\n  /**\n   * ngMocks.autoSpy installs proper spies instead of empty functions.\n   *\n   * @see https://ng-mocks.sudo.eu/extra/auto-spy\n   */\n  autoSpy(type: CustomMockFunction): void;\n\n  /**\n   * ngMocks.defaultConfig sets the default config of declarations for MockBuilder.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/defaultConfig\n   */\n  defaultConfig<T>(token: string | AnyDeclaration<T>, config?: IMockBuilderConfig): void;\n\n  /**\n   * ngMocks.defaultMock sets default customizations of mock tokens.\n   * It helps to avoid repetitions from test to test.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/defaultMock\n   */\n  defaultMock<T>(\n    token: InjectionToken<T>,\n    handler?: (value: undefined | T, injector: Injector) => undefined | Partial<T>,\n    config?: IMockBuilderConfig,\n  ): void;\n\n  /**\n   * ngMocks.defaultMock sets default customizations of mock string tokens.\n   * It helps to avoid repetitions from test to test.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/defaultMock\n   */\n  defaultMock<T = any>(\n    token: string,\n    handler?: (value: undefined | T, injector: Injector) => undefined | Partial<T>,\n    config?: IMockBuilderConfig,\n  ): void;\n\n  /**\n   * ngMocks.defaultMock sets default customizations of mock declarations.\n   * It helps to avoid repetitions from test to test.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/defaultMock\n   */\n  defaultMock<T>(\n    def: AnyType<T>,\n    handler?: (value: T, injector: Injector) => void | Partial<T>,\n    config?: IMockBuilderConfig,\n  ): void;\n\n  /**\n   * ngMocks.defaultMock sets default customizations of mock declarations and tokens.\n   * It helps to avoid repetitions from test to test.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/defaultMock\n   */\n  defaultMock<T = any>(\n    defs: Array<AnyDeclaration<T>>,\n    handler?: (value: undefined | T, injector: Injector) => undefined | Partial<T>,\n    config?: IMockBuilderConfig,\n  ): void;\n\n  /**\n   * ngMocks.globalExclude configures which declarations, providers and tokens\n   * should be excluded from mocks.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/globalExclude\n   *\n   * ```ts\n   * ngMocks.globalExclude(TranslationModule);\n   * ```\n   */\n  globalExclude(source: AnyDeclaration<any>, recursively?: boolean): void;\n\n  /**\n   * ngMocks.globalKeep configures which declarations, providers and tokens\n   * should not be mocked and will stay as they are in mocks.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/globalKeep\n   *\n   * ```ts\n   * ngMocks.globalKeep(TranslationModule);\n   * ```\n   */\n  globalKeep(source: AnyDeclaration<any>, recursively?: boolean): void;\n\n  /**\n   * ngMocks.globalMock configures which declarations, providers and tokens\n   * should be mocked in kept declarations.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/globalMock\n   *\n   * ```ts\n   * ngMocks.globalMock(TranslationModule);\n   * ```\n   */\n  globalMock(source: AnyDeclaration<any>, recursively?: boolean): void;\n\n  /**\n   * ngMocks.globalReplace configures which declarations, providers and tokens\n   * should be substituted in mocks.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/globalReplace\n   *\n   * ```ts\n   * ngMocks.globalReplace(BrowserAnimationsModule, NoopAnimationsModule);\n   * ```\n   */\n  globalReplace(source: AnyType<any>, destination: AnyType<any>): void;\n\n  /**\n   * ngMocks.globalWipe resets all customizations of ngMocks.global* and mgMocks.default* functions.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/globalWipe\n   *\n   * ```ts\n   * ngMocks.globalWipe(TranslationModule);\n   * ngMocks.globalWipe(BrowserAnimationsModule);\n   * ```\n   */\n  globalWipe(source: AnyDeclaration<any>, recursively?: boolean): void;\n\n  /**\n   * ngMocks.change triggers ControlValueAccessor update.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/change\n   */\n  change(elSelector: DebugNodeSelector, value: any, methodName?: string): void;\n\n  /**\n   * ngMocks.touch triggers ControlValueAccessor touch.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/touch\n   */\n  touch(elSelector: DebugNode | DebugNodeSelector, methodName?: string): void;\n\n  /**\n   * ngMocks.click properly simulates a click on an element.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/click\n   */\n  click(elSelector: HTMLElement | DebugNodeSelector, payload?: Partial<MouseEvent>): void;\n\n  /**\n   * ngMocks.trigger lets trigger custom events on DebugElements.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/trigger\n   *\n   * ```ts\n   * ngMocks.trigger(el, new CustomEvent('my-event'));\n   * ```\n   */\n  trigger(elSelector: DebugNodeSelector, event: Event): void;\n\n  /**\n   * ngMocks.trigger lets trigger custom events on DebugElements.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/trigger\n   *\n   * ```ts\n   * ngMocks.trigger(el, 'click');\n   * ngMocks.trigger(el, 'keydown.control.shift.z');\n   * ```\n   */\n  trigger(\n    elSelector: HTMLElement | DebugNodeSelector,\n    event: string,\n    payload?: Partial<UIEvent | KeyboardEvent | MouseEvent | TouchEvent>,\n  ): void;\n\n  /**\n   * ngMocks.event builds correct event objects.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/event\n   */\n  event(\n    event: string,\n    init?: EventInit,\n    overrides?: Partial<UIEvent | KeyboardEvent | MouseEvent | TouchEvent | Event>,\n  ): Event;\n\n  /**\n   * ngMocks.render renders a templateRef or DebugElement.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/render\n   *\n   * ```ts\n   * ngMocks.header(component, headerEl);\n   * ```\n   */\n  render(\n    instance: object,\n    template: TemplateRef<any> | DebugNode,\n    $implicit?: any,\n    variables?: Record<keyof any, any>,\n  ): void;\n\n  /**\n   * ngMocks.render renders a structural directive.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/render\n   *\n   * ```ts\n   * ngMocks.render(component, directiveInstance);\n   * ```\n   */\n  render(instance: object, directive: object, $implicit?: any, variables?: Record<keyof any, any>): void;\n\n  /**\n   * ngMocks.hide hides a rendered templateRef or DebugElement.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/hide\n   *\n   * ```ts\n   * ngMocks.hide(component, headerEl);\n   * ```\n   */\n  hide(instance: object, tpl?: TemplateRef<any> | DebugNode): void;\n\n  /**\n   * ngMocks.hide hides a rendered structural directive.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/hide\n   *\n   * ```ts\n   * ngMocks.hide(component, directiveInstance);\n   * ```\n   */\n  hide(instance: object, directive: object): void;\n\n  /**\n   * ngMocks.input allows to get an input value without knowing\n   * which component / directive it belongs to.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/input\n   *\n   * ```ts\n   * const input = ngMocks.input('app-component', 'version');\n   * ```\n   */\n  input<T = any>(elSelector: DebugNodeSelector, input: string): T;\n\n  /**\n   * ngMocks.input allows to get an input value without knowing\n   * which component / directive it belongs to, otherwise the notFoundValue.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/input\n   *\n   * ```ts\n   * const input = ngMocks.input('app-component', 'version', undefined);\n   * ```\n   */\n  input<T = any, D = undefined>(elSelector: DebugNodeSelector, input: string, notFoundValue: D): D | T;\n\n  /**\n   * ngMocks.output allows to get an output emitter without knowing\n   * which component / directive it belongs to.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/output\n   *\n   * ```ts\n   * const outputEmitter = ngMocks.output('app-component', 'update');\n   * ```\n   */\n  output<T = any>(elSelector: DebugNodeSelector, output: string): EventEmitter<T>;\n\n  /**\n   * ngMocks.output allows to get an output emitter without knowing\n   * which component / directive it belongs to, otherwise the notFoundValue.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/output\n   *\n   * ```ts\n   * const outputEmitter = ngMocks.output('app-component', 'update', undefined);\n   * ```\n   */\n  output<T = any, D = undefined>(elSelector: DebugNodeSelector, output: string, notFoundValue: D): D | EventEmitter<T>;\n\n  /**\n   * ngMocks.find searches for the DebugElement of a particular component,\n   * and returns the first found.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/find\n   *\n   * ```ts\n   * const el = ngMocks.find(MyComponent);\n   * ```\n   */\n  find<T>(component: Type<T>): MockedDebugElement<T>;\n\n  /**\n   * ngMocks.find searches for the DebugElement of a particular component\n   * starting from an element, and returns the first found.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/find\n   *\n   * ```ts\n   * const el = ngMocks.find(fixture.debugElement, MyComponent);\n   * ```\n   */\n  find<T>(\n    debugElement: MockedDebugElement | ComponentFixture<any> | undefined | null,\n    component: Type<T>,\n  ): MockedDebugElement<T>;\n\n  /**\n   * ngMocks.find searches for the DebugElement of a particular component,\n   * and returns the first found, otherwise the notFoundValue.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/find\n   *\n   * ```ts\n   * const el = ngMocks.find(MyComponent, undefined);\n   * ```\n   */\n  find<T, D>(component: Type<T>, notFoundValue: D): D | MockedDebugElement<T>;\n\n  /**\n   * ngMocks.find searches for the DebugElement of a particular component\n   * starting from an element, and returns the first found, otherwise the notFoundValue.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/find\n   *\n   * ```ts\n   * const el = ngMocks.find(fixture, MyComponent, undefined);\n   * ```\n   */\n  find<T, D>(\n    debugElement: MockedDebugElement | ComponentFixture<any> | undefined | null,\n    component: Type<T>,\n    notFoundValue: D,\n  ): D | MockedDebugElement<T>;\n\n  /**\n   * ngMocks.find searches for the DebugElement based on css selector,\n   * and returns the first found.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/find\n   *\n   * ```ts\n   * const el = ngMocks.find('.header');\n   * const el = ngMocks.find('[data-key=5]');\n   * const el = ngMocks.find(['data-key', 5]);\n   * ```\n   */\n  find<T = any>(cssSelector: string | [string] | [string, string | number]): MockedDebugElement<T>;\n\n  /**\n   * ngMocks.find searches for the DebugElement based on css selector\n   * starting from an element, and returns the first found.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/find\n   *\n   * ```ts\n   * const el = ngMocks.find(fixture.debugElement, '.header');\n   * const el = ngMocks.find(fixture, '[data-key=5]');\n   * const el = ngMocks.find(debugElement, ['data-key', 5]);\n   * ```\n   */\n  find<T = any>(\n    debugElement: MockedDebugElement | ComponentFixture<any> | undefined | null,\n    cssSelector: string | [string] | [string, string | number],\n  ): MockedDebugElement<T>;\n\n  /**\n   * ngMocks.find searches for the DebugElement based on css selector,\n   * and returns the first found, otherwise the notFoundValue.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/find\n   *\n   * ```ts\n   * const el = ngMocks.find('.header', undefined);\n   * const el = ngMocks.find('[data-key=5]', null);\n   * const el = ngMocks.find(['data-key', 5], null);\n   * ```\n   */\n  find<T = any, D = undefined>(\n    cssSelector: string | [string] | [string, string | number],\n    notFoundValue: D,\n  ): D | MockedDebugElement<T>;\n\n  /**\n   * ngMocks.find searches for the DebugElement based on css selector\n   * starting from an element, and returns the first found, otherwise the notFoundValue.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/find\n   *\n   * ```ts\n   * const el = ngMocks.find(fixture.debugElement, '.header', undefined);\n   * const el = ngMocks.find(fixture, '[data-key=5]', null);\n   * const el = ngMocks.find(debugElement, ['data-key', 5], null);\n   * ```\n   */\n  find<T = any, D = undefined>(\n    debugElement: MockedDebugElement | ComponentFixture<any> | undefined | null,\n    cssSelector: string | [string] | [string, string | number],\n    notFoundValue: D,\n  ): D | MockedDebugElement<T>;\n\n  /**\n   * ngMocks.findAll searches for all DebugElements of a particular component,\n   * and returns an array of them.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/findAll\n   *\n   * ```ts\n   * const all = ngMocks.findAll(MyComponent);\n   * ```\n   */\n  findAll<T>(component: Type<T>): Array<MockedDebugElement<T>>;\n\n  /**\n   * ngMocks.findAll searches for all DebugElements of a particular component\n   * starting from an element, and returns an array of them.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/findAll\n   *\n   * ```ts\n   * const all = ngMocks.findAll(fixture.debugElement, MyComponent);\n   * ```\n   */\n  findAll<T>(\n    debugElement: MockedDebugElement | ComponentFixture<any> | undefined | null,\n    component: Type<T>,\n  ): Array<MockedDebugElement<T>>;\n\n  /**\n   * ngMocks.findAll searches for all DebugElements based on css selector,\n   * and returns an array of them.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/findAll\n   *\n   * ```ts\n   * const all = ngMocks.findAll('.header');\n   * const all = ngMocks.findAll('[data-key=5]');\n   * const all = ngMocks.findAll(['data-key', 5]);\n   * ```\n   */\n  findAll<T = any>(cssSelector: string | [string] | [string, string | number]): Array<MockedDebugElement<T>>;\n\n  /**\n   * ngMocks.findAll searches for all DebugElements based on css selector\n   * starting from an element, and returns an array of them.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/findAll\n   *\n   * ```ts\n   * const all = ngMocks.findAll(fixture.debugElement, '.header');\n   * const all = ngMocks.findAll(fixture, '[data-key=5]');\n   * const all = ngMocks.findAll(debugElement, ['data-key', 5]);\n   * ```\n   */\n  findAll<T = any>(\n    debugElement: MockedDebugElement | ComponentFixture<any> | undefined | null,\n    cssSelector: string | [string] | [string, string | number],\n  ): Array<MockedDebugElement<T>>;\n\n  /**\n   * ngMocks.reveal allows finding DebugNodes which belong to ng-container or ng-template.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/reveal\n   *\n   * ```ts\n   * const ngContainer = ngMocks.reveal(HeaderComponent);\n   * ```\n   */\n  reveal<T>(selector: AnyType<T>): MockedDebugNode<T> | MockedDebugElement<T>;\n\n  /**\n   * ngMocks.reveal allows finding DebugNodes which belong to ng-container or ng-template\n   * starting from an element.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/reveal\n   *\n   * ```ts\n   * const ngContainer = ngMocks.reveal('header', HeaderComponent);\n   * ```\n   */\n  reveal<T>(elSelector: DebugNodeSelector, selector: AnyType<T>): MockedDebugNode<T> | MockedDebugElement<T>;\n\n  /**\n   * ngMocks.reveal allows finding DebugNodes which belong to ng-container or ng-template.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/reveal\n   *\n   * ```ts\n   * const ngContainer = ngMocks.reveal(['tpl', 'header']);\n   * ```\n   */\n  reveal<T = any>(selector: string | [string] | [string, any]): MockedDebugNode<T> | MockedDebugElement<T>;\n\n  /**\n   * ngMocks.reveal allows finding DebugNodes which belong to ng-container or ng-template\n   * starting from an element.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/reveal\n   *\n   * ```ts\n   * const ngContainer = ngMocks.reveal('header', ['tpl', 'header']);\n   * ```\n   */\n  reveal<T = any>(\n    elSelector: DebugNodeSelector,\n    selector: string | [string] | [string, any],\n  ): MockedDebugNode<T> | MockedDebugElement<T>;\n\n  /**\n   * ngMocks.reveal allows finding DebugNodes which belong to ng-container or ng-template,\n   * otherwise the notFoundValue.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/reveal\n   *\n   * ```ts\n   * const ngContainer = ngMocks.reveal(HeaderComponent, undefined);\n   * ```\n   */\n  reveal<T, D>(selector: AnyType<T>, notFoundValue: D): D | MockedDebugNode<T> | MockedDebugElement<T>;\n\n  /**\n   * ngMocks.reveal allows finding DebugNodes which belong to ng-container or ng-template\n   * starting from an element, otherwise the notFoundValue.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/reveal\n   *\n   * ```ts\n   * const ngContainer = ngMocks.reveal('sidebar', HeaderComponent, undefined);\n   * ```\n   */\n  reveal<T, D>(\n    elSelector: DebugNodeSelector,\n    selector: AnyType<T>,\n    notFoundValue: D,\n  ): D | MockedDebugNode<T> | MockedDebugElement<T>;\n\n  /**\n   * ngMocks.reveal allows finding DebugNodes which belong to ng-container or ng-template,\n   * otherwise the notFoundValue.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/reveal\n   *\n   * ```ts\n   * const ngContainer = ngMocks.reveal(['tpl', 'header'], undefined);\n   * ```\n   */\n  reveal<T = any, D = undefined>(\n    selector: string | [string] | [string, any],\n    notFoundValue: D,\n  ): D | MockedDebugNode<T> | MockedDebugElement<T>;\n\n  /**\n   * ngMocks.reveal allows finding DebugNodes which belong to ng-container or ng-template\n   * starting from an element, otherwise the notFoundValue.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/reveal\n   *\n   * ```ts\n   * const ngContainer = ngMocks.reveal('sidebar', ['tpl', 'header'], undefined);\n   * ```\n   */\n  reveal<T = any, D = undefined>(\n    elSelector: DebugNodeSelector,\n    selector: string | [string] | [string, any],\n    notFoundValue: D,\n  ): D | MockedDebugNode<T> | MockedDebugElement<T>;\n\n  /**\n   * ngMocks.revealAll allows finding all DebugNodes which belong to ng-container or ng-template.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/revealAll\n   *\n   * ```ts\n   * const ngContainers = ngMocks.revealAll(HeaderComponent);\n   * ```\n   */\n  revealAll<T>(selector: AnyType<T>): Array<MockedDebugNode<T> | MockedDebugElement<T>>;\n\n  /**\n   * ngMocks.reveal allows finding all DebugNodes which belong to ng-container or ng-template.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/revealAll\n   *\n   * ```ts\n   * const ngContainers = ngMocks.revealAll(['tpl', 'header']);\n   * ```\n   */\n  revealAll<T = any>(selector: string | [string] | [string, any]): Array<MockedDebugNode<T> | MockedDebugElement<T>>;\n\n  /**\n   * ngMocks.reveal allows finding all DebugNodes which belong to ng-container or ng-template\n   * starting from an element.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/revealAll\n   *\n   * ```ts\n   * const ngContainers = ngMocks.revealAll('sidebar', HeaderComponent);\n   * ```\n   */\n  revealAll<T>(elSelector: DebugNodeSelector, selector: AnyType<T>): Array<MockedDebugNode<T> | MockedDebugElement<T>>;\n\n  /**\n   * ngMocks.reveal allows finding all DebugNodes which belong to ng-container or ng-template\n   * starting from an element.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/revealAll\n   *\n   * ```ts\n   * const ngContainers = ngMocks.revealAll('sidebar', ['tpl', 'header']);\n   * ```\n   */\n  revealAll<T = any>(\n    elSelector: DebugNodeSelector,\n    selector: string | [string] | [string, any],\n  ): Array<MockedDebugNode<T> | MockedDebugElement<T>>;\n\n  /**\n   * ngMocks.get tries to get an instance of declaration, provider or token\n   * from the element which is matching a selector.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/get\n   *\n   * ```ts\n   * const myComponent = ngMocks.get('my-component', MyComponent);\n   * const myDirective = ngMocks.get('my-component', MyDirective);\n   * ```\n   */\n  get<T>(elSelector: DebugNodeSelector, provider: AnyDeclaration<T>): T;\n\n  /**\n   * ngMocks.get tries to get an instance of declaration, provider or token\n   * from the element which is matching a selector, otherwise the notFoundValue.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/get\n   *\n   * ```ts\n   * const myComponent = ngMocks.get('my-component', MyComponent, undefined);\n   * const myDirective = ngMocks.get('my-component', MyDirective, null);\n   * ```\n   */\n  get<T, D>(elSelector: DebugNodeSelector, provider: AnyDeclaration<T>, notFoundValue: D): D | T;\n\n  /**\n   * ngMocks.get tries to get an instance of provider or token for TestBed.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/get\n   *\n   * ```ts\n   * const myComponent = ngMocks.get(MyComponent);\n   * const myDirective = ngMocks.get(MyDirective);\n   * ```\n   */\n  get<T>(provider: AnyDeclaration<T>): T;\n\n  /**\n   * ngMocks.findInstance searches for an instance of declaration, provider or token,\n   * and returns the first one.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/findInstance\n   *\n   * ```ts\n   * const component = ngMocks.findInstance(SidebarComponent);\n   * const service = ngMocks.findInstance(AuthService);\n   * const config = ngMocks.findInstance(APP_CONFIG);\n   * ```\n   */\n  findInstance<T>(instanceClass: AnyDeclaration<T>): T;\n\n  /**\n   * ngMocks.findInstance searches for an instance of declaration, provider or token\n   * starting from an element, and returns the first one.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/findInstance\n   *\n   * ```ts\n   * const component = ngMocks.findInstance(fixture, SidebarComponent);\n   * const service = ngMocks.findInstance('header', AuthService);\n   * const config = ngMocks.findInstance(debugElement, APP_CONFIG);\n   * ```\n   */\n  findInstance<T>(elSelector: DebugNodeSelector, instanceClass: AnyDeclaration<T>): T;\n\n  /**\n   * ngMocks.findInstance searches for an instance of declaration, provider or token,\n   * and returns the first one, otherwise the notFoundValue.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/findInstance\n   *\n   * ```ts\n   * const component = ngMocks.findInstance(SidebarComponent, undefined);\n   * const service = ngMocks.findInstance(AuthService, null);\n   * const config = ngMocks.findInstance(APP_CONFIG, false);\n   */\n  findInstance<T, D>(instanceClass: AnyDeclaration<T>, notFoundValue: D): D | T;\n\n  /**\n   * ngMocks.findInstance searches for an instance of declaration, provider or token\n   * starting from an element, and returns the first one, otherwise the notFoundValue.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/findInstance\n   *\n   * ```ts\n   * const component = ngMocks.findInstance(fixture, SidebarComponent, undefined);\n   * const service = ngMocks.findInstance('header', AuthService, null);\n   * const config = ngMocks.findInstance(debugElement, APP_CONFIG, false);\n   * ```\n   */\n  findInstance<T, D>(elSelector: DebugNodeSelector, instanceClass: AnyDeclaration<T>, notFoundValue: D): D | T;\n\n  /**\n   * ngMocks.findInstances searches for all instances of declaration, provider or token,\n   * and returns an array of them.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/findInstances\n   *\n   * ```ts\n   * const components = ngMocks.findInstances(SidebarComponent);\n   * const services = ngMocks.findInstances(AuthService);\n   * const configs = ngMocks.findInstances(APP_CONFIG);\n   * ```\n   */\n  findInstances<T>(instanceClass: AnyDeclaration<T>): T[];\n\n  /**\n   * ngMocks.findInstances searches for all instances of declaration, provider or token\n   * starting from an element, and returns an array of them.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/findInstances\n   *\n   * ```ts\n   * const components = ngMocks.findInstances(fixture, SidebarComponent);\n   * const services = ngMocks.findInstances('header', AuthService);\n   * const configs = ngMocks.findInstances(debugElement, APP_CONFIG);\n   * ```\n   */\n  findInstances<T>(elSelector: DebugNodeSelector, instanceClass: AnyDeclaration<T>): T[];\n\n  /**\n   * ngMocks.findTemplateRef searches for a TemplateRef which is matching the selector,\n   * and returns the first found, otherwise the notFoundValue.\n   * The TemplateRef can be rendered later on.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/findTemplateRef\n   *\n   * ```ts\n   * const templateRef = ngMocks.findTemplateRef('sidebar', StructuralDirective, undefined);\n   * ```\n   */\n  findTemplateRef<T = any, D = undefined>(\n    elSelector: DebugNodeSelector,\n    selector: string | [string] | [string, any] | AnyType<any>,\n    notFoundValue: D,\n  ): D | TemplateRef<T>;\n\n  /**\n   * ngMocks.findTemplateRef searches for a TemplateRef which is matching the selector,\n   * and returns the first found.\n   * The TemplateRef can be rendered later on.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/findTemplateRef\n   *\n   * ```ts\n   * const templateRef = ngMocks.findTemplateRef('sidebar', StructuralDirective);\n   * ```\n   */\n  findTemplateRef<T = any>(\n    elSelector: DebugNodeSelector,\n    selector: string | [string] | [string, any] | AnyType<any>,\n  ): TemplateRef<T>;\n\n  /**\n   * ngMocks.findTemplateRef searches for a TemplateRef which is matching the selector,\n   * and returns the first found, otherwise the notFoundValue.\n   * The TemplateRef can be rendered later on.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/findTemplateRef\n   *\n   * ```ts\n   * const templateRef = ngMocks.findTemplateRef(['mat-row'], null);\n   * ```\n   */\n  findTemplateRef<T = any, D = undefined>(\n    selector: string | [string] | [string, any] | AnyType<any>,\n    notFoundValue: D,\n  ): D | TemplateRef<T>;\n\n  /**\n   * ngMocks.findTemplateRef searches for a TemplateRef which is matching the selector,\n   * and returns the first found.\n   * The TemplateRef can be rendered later on.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/findTemplateRef\n   *\n   * ```ts\n   * const templateRef = ngMocks.findTemplateRef(['mat-row']);\n   * ```\n   */\n  findTemplateRef<T = any>(selector: string | [string] | [string, any] | AnyType<any>): TemplateRef<T>;\n\n  /**\n   * ngMocks.findTemplateRefs searches for all TemplateRefs which is matching the selector\n   * starting from an element, and returns an array of them.\n   * The TemplateRef can be rendered later on.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/findTemplateRefs\n   *\n   * ```ts\n   * const templateRefs = ngMocks.findTemplateRefs('header', StructuralDirective);\n   * ```\n   */\n  findTemplateRefs<T = any>(\n    elSelector: DebugNodeSelector,\n    selector: string | [string] | [string, any] | AnyType<any>,\n  ): Array<TemplateRef<T>>;\n\n  /**\n   * ngMocks.findTemplateRefs searches for all TemplateRefs which is matching the selector,\n   * and returns an array of them.\n   * The TemplateRef can be rendered later on.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/findTemplateRefs\n   *\n   * ```ts\n   * const templateRefs = ngMocks.findTemplateRefs(['mat-row']);\n   * ```\n   */\n  findTemplateRefs<T = any>(selector: string | [string] | [string, any] | AnyType<any>): Array<TemplateRef<T>>;\n\n  /**\n   * ngMocks.crawl correctly crawls through Angular DOM with respect of TemplateRefs and ng-containers.\n   * Usually, it's used internally.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/crawl\n   */\n  crawl(\n    elSelector: DebugNodeSelector,\n    callback: (\n      node: MockedDebugNode | MockedDebugElement,\n      parent?: MockedDebugNode | MockedDebugElement,\n    ) => boolean | void,\n    includeTextNodes?: boolean,\n  ): void;\n\n  /**\n   * ngMocks.stub lets replace a method, getter or setter with a dummy callback.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/stub\n   *\n   * ```ts\n   * ngMocks.stub(instance, 'save'); // save is an empty callback now.\n   * ngMocks.stub(instance, 'user', 'get'); // getter is an empty callback now.\n   * ngMocks.stub(instance, 'user', 'set'); // setter is an empty callback now.\n   * ```\n   */\n  stub<T = MockedFunction, I = any>(instance: I, name: keyof I, style?: 'get' | 'set'): T;\n\n  /**\n   * ngMocks.stub lets apply partial customizations to an instance.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/stub\n   *\n   * ```ts\n   * ngMocks.stub(instance, {\n   *   save: () => undefined,\n   *   user: null,\n   * });\n   * ```\n   */\n  stub<I extends object>(instance: I, overrides: Partial<I>): I;\n\n  /**\n   * ngMocks.stubMember lets inject spies it to getters of properties of an instance.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/stubMember\n   *\n   * ```ts\n   * ngMocks.stubMember(instance, 'user', jasmine.createSpy(), 'get')\n   *   .and.returnValue(null);\n   * ```\n   */\n  stubMember<T extends object, K extends keyof T, S extends () => T[K]>(\n    instance: T,\n    name: K,\n    stub: S,\n    encapsulation: 'get',\n  ): S;\n\n  /**\n   * ngMocks.stubMember lets inject spies it to setters of properties of an instance.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/stubMember\n   *\n   * ```ts\n   * ngMocks.stubMember(instance, 'user', jasmine.createSpy(), 'set')\n   *   .and.throwError('setter is forbidden');\n   * ```\n   */\n  stubMember<T extends object, K extends keyof T, S extends (value: T[K]) => void>(\n    instance: T,\n    name: K,\n    stub: S,\n    encapsulation: 'set',\n  ): S;\n\n  /**\n   * ngMocks.stubMember lets inject spies it to an instance.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/stubMember\n   *\n   * ```ts\n   * ngMocks.stubMember(instance, 'save', jasmine.createSpy());\n   * ngMocks.stubMember(instance, 'user', null);\n   * ```\n   */\n  stubMember<T extends object, K extends keyof T, S extends T[K]>(instance: T, name: K, stub: S): S;\n\n  /**\n   * ngMocks.guts provides a simple way to configure complex mocks.\n   * Please check documentation.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/guts\n   */\n  guts(\n    keep: AnyDeclaration<any> | Provider | Array<AnyDeclaration<any> | Provider> | null | undefined,\n    mock?:\n      | AnyDeclaration<any>\n      | NgModuleWithProviders\n      | Provider\n      | Array<AnyDeclaration<any> | NgModuleWithProviders | Provider>\n      | null\n      | undefined,\n    exclude?: AnyDeclaration<any> | Array<AnyDeclaration<any>> | null | undefined,\n  ): TestModuleMetadata;\n\n  /**\n   * ngMocks.faster lets reuse the same TestBed between tests instead of resetting it.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/faster\n   */\n  faster(): void;\n\n  /**\n   * ignoreOnConsole suppresses any log calls, other methods can be suppressed too.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/ignoreOnConsole\n   */\n  ignoreOnConsole(...args: Array<keyof typeof console>): void;\n\n  /**\n   * Thanks Ivy, it does not throw an error, and we have to use injector.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/throwOnConsole\n   */\n  throwOnConsole(...args: Array<keyof typeof console>): void;\n\n  /**\n   * ngMocks.formatHtml normalizes html for a DebugElement, fixture or html string.\n   * It removes redundant spaces, comments etc.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/formatHtml\n   *\n   * ```ts\n   * const html = ngMocks.formatHTML(fixture);\n   * const html = ngMocks.formatHTML(debugElement);\n   * const html = ngMocks.formatHTML('<div>   </div>');\n   * ```\n   */\n  formatHtml(html: FORMAT_SINGLE, outer?: boolean): string;\n\n  /**\n   * ngMocks.formatHtml normalizes html for an array of DebugElements, fixtures or html strings.\n   * It removes redundant spaces, comments etc.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/formatHtml\n   *\n   * const [html1, html2] = ngMocks.formatHTML([fixture1, fixture2]);\n   * const htmlStrings = ngMocks.formatHTML(debugElements);\n   */\n  formatHtml(html: FORMAT_SET, outer?: boolean): string[];\n\n  /**\n   * ngMocks.formatText normalizes text for a DebugElement, fixture or html string.\n   * It removes tags, redundant spaces, comments etc.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/formatText\n   *\n   * ```ts\n   * const txt = ngMocks.formatText(fixture);\n   * const txt = ngMocks.formatText(debugElement);\n   * const txt = ngMocks.formatText('<div>   </div>');\n   * ```\n   */\n  formatText(text: FORMAT_SINGLE, outer?: boolean): string;\n\n  /**\n   * ngMocks.formatText normalizes text for an array of DebugElements, fixtures or html strings.\n   * It removes tags, redundant spaces, comments etc.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/formatText\n   *\n   * const [txt1, txt2] = ngMocks.formatText([fixture1, fixture2]);\n   * const txtStrings = ngMocks.formatText(debugElements);\n   */\n  formatText(text: FORMAT_SET, outer?: boolean): string[];\n\n  /**\n   * ngMocks.flushTestBed resets TestBed.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/flushTestBed\n   */\n  flushTestBed(): void;\n\n  /**\n   * ngMocks.reset resets cache of ng-mocks.\n   *\n   * @see https://ng-mocks.sudo.eu/api/ngMocks/reset\n   */\n  reset(): void;\n\n  /**\n   * ngMocks.config lets customize default behavior of error reporting.\n   */\n  config(config: {\n    mockRenderCacheSize?: number | null;\n    onMockBuilderMissingDependency?: 'throw' | 'warn' | 'i-know-but-disable' | null;\n    onMockInstanceRestoreNeed?: 'throw' | 'warn' | 'i-know-but-disable' | null;\n    onTestBedFlushNeed?: 'throw' | 'warn' | 'i-know-but-disable' | null;\n  }): void;\n} = mockHelperObject;\n","import {\n  ClassProvider,\n  ExistingProvider,\n  FactoryProvider,\n  InjectionToken,\n  Provider,\n  StaticClassProvider,\n  ValueProvider,\n} from '@angular/core';\n\nimport { AnyDeclaration, AnyType } from '../common/core.types';\nimport funcImportExists from '../common/func.import-exists';\nimport mockHelperStub from '../mock-helper/mock-helper.stub';\nimport helperUseFactory from '../mock-service/helper.use-factory';\nimport { MockService } from '../mock-service/mock-service';\n\nconst defaultValue = {};\n\n/**\n * MockProviders creates an array of mock providers out of passed as parameters.\n *\n * @see https://ng-mocks.sudo.eu/api/MockProvider\n *\n * ```ts\n * TestBed.configureTestingModule({\n *   providers: MockProviders(\n *     Dep1Service,\n *     Dep2Service,\n *   ),\n * });\n * ```\n */\nexport function MockProviders(...providers: Array<AnyDeclaration<any>>): FactoryProvider[] {\n  return providers.map((provider: any) => MockProvider(provider, defaultValue));\n}\n\n/**\n * MockProvider creates a mock provider out of passed an arbitrary service.\n *\n * @see https://ng-mocks.sudo.eu/api/MockProvider\n *\n * ```ts\n * TestBed.configureTestingModule({\n *   providers: [\n *     MockProvider(Dep1Service),\n *     MockProvider(Dep2Service, {\n *       prop: true,\n *       func: () => 'mock',\n *     }),\n *   ],\n * });\n * ```\n */\nexport function MockProvider<I extends object>(instance: AnyType<I>, overrides?: Partial<I>): FactoryProvider;\n\n/**\n * MockProvider creates a mock provider out of passed an arbitrary token.\n *\n * @see https://ng-mocks.sudo.eu/api/MockProvider\n *\n * ```ts\n * TestBed.configureTestingModule({\n *   providers: [\n *     MockProvider(APP_ID),\n *     MockProvider(WEB_SOCKET, {\n *       prop: true,\n *       func: () => 'mock',\n *     }),\n *   ],\n * });\n * ```\n */\nexport function MockProvider<I>(provider: InjectionToken<I>, useValue?: Partial<I>): FactoryProvider;\n\n/**\n * MockProvider creates a mock provider out of passed an arbitrary string token.\n *\n * @see https://ng-mocks.sudo.eu/api/MockProvider\n *\n * ```ts\n * TestBed.configureTestingModule({\n *   providers: [\n *     MockProvider('web_socket', {\n *       prop: true,\n *       func: () => 'mock',\n *     }),\n *   ],\n * });\n * ```\n */\nexport function MockProvider<I = any>(provider: string, useValue?: Partial<I>): FactoryProvider;\n\n/**\n * MockProvider generates useValue based on passed parameters.\n *\n * @see https://ng-mocks.sudo.eu/api/MockProvider#useValue\n *\n * ```ts\n * TestBed.configureTestingModule({\n *   providers: [\n *     MockProvider(AuthService, {isLoggedIn: true}, 'useValue'),\n *     MockProvider(APP_ROUTES, 5, 'useValue', true), // multi flag\n *   ],\n * });\n * ```\n */\nexport function MockProvider<I>(\n  provider: AnyDeclaration<I>,\n  value: ValueProvider['useValue'],\n  style: 'useValue',\n  multi?: ValueProvider['multi'],\n): ValueProvider;\n\n/**\n * MockProvider generates useExisting based on passed parameters.\n *\n * @see https://ng-mocks.sudo.eu/api/MockProvider#useExisting\n *\n * ```ts\n * TestBed.configureTestingModule({\n *   providers: [\n *     MockProvider(AuthService, MockAuthService, 'useExisting', true),\n *     MockProvider(APP_ROUTES, MOCK_ROUTES, 'useExisting', true), // multi flag\n *   ],\n * });\n * ```\n */\nexport function MockProvider<I>(\n  provider: AnyDeclaration<I>,\n  value: ExistingProvider['useExisting'],\n  style: 'useExisting',\n  multi?: ExistingProvider['multi'],\n): ExistingProvider;\n\n/**\n * MockProvider generates useClass based on passed parameters.\n *\n * @see https://ng-mocks.sudo.eu/api/MockProvider#useClass\n *\n * ```ts\n * TestBed.configureTestingModule({\n *   providers: [\n *     MockProvider(AuthService, MockAuthService, 'useClass', [ctorDep1, ctorDep2]),\n *     MockProvider(UserService, MockUserService, 'useClass', {\n *       multi: true, // multi flag\n *       deps: [ctorDep1, ctorDep2],\n *     }),\n *   ],\n * });\n * ```\n */\nexport function MockProvider<I>(\n  provider: AnyDeclaration<I>,\n  value: StaticClassProvider['useClass'],\n  style: 'useClass',\n  multiDeps?:\n    | StaticClassProvider['multi']\n    | StaticClassProvider['deps']\n    | {\n        multi?: StaticClassProvider['multi'];\n        deps?: StaticClassProvider['deps'];\n      },\n): ClassProvider;\n\n/**\n * MockProvider generates useFactory based on passed parameters.\n *\n * @see https://ng-mocks.sudo.eu/api/MockProvider#useFactory\n *\n * ```ts\n * TestBed.configureTestingModule({\n *   providers: [\n *     MockProvider(AuthService, (dep1, dep2) => {\n *       // ...\n *     }, 'useFactory', [ctorDep1, ctorDep2]),\n *     MockProvider(UserService, (dep1, dep2) => {\n *       // ...\n *     }, 'useFactory', {\n *       multi: true, // multi flag\n *       deps: [ctorDep1, ctorDep2],\n *     }),\n *   ],\n * });\n * ```\n */\nexport function MockProvider<I>(\n  provider: AnyDeclaration<I>,\n  value: FactoryProvider['useFactory'],\n  style: 'useFactory',\n  multiDeps?:\n    | FactoryProvider['multi']\n    | FactoryProvider['deps']\n    | {\n        multi?: FactoryProvider['multi'];\n        deps?: FactoryProvider['deps'];\n      },\n): FactoryProvider;\n\nexport function MockProvider(\n  provide: any,\n  overrides: any = defaultValue,\n  style?: 'useValue' | 'useExisting' | 'useClass' | 'useFactory',\n  flags:\n    | boolean\n    | any[]\n    | {\n        deps?: any[];\n        multi?: boolean;\n      } = {},\n): Provider {\n  funcImportExists(provide, 'MockProvider');\n\n  const { deps, multi } =\n    typeof flags === 'boolean'\n      ? { deps: undefined, multi: flags }\n      : Array.isArray(flags)\n      ? {\n          deps: flags,\n          multi: undefined,\n        }\n      : flags;\n\n  if (style) {\n    return {\n      provide,\n      [style]: overrides,\n      deps,\n      multi,\n    };\n  }\n\n  return helperUseFactory(\n    provide,\n    () => MockService(provide),\n    value => {\n      if (overrides === defaultValue) {\n        return value;\n      }\n      if (!value) {\n        return overrides;\n      }\n\n      return mockHelperStub(value, overrides);\n    },\n  );\n}\n","import { Injector, ViewContainerRef } from '@angular/core';\nimport { getTestBed, MetadataOverride, TestBed, TestBedStatic, TestModuleMetadata } from '@angular/core/testing';\n\nimport funcExtractTokens from '../mock-builder/func.extract-tokens';\nimport { MockBuilder } from '../mock-builder/mock-builder';\nimport getOverrideDef from '../mock-builder/promise/get-override-def';\nimport { ngMocks } from '../mock-helper/mock-helper';\nimport mockHelperFasterInstall from '../mock-helper/mock-helper.faster-install';\nimport { MockProvider } from '../mock-provider/mock-provider';\nimport helperCreateClone from '../mock-service/helper.create-clone';\n\nimport coreConfig from './core.config';\nimport coreDefineProperty from './core.define-property';\nimport { flatten, mapEntries, mapValues } from './core.helpers';\nimport coreInjector from './core.injector';\nimport coreReflectMeta from './core.reflect.meta';\nimport coreReflectModuleResolve from './core.reflect.module-resolve';\nimport coreReflectProvidedIn from './core.reflect.provided-in';\nimport { NG_MOCKS, NG_MOCKS_ROOT_PROVIDERS, NG_MOCKS_TOUCHES } from './core.tokens';\nimport { AnyType, dependencyKeys } from './core.types';\nimport { getSourceOfMock } from './func.get-source-of-mock';\nimport funcGetType from './func.get-type';\nimport { isMockNgDef } from './func.is-mock-ng-def';\nimport { isNgDef } from './func.is-ng-def';\nimport { isNgModuleDefWithProviders } from './func.is-ng-module-def-with-providers';\nimport ngMocksUniverse from './ng-mocks-universe';\n\nconst applyOverride = (def: any, override: any) => {\n  if (isNgDef(def, 'c')) {\n    TestBed.overrideComponent(def, override);\n  } else if (isNgDef(def, 'd')) {\n    TestBed.overrideDirective(def, override);\n  } else if (isNgDef(def, 'm')) {\n    TestBed.overrideModule(def, override);\n  }\n  if (isNgDef(def, 't')) {\n    TestBed.overrideProvider(def, override);\n  } else if (isNgDef(def, 'i')) {\n    TestBed.overrideProvider(def, override);\n  }\n};\n\nconst applyOverrides = (overrides: Map<AnyType<any>, [MetadataOverride<any>, MetadataOverride<any>]>): void => {\n  for (const [def, [override, original]] of mapEntries(overrides)) {\n    (TestBed as any).ngMocksOverrides.set(def, {\n      ...original,\n      override,\n    });\n    applyOverride(def, override);\n  }\n};\n\n// Thanks Ivy and its TestBed.override - it does not clean up leftovers.\nconst applyNgMocksOverrides = (testBed: TestBedStatic & { ngMocksOverrides?: Map<any, any> }): void => {\n  if (testBed.ngMocksOverrides?.size) {\n    ngMocks.flushTestBed();\n    for (const [def, original] of mapEntries(testBed.ngMocksOverrides)) {\n      applyOverride(def, original);\n    }\n  }\n  testBed.ngMocksOverrides = undefined;\n};\n\nconst initTestBed = () => {\n  if (!(TestBed as any).ngMocksSelectors) {\n    coreDefineProperty(TestBed, 'ngMocksSelectors', new Map());\n  }\n  // istanbul ignore else\n  if (!(TestBed as any).ngMocksOverrides) {\n    coreDefineProperty(TestBed, 'ngMocksOverrides', new Map());\n  }\n};\n\nconst generateTouches = (moduleDef: Partial<Record<dependencyKeys, any>>, touches: Set<any>): void => {\n  for (const key of coreConfig.dependencies) {\n    for (const item of moduleDef[key] ? flatten(moduleDef[key]) : []) {\n      const def = funcGetType(item);\n      if (isNgModuleDefWithProviders(item)) {\n        generateTouches(item, touches);\n      }\n      if (touches.has(def)) {\n        continue;\n      }\n      touches.add(def);\n      if (typeof def !== 'function') {\n        continue;\n      }\n\n      if (!Object.prototype.hasOwnProperty.call(def, '__ngMocksTouches')) {\n        const local = new Set<any>();\n        const meta = coreReflectMeta(def);\n        coreDefineProperty(def, '__ngMocksTouches', local, false);\n        if (meta) {\n          generateTouches(meta, local);\n        }\n      }\n\n      mapValues(def.__ngMocksTouches, touches);\n    }\n  }\n};\n\nconst defineTouches = (testBed: TestBed, moduleDef: TestModuleMetadata, knownTouches?: Set<any>) => {\n  let touches = knownTouches;\n\n  if (!touches && ngMocksUniverse.getDefaults().size > 0) {\n    touches = funcExtractTokens(\n      (testBed as any)._providers || /* istanbul ignore next Ivy part */ (testBed as any)._compiler?.providers,\n    ).touches;\n    if (!touches) {\n      touches = new Set();\n      moduleDef.providers = moduleDef.providers || [];\n      moduleDef.providers.push({ provide: NG_MOCKS_TOUCHES, useValue: touches });\n    }\n    generateTouches(moduleDef, touches);\n  }\n\n  return touches;\n};\n\nconst applyPlatformOverrideDef = (def: any) => {\n  const ngModule = funcGetType(def);\n  if ((TestBed as any).ngMocksOverrides.has(ngModule)) {\n    return;\n  }\n\n  const original = coreReflectModuleResolve(ngModule);\n  const set = getOverrideDef(original);\n  if (set) {\n    (TestBed as any).ngMocksOverrides.set(ngModule, { set: original });\n    TestBed.overrideModule(ngModule, { set });\n  }\n};\n\nconst applyPlatformOverridesBasedOnProvidedIn = (provide: any, touches: Set<any>) => {\n  const providedIn = coreReflectProvidedIn(provide);\n  if (!providedIn) {\n    return;\n  }\n  // knownTouches present from MockBuilder and we can rely on it,\n  // otherwise we have to override the provider always.\n  if (typeof providedIn !== 'string' && !touches.has(providedIn)) {\n    return;\n  }\n  (TestBed as any).ngMocksOverrides.set(provide, {});\n  TestBed.overrideProvider(provide, MockProvider(provide as never));\n};\n\nconst applyPlatformOverridesBasedOnDefaults = (touches: Set<any>) => {\n  for (const [provide, [config]] of mapEntries(ngMocksUniverse.getDefaults())) {\n    if (config !== 'mock') {\n      continue;\n    }\n    if (!isNgDef(provide, 'i') && !isNgDef(provide, 't')) {\n      continue;\n    }\n    if (touches.has(provide)) {\n      continue;\n    }\n    if ((TestBed as any).ngMocksOverrides.has(provide)) {\n      continue;\n    }\n    applyPlatformOverridesBasedOnProvidedIn(provide, touches);\n  }\n};\n\nconst applyPlatformOverrides = (testBed: TestBed, touches: Set<any>) => {\n  // istanbul ignore else\n  if ((TestBed as any).ngMocksOverrides) {\n    const backup = ngMocksUniverse.touches;\n    ngMocksUniverse.touches = touches;\n    for (const def of flatten(testBed.ngModule || /* istanbul ignore next */ [])) {\n      applyPlatformOverrideDef(def);\n    }\n    applyPlatformOverridesBasedOnDefaults(touches);\n    ngMocksUniverse.touches = backup;\n  }\n};\n\nconst configureTestingModule =\n  (\n    original: TestBedStatic['configureTestingModule'],\n    instance: TestBedStatic,\n  ): TestBedStatic['configureTestingModule'] =>\n  (moduleDef: TestModuleMetadata) => {\n    initTestBed();\n\n    const useMockBuilder =\n      typeof moduleDef === 'object' &&\n      !!moduleDef &&\n      (!moduleDef.providers || moduleDef.providers.indexOf(MockBuilder) === -1);\n    // 0b10 - mock exist\n    // 0b01 - real exist\n    let hasMocks = 0;\n    const mockBuilder: Array<[any, any, boolean]> = [];\n    for (const key of useMockBuilder ? ['imports', 'declarations'] : []) {\n      for (const declaration of flatten(moduleDef[key as never]) as any[]) {\n        if (!declaration) {\n          continue;\n        }\n        mockBuilder.push([\n          isNgModuleDefWithProviders(declaration)\n            ? {\n                ngModule: getSourceOfMock(declaration.ngModule),\n                providers: declaration.providers,\n              }\n            : getSourceOfMock(declaration),\n          isNgModuleDefWithProviders(declaration) ? declaration.ngModule : declaration,\n          isMockNgDef(funcGetType(declaration)),\n        ]);\n        hasMocks |= mockBuilder[mockBuilder.length - 1][2] ? 0b10 : 0b01;\n      }\n    }\n    // We should do magic only then both mock and real exist.\n    let finalModuleDef = hasMocks === 0b11 ? undefined : moduleDef;\n    if (!finalModuleDef) {\n      let builder = MockBuilder(NG_MOCKS_ROOT_PROVIDERS);\n\n      for (const [source, def, isMock] of mockBuilder) {\n        const transform = def.prototype.__ngMocksConfig?.transform;\n        const options = {\n          export: !isNgDef(source, 'm'),\n          exportAll: false,\n          onRoot: true,\n        };\n        builder =\n          isMock && transform\n            ? builder.mock(source, transform, options)\n            : isMock\n            ? builder.mock(source, options)\n            : builder.keep(source, options);\n      }\n\n      finalModuleDef = builder.build();\n      finalModuleDef = {\n        ...moduleDef,\n        ...finalModuleDef,\n        providers: [...(moduleDef.providers ?? []), ...(finalModuleDef.providers as never)],\n      };\n    }\n\n    const testBed = getTestBed();\n\n    const providers = funcExtractTokens(finalModuleDef.providers);\n    const { mocks, overrides } = providers;\n    // touches are important,\n    // therefore we are trying to fetch them from the known providers.\n    const touches = defineTouches(testBed, finalModuleDef, providers.touches);\n\n    if (mocks) {\n      ngMocks.flushTestBed();\n    }\n\n    // istanbul ignore else\n    if (overrides) {\n      applyOverrides(overrides);\n    }\n    // _testModuleRef exists only after the 1st call,\n    // so we shouldn't override platform again.\n    if (touches && !(testBed as any)._instantiated && !(testBed as any)._testModuleRef) {\n      applyPlatformOverrides(testBed, touches);\n    }\n\n    return original.call(instance, finalModuleDef);\n  };\n\nconst resetTestingModule =\n  (original: TestBedStatic['resetTestingModule'], instance: TestBedStatic): TestBedStatic['resetTestingModule'] =>\n  () => {\n    ngMocksUniverse.global.delete('builder:config');\n    ngMocksUniverse.global.delete('builder:module');\n    (TestBed as any).ngMocksSelectors = undefined;\n    applyNgMocksOverrides(TestBed);\n\n    return original.call(instance);\n  };\n\n// Monkey-patching ViewContainerRef.createComponent to replace dynamic imports with mocked declarations.\nconst patchVcrInstance = (vcrInstance: ViewContainerRef) => {\n  if (!(ViewContainerRef as any).ngMocksOverridesPatched) {\n    coreDefineProperty(ViewContainerRef, 'ngMocksOverridesPatched', true);\n\n    // istanbul ignore else\n    if (vcrInstance.createComponent) {\n      const createComponent = vcrInstance.createComponent;\n      const patchedCreateComponent = helperCreateClone(\n        createComponent,\n        undefined,\n        undefined,\n        function (component: any, ...createComponentArgs: any[]) {\n          // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n          // @ts-ignore\n          const thisVrc: ViewContainerRef = this;\n          const map = coreInjector(NG_MOCKS, thisVrc.injector);\n\n          return createComponent.apply(thisVrc, [map?.get(component) ?? component, ...createComponentArgs] as any);\n        },\n      );\n\n      coreDefineProperty(vcrInstance.constructor.prototype, 'createComponent', patchedCreateComponent, true);\n      coreDefineProperty(vcrInstance, 'createComponent', patchedCreateComponent, true);\n    }\n  }\n};\n\nconst createComponent =\n  (original: TestBedStatic['createComponent'], instance: TestBedStatic): TestBedStatic['createComponent'] =>\n  component => {\n    const fixture = original.call(instance, component);\n    try {\n      const vcr = fixture.debugElement.injector.get(ViewContainerRef);\n      patchVcrInstance(vcr);\n    } catch {\n      // nothing to do\n    }\n\n    return fixture as never;\n  };\n\nconst viewContainerInstall = () => {\n  const vcr: any = ViewContainerRef;\n\n  // istanbul ignore else\n  if (!vcr.ngMocksOverridesInstalled) {\n    const ngElementId = vcr.__NG_ELEMENT_ID__;\n\n    // istanbul ignore else\n    if (ngElementId) {\n      coreDefineProperty(\n        vcr,\n        '__NG_ELEMENT_ID__',\n        helperCreateClone(ngElementId, undefined, undefined, (...ngElementIdArgs: any[]) => {\n          const vcrInstance = ngElementId.apply(ngElementId, ngElementIdArgs);\n          patchVcrInstance(vcrInstance);\n\n          return vcrInstance;\n        }),\n        true,\n      );\n    }\n    coreDefineProperty(TestBed, 'createComponent', createComponent(TestBed.createComponent as never, TestBed as never));\n\n    coreDefineProperty(ViewContainerRef, 'ngMocksOverridesInstalled', true);\n  }\n};\n\n// this function monkey-patches Angular injectors.\nconst installInjector = (injector: Injector & { __ngMocksInjector?: any }): Injector => {\n  // skipping the matched injector\n  if (injector.constructor.prototype.__ngMocksInjector || !injector.constructor.prototype.get) {\n    return injector;\n  }\n\n  // marking the injector as patched\n  coreDefineProperty(injector.constructor.prototype, '__ngMocksInjector', true);\n  const injectorGet = injector.constructor.prototype.get;\n\n  // patch\n  injector.constructor.prototype.get = helperCreateClone(\n    injectorGet,\n    undefined,\n    undefined,\n    function (token: any, ...argsGet: any) {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      const binding: any = this;\n\n      // Here we can implement custom logic how to inject token,\n      // for example, replace with a provider def we need.\n\n      const result = injectorGet.call(binding, token, ...argsGet);\n      // If the result is an injector, we should patch it too.\n      if (\n        result &&\n        typeof result === 'object' &&\n        typeof result.constructor === 'function' &&\n        typeof result.constructor.name === 'string' &&\n        result.constructor.name.slice(-8) === 'Injector'\n      ) {\n        installInjector(result);\n      }\n\n      return result;\n    },\n  );\n\n  return injector;\n};\n\nconst install = () => {\n  // istanbul ignore else\n  if (!(TestBed as any).ngMocksOverridesInstalled) {\n    const hooks = mockHelperFasterInstall();\n    viewContainerInstall();\n\n    // istanbul ignore else\n    if (hooks.before.indexOf(configureTestingModule) === -1) {\n      hooks.before.push(configureTestingModule);\n    }\n    // istanbul ignore else\n    if (hooks.after.indexOf(resetTestingModule) === -1) {\n      hooks.after.push(resetTestingModule);\n    }\n\n    coreDefineProperty(TestBed, 'ngMocksOverridesInstalled', true);\n    const injectorCreate = Injector.create;\n    Injector.create = helperCreateClone(injectorCreate, undefined, undefined, (...argsCreate: any) =>\n      installInjector(injectorCreate.apply(Injector, argsCreate)),\n    );\n    try {\n      // force install of our injector.\n      Injector.create({ length: 0, providers: [] } as never);\n    } catch {\n      // nothing to do.\n    }\n  }\n};\n\ninstall();\n","import { PipeTransform } from '@angular/core';\n\nimport { MockedComponent } from '../mock-component/types';\nimport { MockedDirective } from '../mock-directive/types';\nimport { MockedModule } from '../mock-module/types';\nimport { MockedPipe } from '../mock-pipe/types';\n\nimport { Type } from './core.types';\nimport { isNgDef } from './func.is-ng-def';\n\n/**\n * Checks whether a declaration is the mock class of a module.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isMockedNgDefOf\n *\n * ```ts\n * isMockedNgDefOf(MockModule, RealModule, 'm'); // returns true\n * isMockedNgDefOf(MockModule, ArbitraryModule, 'm'); // returns false\n * isMockedNgDefOf(MockModule, ArbitraryClass, 'm'); // returns false\n * ```\n */\nexport function isMockedNgDefOf<T>(declaration: any, type: Type<T>, ngType: 'm'): declaration is Type<MockedModule<T>>;\n\n/**\n * Checks whether a declaration is the mock class of a component.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isMockedNgDefOf\n *\n * ```ts\n * isMockedNgDefOf(MockComponent, RealComponent, 'c'); // returns true\n * isMockedNgDefOf(MockComponent, ArbitraryComponent, 'c'); // returns false\n * isMockedNgDefOf(MockComponent, ArbitraryClass, 'c'); // returns false\n * ```\n */\nexport function isMockedNgDefOf<T>(\n  declaration: any,\n  type: Type<T>,\n  ngType: 'c',\n): declaration is Type<MockedComponent<T>>;\n\n/**\n * Checks whether a declaration is the mock class of a directive.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isMockedNgDefOf\n *\n * ```ts\n * isMockedNgDefOf(MockDirective, RealDirective, 'd'); // returns true\n * isMockedNgDefOf(MockDirective, ArbitraryDirective, 'd'); // returns false\n * isMockedNgDefOf(MockDirective, ArbitraryClass, 'd'); // returns false\n * ```\n */\nexport function isMockedNgDefOf<T>(\n  declaration: any,\n  type: Type<T>,\n  ngType: 'd',\n): declaration is Type<MockedDirective<T>>;\n\n/**\n * Checks whether a declaration is the mock class of a pipe.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isMockedNgDefOf\n *\n * ```ts\n * isMockedNgDefOf(MockPipe, RealPipe, 'p'); // returns true\n * isMockedNgDefOf(MockPipe, ArbitraryPipe, 'p'); // returns false\n * isMockedNgDefOf(MockPipe, ArbitraryClass, 'p'); // returns false\n * ```\n */\nexport function isMockedNgDefOf<T extends PipeTransform>(\n  declaration: any,\n  type: Type<T>,\n  ngType: 'p',\n): declaration is Type<MockedPipe<T>>;\n\n/**\n * Checks whether a declaration is the mock class of a thing.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isMockedNgDefOf\n *\n * ```ts\n * isMockedNgDefOf(MockPipe, RealPipe); // returns true\n * isMockedNgDefOf(MockComponent, ArbitraryComponent); // returns false\n * isMockedNgDefOf(MockPipe, ArbitraryClass); // returns false\n * ```\n */\nexport function isMockedNgDefOf<T>(declaration: any, type: Type<T>): declaration is Type<T>;\n\nexport function isMockedNgDefOf<T>(declaration: any, type: Type<T>, ngType?: any): declaration is Type<T> {\n  return (\n    typeof declaration === 'function' && declaration.mockOf === type && (ngType ? isNgDef(declaration, ngType) : true)\n  );\n}\n","import { MockedComponent } from '../mock-component/types';\nimport { MockedDirective } from '../mock-directive/types';\nimport { MockedModule } from '../mock-module/types';\nimport { MockedPipe } from '../mock-pipe/types';\n\nimport coreInjector from './core.injector';\nimport { NG_MOCKS } from './core.tokens';\nimport { AnyType, Type } from './core.types';\nimport funcGetName from './func.get-name';\nimport { isMockedNgDefOf } from './func.is-mocked-ng-def-of';\nimport ngMocksUniverse from './ng-mocks-universe';\n\nconst getMock = (declaration: any, source: any, mocks?: Map<any, any>) => {\n  if (mocks && !mocks.has(source)) {\n    throw new Error(`There is no mock for ${funcGetName(source)}`);\n  }\n  let mock = mocks ? mocks.get(source) : undefined;\n  if (mock === source) {\n    mock = undefined;\n  }\n\n  // If we are not in the MockBuilder env we can rely on the current cache.\n  if (!mock && source !== declaration) {\n    mock = declaration;\n  } else if (!mock && ngMocksUniverse.cacheDeclarations.has(source)) {\n    mock = ngMocksUniverse.cacheDeclarations.get(source);\n  }\n\n  return mock;\n};\n\n/**\n * Returns the mock class of a mock module based on a mock module or a source module.\n * It works in runtime if the module has been mocked.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/getMockedNgDefOf\n *\n * ```ts\n * getMockedNgDefOf(RealModule, 'm'); // returns MockModule\n * getMockedNgDefOf(MockModule, 'm'); // returns MockModule\n * getMockedNgDefOf(ArbitraryClass, 'm'); // throws\n * ```\n */\nexport function getMockedNgDefOf<T>(declaration: AnyType<T>, type: 'm'): Type<MockedModule<T>>;\n\n/**\n * Returns the mock class of a mock component based on a mock component or a source component.\n * It works in runtime if the component has been mocked.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/getMockedNgDefOf\n *\n * ```ts\n * getMockedNgDefOf(RealComponent, 'c'); // returns MockComponent\n * getMockedNgDefOf(MockComponent, 'c'); // returns MockComponent\n * getMockedNgDefOf(ArbitraryClass, 'c'); // throws\n * ```\n */\nexport function getMockedNgDefOf<T>(declaration: AnyType<T>, type: 'c'): Type<MockedComponent<T>>;\n\n/**\n * Returns the mock class of a mock directive based on a mock directive or a source directive.\n * It works in runtime if the directive has been mocked.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/getMockedNgDefOf\n *\n * ```ts\n * getMockedNgDefOf(RealDirective, 'd'); // returns MockDirective\n * getMockedNgDefOf(MockDirective, 'd'); // returns MockDirective\n * getMockedNgDefOf(ArbitraryClass, 'd'); // throws\n * ```\n */\nexport function getMockedNgDefOf<T>(declaration: AnyType<T>, type: 'd'): Type<MockedDirective<T>>;\n\n/**\n * Returns the mock class of a mock pipe based on a mock pipe or a source pipe.\n * It works in runtime if the pipe has been mocked.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/getMockedNgDefOf\n *\n * ```ts\n * getMockedNgDefOf(RealPipe, 'p'); // returns MockPipe\n * getMockedNgDefOf(MockPipe, 'p'); // returns MockPipe\n * getMockedNgDefOf(ArbitraryClass, 'p'); // throws\n * ```\n */\nexport function getMockedNgDefOf<T>(declaration: AnyType<T>, type: 'p'): Type<MockedPipe<T>>;\n\n/**\n * Returns the mock class of a thing based on a mock class or a source class.\n * It works in runtime if the thing has been mocked.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/getMockedNgDefOf\n *\n * ```ts\n * getMockedNgDefOf(RealComponent); // returns MockComponent\n * getMockedNgDefOf(MockPipe); // returns MockPipe\n * getMockedNgDefOf(ArbitraryClass); // throws\n * ```\n */\nexport function getMockedNgDefOf<T>(declaration: AnyType<T>): Type<T>;\n\nexport function getMockedNgDefOf(declaration: any, type?: any): any {\n  const source = declaration.mockOf ?? declaration;\n  const mocks = coreInjector(NG_MOCKS);\n\n  const mock = getMock(declaration, source, mocks);\n  if (mock && !type) {\n    return mock;\n  }\n  if (mock && type && isMockedNgDefOf(mock, source, type)) {\n    return mock;\n  }\n\n  throw new Error(`There is no mock for ${funcGetName(source)}`);\n}\n","import { PipeTransform } from '@angular/core';\n\nimport { MockedComponent } from '../mock-component/types';\nimport { MockedDirective } from '../mock-directive/types';\nimport { MockedModule } from '../mock-module/types';\nimport { MockedPipe } from '../mock-pipe/types';\n\nimport { Type } from './core.types';\nimport funcIsMock from './func.is-mock';\nimport { isNgDef } from './func.is-ng-def';\n\n/**\n * Checks whether the instance derives from a mock module.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isMockOf\n *\n * ```ts\n * isMockOf(moduleInstance, RealModule, 'm'); // returns true\n * isMockOf(moduleInstance, ArbitraryClass, 'm'); // returns false\n * ```\n */\nexport function isMockOf<T>(instance: any, declaration: Type<T>, ngType: 'm'): instance is MockedModule<T>;\n\n/**\n * Checks whether the instance derives from a mock component.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isMockOf\n *\n * ```ts\n * isMockOf(componentInstance, RealComponent, 'c'); // returns true\n * isMockOf(componentInstance, ArbitraryClass, 'c'); // returns false\n * ```\n */\nexport function isMockOf<T>(instance: any, declaration: Type<T>, ngType: 'c'): instance is MockedComponent<T>;\n\n/**\n * Checks whether the instance derives from a mock directive.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isMockOf\n *\n * ```ts\n * isMockOf(directiveInstance, RealDirective, 'd'); // returns true\n * isMockOf(directiveInstance, ArbitraryClass, 'd'); // returns false\n * ```\n */\nexport function isMockOf<T>(instance: any, declaration: Type<T>, ngType: 'd'): instance is MockedDirective<T>;\n\n/**\n * Checks whether the instance derives from a mock pipe.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isMockOf\n *\n * ```ts\n * isMockOf(pipeInstance, RealPipe, 'p'); // returns true\n * isMockOf(pipeInstance, ArbitraryClass, 'p'); // returns false\n * ```\n */\nexport function isMockOf<T extends PipeTransform>(\n  instance: any,\n  declaration: Type<T>,\n  ngType: 'p',\n): instance is MockedPipe<T>;\n\n/**\n * Checks whether the instance derives from a mock type.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isMockOf\n *\n * ```ts\n * isMockOf(componentInstance, RealComponent); // returns true\n * isMockOf(pipeInstance, RealPipe); // returns true\n * isMockOf(pipeInstance, ArbitraryClass); // returns false\n * ```\n */\nexport function isMockOf<T>(instance: any, declaration: Type<T>): instance is T;\n\nexport function isMockOf<T>(instance: any, declaration: Type<T>, ngType?: any): instance is T {\n  return (\n    funcIsMock(instance) &&\n    instance.constructor === declaration &&\n    (ngType ? isNgDef(instance.constructor, ngType) : isNgDef(instance.constructor))\n  );\n}\n","import funcIsMock from './func.is-mock';\nimport { MockValidator } from './mock-control-value-accessor';\n\n/**\n * isMockValidator helps to assert that an instance is a mock Validator\n * to perform validationChange simulations.\n * Usually, it is used in if statements.\n *\n * @see https://ng-mocks.sudo.eu/api/helpers/isMockValidator\n */\nexport const isMockValidator = <T>(value: T): value is T & MockValidator => {\n  if (!funcIsMock(value)) {\n    return false;\n  }\n\n  return !!(value as any).__ngMocksConfig.isValidator;\n};\n","import { InjectionToken, Injector } from '@angular/core';\n\nimport { AnyDeclaration, AnyType } from '../common/core.types';\nimport funcImportExists from '../common/func.import-exists';\nimport ngMocksStack, { NgMocksStack } from '../common/ng-mocks-stack';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nimport mockInstanceForgotReset from './mock-instance-forgot-reset';\n\nlet currentStack: NgMocksStack;\nngMocksStack.subscribePush(state => {\n  currentStack = state;\n});\nngMocksStack.subscribePop((state, stack) => {\n  for (const declaration of state.mockInstance || /* istanbul ignore next */ []) {\n    if (ngMocksUniverse.configInstance.has(declaration)) {\n      const universeConfig = ngMocksUniverse.configInstance.get(declaration);\n      universeConfig.overloads.pop();\n      ngMocksUniverse.configInstance.set(declaration, {\n        ...universeConfig,\n      });\n    }\n  }\n  currentStack = stack[stack.length - 1];\n});\n\ninterface MockInstanceArgs {\n  accessor?: 'get' | 'set';\n  data?: any;\n  key?: string;\n  value?: any;\n}\n\nconst parseMockInstanceArgs = (args: any[]): MockInstanceArgs => {\n  const set: MockInstanceArgs = {};\n\n  if (typeof args[0] === 'string') {\n    set.key = args[0];\n    set.value = args[1];\n    set.accessor = args[2];\n  } else {\n    set.value = args[0];\n    if (set.value && typeof set.value === 'object') {\n      set.value = set.value.init;\n    }\n  }\n\n  return set;\n};\n\nconst checkReset: Array<[any, any, any?]> = [];\nlet checkCollect = false;\n\n// istanbul ignore else: maybe a different runner is used\nif (typeof beforeEach !== 'undefined') {\n  beforeEach(() => (checkCollect = true));\n  beforeEach(() => mockInstanceForgotReset(checkReset));\n  afterEach(() => (checkCollect = false));\n}\n\nconst mockInstanceConfig = <T>(\n  declaration: AnyDeclaration<T>,\n  name: string | undefined,\n  stub: any,\n  encapsulation?: 'get' | 'set',\n) => {\n  const config = ngMocksUniverse.configInstance.has(declaration) ? ngMocksUniverse.configInstance.get(declaration) : {};\n  const overloads = config.overloads || [];\n  overloads.push([name, stub, encapsulation]);\n  config.overloads = overloads;\n  ngMocksUniverse.configInstance.set(declaration, {\n    ...config,\n  });\n  const mockInstances = currentStack.mockInstance ?? [];\n  mockInstances.push(declaration);\n  currentStack.mockInstance = mockInstances;\n\n  if (checkCollect) {\n    checkReset.push([declaration, ngMocksUniverse.configInstance.get(declaration), currentStack]);\n  }\n\n  return stub;\n};\n\n/**\n * This signature of MockInstance lets customize the getter of a property.\n *\n * @see https://ng-mocks.sudo.eu/api/MockInstance\n *\n * ```ts\n * MockInstance(ArbitraryComponent, 'currentUser$', () => mockUser$, 'get');\n * MockInstance(ArbitraryService, 'enabled', () => false, 'get');\n * ```\n */\nexport function MockInstance<T extends object, K extends keyof T, S extends () => T[K]>(\n  instance: AnyType<T>,\n  name: K,\n  stub: S,\n  encapsulation: 'get',\n): S;\n\n/**\n * This signature of MockInstance lets customize the setters of a property.\n *\n * @see https://ng-mocks.sudo.eu/api/MockInstance\n *\n * ```ts\n * const currentUserSetterSpy = jasmine.createSpy();\n * MockInstance(ArbitraryComponent, 'currentUser', currentUserSetterSpy, 'set');\n *\n * let relServiceEnabled: boolean;\n * MockInstance(ArbitraryService, 'enabled', value => relServiceEnabled = value, 'set');\n * ```\n */\nexport function MockInstance<T extends object, K extends keyof T, S extends (value: T[K]) => void>(\n  instance: AnyType<T>,\n  name: K,\n  stub: S,\n  encapsulation: 'set',\n): S;\n\n/**\n * This signature of MockInstance lets customize the properties and methods.\n *\n * @see https://ng-mocks.sudo.eu/api/MockInstance\n *\n * ```ts\n * MockInstance(ArbitraryComponent, 'onInit', onInitSpy);\n * MockInstance(ArbitraryDirective, 'onDestroy', () => {});\n * MockInstance(ArbitraryService, 'currentDate', new Date());\n * MockInstance(ArbitraryModule, 'currentUser', mockUser);\n * ```\n */\nexport function MockInstance<T extends object, K extends keyof T, S extends T[K]>(\n  instance: AnyType<T>,\n  name: K,\n  stub: S,\n): S;\n\n/**\n * This signature of MockInstance lets customize tokens with a callback.\n *\n * @see https://ng-mocks.sudo.eu/api/MockInstance\n *\n * ```ts\n * MockInstance(webSocketToken, () => mockWebSocket);\n * ```\n */\nexport function MockInstance<T>(\n  declaration: InjectionToken<T>,\n  init?: (instance: T | undefined, injector: Injector | undefined) => Partial<T>,\n): void;\n\n/**\n * This signature of MockInstance lets customize tokens with a callback.\n *\n * @deprecated please pass the callback directly instead of config.\n * @see https://ng-mocks.sudo.eu/api/MockInstance\n *\n * ```ts\n * MockInstance(webSocketToken, {\n *   init: () => mockWebSocket,\n * });\n * ```\n */\nexport function MockInstance<T>(\n  declaration: InjectionToken<T>,\n  config?: {\n    init?: (instance: T | undefined, injector: Injector | undefined) => Partial<T>;\n  },\n): void;\n\n/**\n * This signature of MockInstance lets customize the instances of mock classes with a callback.\n * You can return a shape or change the instance.\n *\n * @see https://ng-mocks.sudo.eu/api/MockInstance\n *\n * ```ts\n * MockInstance(ArbitraryComponent, (instance, injector) => {\n *   instance.enabled = true;\n *   instance.db = injector.get(DatabaseService);\n * });\n * MockInstance(ArbitraryDirective, () => {\n *   return {\n *     someProperty: true,\n *   };\n * });\n * ```\n */\nexport function MockInstance<T>(\n  declaration: AnyType<T>,\n  init?: (instance: T, injector: Injector | undefined) => void | Partial<T>,\n): void;\n\n/**\n * This signature of MockInstance lets customize the instances of mock classes with a callback.\n * You can return a shape or change the instance.\n *\n * @deprecated please pass the callback directly instead of config.\n * @see https://ng-mocks.sudo.eu/api/MockInstance\n *\n * ```ts\n * MockInstance(ArbitraryComponent, {\n *   init: (instance, injector) => {\n *     instance.enabled = true;\n *     instance.db = injector.get(DatabaseService);\n *   },\n * });\n * MockInstance(ArbitraryDirective, {\n *   init: () => {\n *     return {\n *       someProperty: true,\n *     };\n *   },\n * });\n * ```\n */\nexport function MockInstance<T>(\n  declaration: AnyType<T>,\n  config?: {\n    init?: (instance: T, injector: Injector | undefined) => void | Partial<T>;\n  },\n): void;\n\nexport function MockInstance<T>(declaration: AnyDeclaration<T>, ...args: any[]) {\n  funcImportExists(declaration, 'MockInstance');\n\n  if (args.length > 0) {\n    const { key, value, accessor } = parseMockInstanceArgs(args);\n\n    return mockInstanceConfig(declaration, key, value, accessor);\n  }\n\n  const config = ngMocksUniverse.configInstance.get(declaration) || /* istanbul ignore next */ {};\n\n  ngMocksUniverse.configInstance.set(declaration, {\n    ...config,\n    overloads: [],\n  });\n\n  // When we are calling MockInstance without a config we need to reset it from the checks too.\n  for (let i = checkReset.length - 1; i >= 0; i -= 1) {\n    if (checkReset[i][0] === declaration && checkReset[i][2] === currentStack) {\n      checkReset.splice(i, 1);\n    }\n  }\n}\n\n/**\n * Interface describes how to configure scopes for MockInstance.\n *\n * @see https://ng-mocks.sudo.eu/api/MockInstance#customization-scopes\n */\n// istanbul ignore next: issue in istanbul https://github.com/istanbuljs/nyc/issues/1209\nexport namespace MockInstance {\n  /**\n   * Creates a scope which remembers all future customizations of MockInstance.\n   * It allows to reset them afterwards.\n   *\n   * @see https://ng-mocks.sudo.eu/api/MockInstance#remember\n   */\n  export function remember() {\n    ngMocksStack.stackPush();\n  }\n\n  /**\n   * Resets all changes in the current scope.\n   *\n   * @see https://ng-mocks.sudo.eu/api/MockInstance#restore\n   */\n  export function restore() {\n    ngMocksStack.stackPop();\n  }\n\n  /**\n   * Creates a local scope in `beforeEach` and `afterEach`.\n   * If `suite` has been passed, then `beforeAll` and `afterAll` are used.\n   *\n   * @see https://ng-mocks.sudo.eu/api/MockInstance#scope\n   */\n  export function scope(scope: 'all' | 'suite' | 'case' = 'case') {\n    if (scope === 'all' || scope === 'suite') {\n      beforeAll(MockInstance.remember);\n      afterAll(MockInstance.restore);\n    }\n    if (scope === 'all' || scope === 'case') {\n      beforeEach(MockInstance.remember);\n      afterEach(MockInstance.restore);\n    }\n  }\n}\n\n/**\n * MockReset resets everything what has been configured in MockInstance.\n * Please consider using MockInstance.scope() instead,\n * which respects customizations between tests.\n *\n * https://ng-mocks.sudo.eu/api/MockInstance#resetting-customization\n * https://ng-mocks.sudo.eu/api/MockInstance#scope\n */\nexport function MockReset() {\n  ngMocksUniverse.configInstance.clear();\n}\n","import funcGetName from '../common/func.get-name';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\n\nexport default (checkReset: Array<[any, any, any?]>) => {\n  const showError: string[] = [];\n\n  // istanbul ignore next: because of the installed global scope switcher we cannot test this part\n  while (checkReset.length > 0) {\n    const [declaration, config] = checkReset.pop() || /* istanbul ignore next */ [];\n    if (config === ngMocksUniverse.configInstance.get(declaration)) {\n      showError.push(typeof declaration === 'function' ? funcGetName(declaration) : declaration);\n    }\n  }\n\n  // istanbul ignore if: because of the installed global scope switcher we cannot test this part\n  if (showError.length > 0) {\n    const globalFlags = ngMocksUniverse.global.get('flags');\n    const errorMessage = [\n      `MockInstance: side effects have been detected (${showError.join(', ')}).`,\n      'Forgot to add MockInstance.scope() or to call MockInstance.restore()?',\n    ].join(' ');\n    if (globalFlags.onMockInstanceRestoreNeed === 'warn') {\n      console.warn(errorMessage);\n    } else if (globalFlags.onMockInstanceRestoreNeed === 'throw') {\n      throw new Error(errorMessage);\n    }\n  }\n};\n","import { Type } from '../common/core.types';\nimport errorJestMock from '../common/error.jest-mock';\nimport funcGetName from '../common/func.get-name';\nimport { isNgDef } from '../common/func.is-ng-def';\nimport { MockComponent } from '../mock-component/mock-component';\nimport { MockedComponent } from '../mock-component/types';\nimport { MockDirective } from '../mock-directive/mock-directive';\nimport { MockedDirective } from '../mock-directive/types';\nimport { MockPipe } from '../mock-pipe/mock-pipe';\nimport { MockedPipe } from '../mock-pipe/types';\n\n/**\n * MockDeclarations creates an array of mock declaration classes out of declarations passed as parameters.\n *\n * @see https://ng-mocks.sudo.eu/api/MockComponent\n * @see https://ng-mocks.sudo.eu/api/MockDirective\n * @see https://ng-mocks.sudo.eu/api/MockPipe\n *\n * ```ts\n * TestBed.configureTestingModule({\n *   declarations: MockDeclarations(\n *     Dep1Component,\n *     Dep2Directive,\n *     Dep3Pipe,\n *   ),\n * });\n * ```\n */\nexport function MockDeclarations(...declarations: Array<Type<any>>): Array<Type<any>> {\n  return declarations.map(MockDeclaration);\n}\n\n/**\n * MockDeclaration creates a mock declaration class out of an arbitrary declaration.\n *\n * @see https://ng-mocks.sudo.eu/api/MockComponent\n * @see https://ng-mocks.sudo.eu/api/MockDirective\n * @see https://ng-mocks.sudo.eu/api/MockPipe\n *\n * ```ts\n * TestBed.configureTestingModule({\n *   declarations: [\n *     MockDeclaration(Dep1Component),\n *     MockDeclaration(Dep2Directive),\n *     MockDeclaration(Dep3Pipe),\n *   ],\n * });\n * ```\n */\nexport function MockDeclaration<T>(declaration: Type<T>): Type<MockedPipe<T> | MockedDirective<T> | MockedComponent<T>>;\n\nexport function MockDeclaration<T>(\n  declaration: Type<T>,\n): Type<MockedPipe<T> | MockedDirective<T> | MockedComponent<T>> {\n  if (isNgDef(declaration, 'p')) {\n    return MockPipe(declaration);\n  }\n  if (isNgDef(declaration, 'c')) {\n    return MockComponent(declaration);\n  }\n  if (isNgDef(declaration, 'd')) {\n    return MockDirective(declaration);\n  }\n\n  errorJestMock(declaration);\n  throw new Error(\n    [\n      'MockDeclaration does not know how to mock',\n      typeof declaration === 'function' ? funcGetName(declaration) : declaration,\n    ].join(' '),\n  );\n}\n","import coreReflectPipeResolve from '../common/core.reflect.pipe-resolve';\nimport { DirectiveIo } from '../common/core.types';\nimport funcDirectiveIoParse from '../common/func.directive-io-parse';\nimport { isNgDef } from '../common/func.is-ng-def';\n\nconst generateTemplateAttrWrap = (prop: string, type: 'i' | 'o') => (type === 'i' ? `[${prop}]` : `(${prop})`);\n\nconst generateTemplateAttrWithParams = (prop: string, type: 'i' | 'o'): string => {\n  let tpl = ` ${generateTemplateAttrWrap(prop, type)}=\"`;\n  tpl += type === 'i' ? prop : `__ngMocksOutput('${prop}', $event)`;\n  tpl += '\"';\n\n  return tpl;\n};\n\nconst generateTemplateAttr = (bindings: null | undefined | any[], attr: Array<DirectiveIo>, type: 'i' | 'o') => {\n  // unprovided params for inputs should render empty placeholders\n  if (!bindings && type === 'o') {\n    return '';\n  }\n\n  let mockTemplate = '';\n  const keys = bindings ?? attr;\n  for (const definition of attr) {\n    const { name, alias } = funcDirectiveIoParse(definition);\n\n    mockTemplate += keys.indexOf(alias || name) === -1 ? '' : generateTemplateAttrWithParams(alias || name, type);\n  }\n\n  return mockTemplate;\n};\n\nexport default (declaration: any, { selector, bindings, inputs, outputs }: any): string => {\n  let mockTemplate = '';\n\n  // istanbul ignore else\n  if (typeof declaration === 'string') {\n    mockTemplate = declaration;\n  } else if (isNgDef(declaration, 'p') && bindings && bindings.indexOf('$implicit') !== -1) {\n    mockTemplate = `{{ $implicit | ${coreReflectPipeResolve(declaration).name} }}`;\n  } else if (selector) {\n    mockTemplate += `<${selector}`;\n    mockTemplate += generateTemplateAttr(bindings, inputs, 'i');\n    mockTemplate += generateTemplateAttr(bindings, outputs, 'o');\n    mockTemplate += `></${selector}>`;\n  }\n\n  return mockTemplate;\n};\n","import { Component, Directive } from '@angular/core';\n\nimport coreConfig from '../common/core.config';\nimport coreDefineProperty from '../common/core.define-property';\nimport { Type } from '../common/core.types';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\nimport helperDefinePropertyDescriptor from '../mock-service/helper.define-property-descriptor';\n\nimport funcGenerateTemplate from './func.generate-template';\n\nconst generateWrapperOutput =\n  (instance: any) =>\n  (prop: keyof any, event: any): void => {\n    if (typeof instance[prop] === 'function') {\n      return instance[prop](event);\n    }\n    if (instance[prop] && typeof instance[prop] === 'object' && typeof instance[prop].emit === 'function') {\n      return instance[prop].emit(event);\n    }\n    if (instance[prop] && typeof instance[prop] === 'object' && typeof instance[prop].next === 'function') {\n      return instance[prop].next(event);\n    }\n\n    instance[prop] = event;\n  };\n\nconst generateWrapperComponent = ({ bindings, options, inputs }: any) => {\n  class MockRenderComponent {\n    public constructor() {\n      coreDefineProperty(this, '__ngMocksOutput', generateWrapperOutput(this));\n\n      // The getter helps to remove the __ngContext__ attribute from <mock-render> tag.\n      // It helps with snapshot assertions.\n      // @see https://github.com/help-me-mom/ng-mocks/issues/3811\n      let ngContext = 0;\n      helperDefinePropertyDescriptor(this, '__ngContext__', {\n        get: () => ngContext,\n        set: (newValue: any) => (ngContext = newValue),\n        enumerable: false,\n      });\n\n      if (!bindings) {\n        for (const input of inputs || []) {\n          let value: any = null;\n          helperDefinePropertyDescriptor(this, input, {\n            get: () => value,\n            set: (newValue: any) => (value = newValue),\n          });\n        }\n      }\n    }\n  }\n\n  // A16: adding unique property.\n  coreDefineProperty(MockRenderComponent.prototype, `__ngMocks_index_${ngMocksUniverse.index()}`, undefined, false);\n  Component(options)(MockRenderComponent);\n\n  return MockRenderComponent;\n};\n\nconst generateWrapperDirective = ({ selector, options }: any) => {\n  class MockRenderDirective {}\n  Directive({\n    selector,\n    providers: options.providers,\n  })(MockRenderDirective);\n\n  return MockRenderDirective;\n};\n\nconst getCache = () => {\n  const caches: Array<Type<any> & Record<'cacheKey', any[]>> = ngMocksUniverse.config.get('MockRenderCaches') ?? [];\n  if (caches.length === 0) {\n    ngMocksUniverse.config.set('MockRenderCaches', caches);\n  }\n\n  return caches;\n};\n\nconst checkCache = (caches: Array<Type<any> & Record<'cacheKey', any[]>>, cacheKey: any[]): undefined | Type<any> => {\n  for (const cache of caches) {\n    if (cache.cacheKey.length !== cacheKey.length) {\n      continue;\n    }\n    let isValid = true;\n    for (let i = 0; i < cacheKey.length; i += 1) {\n      if (cache.cacheKey[i] !== cacheKey[i]) {\n        isValid = false;\n        break;\n      }\n    }\n    if (isValid) {\n      return cache;\n    }\n  }\n\n  return undefined;\n};\n\nexport default (\n  template: any,\n  meta: Directive,\n  bindings: undefined | null | any[],\n  flags: Record<keyof any, any>,\n): Type<any> => {\n  const caches = getCache();\n\n  // nulls help to detect defaults\n  const cacheKey = [\n    template,\n    ...(bindings ?? [null]),\n    ...(flags.providers ?? [null]),\n    ...(flags.viewProviders ?? [null]),\n  ];\n  let ctor = checkCache(caches, cacheKey);\n  if (ctor) {\n    return ctor;\n  }\n\n  const inputs = meta.inputs ? [...meta.inputs] : [];\n  const outputs = meta.outputs ? [...meta.outputs] : [];\n  if (meta.hostDirectives) {\n    for (const hostDirective of meta.hostDirectives) {\n      if (typeof hostDirective !== 'object' || !hostDirective.directive) {\n        continue;\n      }\n\n      if (hostDirective.inputs) {\n        inputs.push(...hostDirective.inputs);\n      }\n      if (hostDirective.outputs) {\n        outputs.push(...hostDirective.outputs);\n      }\n    }\n  }\n\n  const mockTemplate = funcGenerateTemplate(template, { selector: meta.selector, inputs, outputs, bindings });\n  const options: Component = {\n    providers: flags.providers,\n    selector: 'mock-render',\n    template: mockTemplate,\n    viewProviders: flags.viewProviders,\n  };\n\n  ctor = generateWrapperComponent({ ...meta, bindings, options });\n  coreDefineProperty(ctor, 'cacheKey', cacheKey);\n  coreDefineProperty(ctor, 'tpl', mockTemplate);\n\n  if (meta.selector && options.providers) {\n    const dir = generateWrapperDirective({ ...meta, bindings, options });\n    coreDefineProperty(ctor, 'providers', dir);\n  }\n\n  caches.unshift(ctor as any);\n  caches.splice(ngMocksUniverse.global.get('mockRenderCacheSize') ?? coreConfig.mockRenderCacheSize);\n\n  return ctor;\n};\n","import coreDefineProperty from '../common/core.define-property';\nimport helperDefinePropertyDescriptor from '../mock-service/helper.define-property-descriptor';\nimport helperMockService from '../mock-service/helper.mock-service';\n\nconst createPropertyGet = (key: keyof any & string, reader: Record<keyof any, any>, source: Record<keyof any, any>) => {\n  const handler = () => {\n    if (typeof source[key] === 'function') {\n      if (reader[`__ngMocks_${key}__origin`] !== source[key]) {\n        const clone = helperMockService.createClone(source[key], reader, source);\n        coreDefineProperty(reader, `__ngMocks_${key}`, clone);\n        coreDefineProperty(reader, `__ngMocks_${key}__origin`, source[key]);\n      }\n\n      return reader[`__ngMocks_${key}`];\n    }\n\n    return source[key];\n  };\n  coreDefineProperty(handler, '__ngMocksProxy', true);\n\n  return handler;\n};\n\nconst createPropertySet = (key: keyof any & string, reader: Record<keyof any, any>, source: Record<keyof any, any>) => {\n  const handler = (newValue: any) => {\n    if (reader[`__ngMocks_${key}`]) {\n      reader[`__ngMocks_${key}`] = undefined;\n    }\n    if (reader[`__ngMocks_${key}__origin`]) {\n      reader[`__ngMocks_${key}__origin`] = undefined;\n    }\n    source[key] = newValue;\n  };\n  coreDefineProperty(handler, '__ngMocksProxy', true);\n\n  return handler;\n};\n\nconst extractAllKeys = (instance: object) => [\n  ...helperMockService.extractPropertiesFromPrototype(Object.getPrototypeOf(instance)),\n  ...helperMockService.extractMethodsFromPrototype(Object.getPrototypeOf(instance)),\n  ...Object.keys(instance),\n];\n\nconst extractOwnKeys = (instance: object) => [...Object.getOwnPropertyNames(instance), ...Object.keys(instance)];\n\nexport default (\n  reader: Record<keyof any, any>,\n  source: Record<keyof any, any> | undefined,\n  extra: string[],\n  force = false,\n): void => {\n  if (!source) {\n    return;\n  }\n  coreDefineProperty(reader, '__ngMocks__source', source);\n  const exists = extractOwnKeys(reader);\n  const fields = [...extractAllKeys(source), ...extra];\n  for (const key of fields) {\n    if (!force && exists.indexOf(key) !== -1) {\n      continue;\n    }\n    helperDefinePropertyDescriptor(reader, key, {\n      get: createPropertyGet(key, reader, source),\n      set: createPropertySet(key, reader, source),\n    });\n    exists.push(key);\n  }\n};\n","import { Component, Directive } from '@angular/core';\nimport { TestBed } from '@angular/core/testing';\n\nimport coreDefineProperty from '../common/core.define-property';\nimport { extendClass } from '../common/core.helpers';\nimport coreReflectDirectiveResolve from '../common/core.reflect.directive-resolve';\nimport { AnyType } from '../common/core.types';\nimport { isNgDef } from '../common/func.is-ng-def';\n\nconst registerTemplateMiddleware = (template: AnyType<any>, meta: Directive): void => {\n  const child = extendClass(template);\n\n  const alias = {\n    provide: template,\n    useExisting: child,\n  };\n  meta.providers = [...(meta.providers || []), alias];\n\n  // https://github.com/help-me-mom/ng-mocks/issues/1876\n  // We need to apply overrides to our cloned declaration.\n  let set: any = {};\n  try {\n    const ngMocksOverrides: Map<any, any> = (TestBed as any).ngMocksOverrides;\n    const { override } = ngMocksOverrides.get(template);\n    set = { ...override.set };\n    set.providers = set.providers ? [...set.providers, alias] : meta.providers;\n  } catch {\n    // nothing to do\n  }\n\n  const standalone = (meta as any).__ngMocksStandalone === true;\n  (isNgDef(template, 'c') ? Component : Directive)({\n    ...meta,\n    ...set,\n    ...(standalone ? { standalone } : {}),\n  })(child);\n  TestBed.configureTestingModule({\n    [standalone ? 'imports' : 'declarations']: [child],\n  });\n};\n\nexport default (template: AnyType<any>): Directive => {\n  if (!isNgDef(template, 'c') && !isNgDef(template, 'd')) {\n    return {};\n  }\n\n  const meta = coreReflectDirectiveResolve(template);\n  const override: Directive = {};\n  for (const key of Object.keys(meta)) {\n    if (key === 'standalone') {\n      coreDefineProperty(override, '__ngMocksStandalone', !!meta[key as never]);\n      continue;\n    }\n\n    override[key as never] = meta[key as never];\n  }\n\n  if (override.selector && /[\\s,[\\]]/.test(override.selector)) {\n    override.selector = '';\n  }\n\n  if (!override.selector) {\n    // istanbul ignore next\n    override.selector = (TestBed as any).ngMocksSelectors?.get(template) || '';\n    if (!override.selector) {\n      override.selector = `ng-mocks-${template.name}`;\n      registerTemplateMiddleware(template, override);\n      // istanbul ignore else\n      if ((TestBed as any).ngMocksSelectors) {\n        (TestBed as any).ngMocksSelectors.set(template, override.selector);\n      }\n    }\n  }\n\n  return override;\n};\n","import { DebugElement, Directive, InjectionToken } from '@angular/core';\nimport { getTestBed, TestBed } from '@angular/core/testing';\n\nimport coreDefineProperty from '../common/core.define-property';\nimport { getInjection } from '../common/core.helpers';\nimport { AnyDeclaration, AnyType, Type } from '../common/core.types';\nimport funcGetName from '../common/func.get-name';\nimport funcImportExists from '../common/func.import-exists';\nimport { isNgDef } from '../common/func.is-ng-def';\nimport ngMocksStack from '../common/ng-mocks-stack';\nimport ngMocksUniverse from '../common/ng-mocks-universe';\nimport { ngMocks } from '../mock-helper/mock-helper';\nimport helperDefinePropertyDescriptor from '../mock-service/helper.define-property-descriptor';\nimport { MockService } from '../mock-service/mock-service';\n\nimport funcCreateWrapper from './func.create-wrapper';\nimport funcInstallPropReader from './func.install-prop-reader';\nimport funcReflectTemplate from './func.reflect-template';\nimport { IMockRenderFactoryOptions, MockedComponentFixture } from './types';\n\nexport interface MockRenderFactory<C = any, F extends keyof any = keyof C> {\n  bindings: keyof F;\n  configureTestBed: () => void;\n  declaration: AnyType<never>;\n  <T extends Record<F, any>>(params?: Partial<T>, detectChanges?: boolean): MockedComponentFixture<C, T>;\n}\n\nconst renderDeclaration = (fixture: any, template: any, params: any): void => {\n  fixture.point =\n    fixture.debugElement.children[0] &&\n    fixture.debugElement.children[0].nativeElement.nodeName !== '#text' &&\n    fixture.debugElement.children[0].nativeElement.nodeName !== '#comment'\n      ? fixture.debugElement.children[0]\n      : fixture.debugElement;\n  if (isNgDef(template, 'd')) {\n    helperDefinePropertyDescriptor(fixture.point, 'componentInstance', {\n      get: () => ngMocks.get(fixture.point, template),\n    });\n  } else if (isNgDef(template, 'p')) {\n    helperDefinePropertyDescriptor(fixture.point, 'componentInstance', {\n      get: () => ngMocks.findInstance(fixture.point, template),\n    });\n  }\n  tryWhen(!params, () => funcInstallPropReader(fixture.componentInstance, fixture.point.componentInstance, []));\n};\n\nconst renderInjection = (fixture: any, template: any, params: any): void => {\n  let instance: any;\n  try {\n    instance = getInjection(template);\n  } catch (error) {\n    if (isNgDef(template, 'p')) {\n      throw new Error(\n        [\n          `Cannot render ${funcGetName(template)}.`,\n          'Did you forget to set $implicit param, or add the pipe to providers?',\n          'https://ng-mocks.sudo.eu/guides/pipe',\n        ].join(' '),\n      );\n    }\n    throw error;\n  }\n  if (params) {\n    ngMocks.stub(instance, params);\n  }\n  fixture.point = MockService(DebugElement, {\n    childNodes: [],\n    children: [],\n    componentInstance: instance,\n    nativeElement: MockService(HTMLElement),\n  });\n  funcInstallPropReader(fixture.componentInstance, fixture.point.componentInstance, [], true);\n};\n\nconst tryWhen = (flag: boolean, callback: () => void) => {\n  if (!flag) {\n    return;\n  }\n  try {\n    // ivy throws Error: Expecting instance of DOM Element\n    callback();\n  } catch {\n    // nothing to do\n  }\n};\n\nconst fixtureMessage = [\n  'Forgot to flush TestBed?',\n  'MockRender cannot be used without a reset after TestBed.get / TestBed.inject / TestBed.createComponent and another MockRender in the same test.',\n  'If you want to mock a service before rendering, consider usage of MockRenderFactory or MockInstance.',\n  'To flush TestBed, add a call of ngMocks.flushTestBed() before the call of MockRender, or pass `reset: true` to MockRender options.',\n].join(' ');\n\nconst handleFixtureError = (e: any) => {\n  const error = new Error(fixtureMessage);\n  coreDefineProperty(error, 'parent', e);\n  throw error;\n};\n\nconst flushTestBed = (flags: Record<string, any>): void => {\n  const globalFlags = ngMocksUniverse.global.get('flags');\n  const testBed: any = getTestBed();\n  if (flags.reset || (!testBed._instantiated && !testBed._testModuleRef)) {\n    ngMocks.flushTestBed();\n  } else if (globalFlags.onTestBedFlushNeed !== 'throw' && (testBed._instantiated || testBed._testModuleRef)) {\n    if (globalFlags.onTestBedFlushNeed === 'warn') {\n      console.warn(fixtureMessage);\n    }\n    ngMocks.flushTestBed();\n  }\n};\n\nconst generateFactoryInstall =\n  (ctor: AnyType<any> & { providers?: AnyType<any> }, options: IMockRenderFactoryOptions) => () => {\n    const testBed: TestBed & {\n      _compiler?: {\n        declarations?: Array<AnyType<any>>;\n      };\n      _declarations?: Array<AnyType<any>>;\n      declarations?: Array<AnyType<any>>;\n    } = getTestBed();\n    // istanbul ignore next\n    const existing = testBed._compiler?.declarations || testBed.declarations || testBed._declarations;\n    if (!existing || existing.indexOf(ctor) === -1) {\n      flushTestBed(options);\n      try {\n        const declarations: Array<AnyType<any>> = [];\n        if (ctor.providers) {\n          declarations.push(ctor.providers);\n        }\n        declarations.push(ctor);\n        TestBed.configureTestingModule({\n          declarations,\n        });\n      } catch (error) {\n        handleFixtureError(error);\n      }\n    }\n  };\n\nconst generateFactory = (\n  componentCtor: Type<any> & { tpl?: string },\n  bindings: undefined | null | string[],\n  template: any,\n  options: IMockRenderFactoryOptions,\n) => {\n  const result = (params: any, detectChanges?: boolean) => {\n    result.configureTestBed();\n    const fixture: any = TestBed.createComponent(componentCtor);\n\n    funcInstallPropReader(fixture.componentInstance, params ?? {}, bindings ?? []);\n    coreDefineProperty(fixture, 'ngMocksStackId', ngMocksUniverse.global.get('bullet:stack:id'));\n\n    if (detectChanges === undefined || detectChanges) {\n      fixture.detectChanges();\n    }\n\n    if (\n      typeof template === 'string' ||\n      isNgDef(template, 'c') ||\n      isNgDef(template, 'd') ||\n      (componentCtor.tpl && isNgDef(template, 'p'))\n    ) {\n      renderDeclaration(fixture, template, params);\n    } else {\n      renderInjection(fixture, template, params);\n    }\n\n    return fixture;\n  };\n  result.declaration = componentCtor;\n  result.bindings = bindings;\n  result.configureTestBed = generateFactoryInstall(componentCtor, options);\n\n  return result;\n};\n\n/**\n * @see https://ng-mocks.sudo.eu/api/MockRender#factory\n */\nexport function MockRenderFactory<MComponent>(\n  template: InjectionToken<MComponent>,\n  bindings?: undefined | null,\n  options?: IMockRenderFactoryOptions,\n): MockRenderFactory<MComponent, never>;\n\n/**\n * MockRenderFactory is a delayed version of MockRender.\n *\n * @see https://ng-mocks.sudo.eu/api/MockRender#factory\n */\nexport function MockRenderFactory<MComponent>(\n  template: AnyType<MComponent>,\n  bindings: undefined | null,\n  options?: IMockRenderFactoryOptions,\n): MockRenderFactory<MComponent, keyof MComponent>;\n\n/**\n * MockRenderFactory is a delayed version of MockRender.\n *\n * @see https://ng-mocks.sudo.eu/api/MockRender#factory\n */\nexport function MockRenderFactory<MComponent, TKeys extends keyof any>(\n  template: AnyType<MComponent>,\n  bindings: TKeys[],\n  options?: IMockRenderFactoryOptions,\n): MockRenderFactory<MComponent, TKeys>;\n\n/**\n * MockRenderFactory is a delayed version of MockRender.\n *\n * @see https://ng-mocks.sudo.eu/api/MockRender#factory\n */\nexport function MockRenderFactory<MComponent, TKeys extends keyof any = keyof any>(\n  template: AnyType<MComponent>,\n  bindings: TKeys[],\n  options?: IMockRenderFactoryOptions,\n): MockRenderFactory<MComponent, TKeys>;\n\n/**\n * Without params we should not autocomplete any keys of any types.\n *\n * @see https://ng-mocks.sudo.eu/api/MockRender#factory\n */\nexport function MockRenderFactory<MComponent>(\n  template: AnyType<MComponent>,\n): MockRenderFactory<MComponent, keyof MComponent>;\n\n/**\n * An empty string does not have point.\n *\n * @see https://ng-mocks.sudo.eu/api/MockRender#factory\n */\nexport function MockRenderFactory(template: ''): MockRenderFactory<void, never>;\n\n/**\n * Without params we should not autocomplete any keys of any types.\n *\n * @see https://ng-mocks.sudo.eu/api/MockRender#factory\n */\nexport function MockRenderFactory<MComponent = void>(template: string): MockRenderFactory<MComponent>;\n\n/**\n * MockRenderFactory is a delayed version of MockRender.\n *\n * @see https://ng-mocks.sudo.eu/api/MockRender#factory\n */\nexport function MockRenderFactory<MComponent = void, TKeys extends keyof any = keyof any>(\n  template: string,\n  bindings: TKeys[],\n  options?: IMockRenderFactoryOptions,\n): MockRenderFactory<MComponent, TKeys>;\n\nexport function MockRenderFactory<MComponent, TKeys extends string>(\n  template: string | AnyDeclaration<MComponent>,\n  bindings?: undefined | null | TKeys[],\n  options: IMockRenderFactoryOptions = {},\n): any {\n  funcImportExists(template, 'MockRender');\n\n  const meta: Directive = typeof template === 'string' || isNgDef(template, 't') ? {} : funcReflectTemplate(template);\n  const componentCtor: any = funcCreateWrapper(template, meta, bindings, options);\n  const factory = generateFactory(componentCtor, bindings, template, options);\n  if (ngMocksStack.current().level !== 'root' && options.configureTestBed !== false) {\n    factory.configureTestBed();\n  }\n\n  return factory;\n}\n","import { InjectionToken } from '@angular/core';\n\nimport { AnyDeclaration, AnyType } from '../common/core.types';\n\nimport { MockRenderFactory } from './mock-render-factory';\nimport { IMockRenderOptions, MockedComponentFixture } from './types';\n\n/**\n * This signature of MockRender lets create an empty fixture.\n *\n * @see https://ng-mocks.sudo.eu/api/MockRender\n */\nexport function MockRender(): MockedComponentFixture<void, void>;\n\n/**\n * This signature of MockRender lets create a fixture to access a token.\n *\n * @see https://ng-mocks.sudo.eu/api/MockRender\n */\nexport function MockRender<MComponent>(\n  template: InjectionToken<MComponent>,\n  params?: undefined | null,\n  detectChangesOrOptions?: boolean | IMockRenderOptions,\n): MockedComponentFixture<MComponent, void>;\n\n/**\n * This signature of MockRender lets create a fixture to access a component without parameters.\n *\n * @see https://ng-mocks.sudo.eu/api/MockRender\n */\nexport function MockRender<MComponent>(\n  template: AnyType<MComponent>,\n  params: undefined | null,\n  detectChangesOrOptions?: boolean | IMockRenderOptions,\n): MockedComponentFixture<MComponent, MComponent>;\n\n/**\n * This signature of MockRender lets create a fixture with parameters to access a component.\n *\n * @see https://ng-mocks.sudo.eu/api/MockRender\n */\nexport function MockRender<MComponent, TComponent extends object>(\n  template: AnyType<MComponent>,\n  params: TComponent,\n  detectChangesOrOptions?: boolean | IMockRenderOptions,\n): MockedComponentFixture<MComponent, TComponent>;\n\n/**\n * This signature of MockRender lets create a fixture with parameters to access a component.\n *\n * @see https://ng-mocks.sudo.eu/api/MockRender\n */\nexport function MockRender<MComponent, TComponent extends object = Record<keyof any, any>>(\n  template: AnyType<MComponent>,\n  params: TComponent,\n  detectChangesOrOptions?: boolean | IMockRenderOptions,\n): MockedComponentFixture<MComponent, TComponent>;\n\n/**\n * This signature of MockRender without params should not autocomplete any keys of any types.\n *\n * @see https://ng-mocks.sudo.eu/api/MockRender\n */\nexport function MockRender<MComponent>(template: AnyType<MComponent>): MockedComponentFixture<MComponent, MComponent>;\n\n/**\n * This signature of MockRender without params should not autocomplete any keys of any types.\n *\n * @see https://ng-mocks.sudo.eu/api/MockRender\n */\nexport function MockRender<MComponent = void>(template: string): MockedComponentFixture<MComponent>;\n\n/**\n * This signature of MockRender lets create a fixture based on string template.\n *\n * @see https://ng-mocks.sudo.eu/api/MockRender\n */\nexport function MockRender<MComponent = void>(\n  template: string,\n  params: undefined | null,\n  detectChangesOrOptions?: boolean | IMockRenderOptions,\n): MockedComponentFixture<MComponent, void>;\n\n/**\n * This signature of MockRender lets create a fixture with parameters to access a string based template.\n *\n * @see https://ng-mocks.sudo.eu/api/MockRender\n */\nexport function MockRender<MComponent = void, TComponent extends Record<keyof any, any> = Record<keyof any, any>>(\n  template: string,\n  params: TComponent,\n  detectChangesOrOptions?: boolean | IMockRenderOptions,\n): MockedComponentFixture<MComponent, TComponent>;\n\n/**\n * This signature of MockRender lets create a fixture with parameters to access a string based template.\n *\n * @see https://ng-mocks.sudo.eu/api/MockRender\n */\nexport function MockRender<MComponent, TComponent extends Record<keyof any, any> = Record<keyof any, any>>(\n  template: string,\n  params: TComponent,\n  detectChangesOrOptions?: boolean | IMockRenderOptions,\n): MockedComponentFixture<MComponent, TComponent>;\n\nexport function MockRender<MComponent, TComponent extends Record<keyof any, any>>(\n  template?: string | AnyDeclaration<MComponent>,\n  params?: TComponent,\n  flags: boolean | IMockRenderOptions = true,\n): any {\n  const tpl = arguments.length === 0 ? '' : template;\n  const bindings = params && typeof params === 'object' ? Object.keys(params) : params;\n  const options = typeof flags === 'boolean' ? { detectChanges: flags } : { ...flags };\n  const factory = (MockRenderFactory as any)(tpl, bindings, options);\n\n  return factory(params, options.detectChanges);\n}\n"],"names":["flags","mockRenderCacheSize","neverMockModule","neverMockProvidedFunction","neverMockToken","onMockBuilderMissingDependency","onMockInstanceRestoreNeed","onTestBedFlushNeed","dependencies","instance","property","value","enumerable","configurable","writable","getTestBedInjection","token","getInjection","testBed","getTestBed","inject","get","flatten","values","result","Array","isArray","push","mapKeys","set","forEach","_","mapValues","destination","add","mapEntries","key","extractDependencyArray","deps","flag","name","ngMetadataName","undefined","extractDependency","dep","extendClassicClass","base","child","index","glb","ngMocksParent","eval","ngMocksResult","MockMiddleware","prototype","extendClass","parameters","length","def","NG_MOCKS","InjectionToken","__ngMocksSkip","NG_MOCKS_TOUCHES","NG_MOCKS_OVERRIDES","NG_MOCKS_GUARDS","NG_MOCKS_RESOLVERS","NG_MOCKS_INTERCEPTORS","NG_MOCKS_ROOT_PROVIDERS","alias","required","skipName","param","split","map","v","trim","provide","__forward_ref__","window","g","badCharacters","RegExp","_desc","constructor","replace","provider","ngModule","directive","isNgType","declaration","type","decorators","offset","indexOf","isModuleCheck","ngType","isComponentCheck","isDirectiveCheck","isPipeCheck","isInjectableCheck","isNgDef","i","isModule","isComponent","isDirective","isPipe","isInjectable","isNgInjectionToken","isNgModuleDefWithProviders","globalMap","ngMocksUniverse","global","has","Map","builtDeclarations","builtProviders","cacheDeclarations","cacheProviders","config","configInstance","Set","touches","getOverrides","getDefaults","getConfigMock","defValue","getResolution","getBuildDeclaration","mode","replacement","hasBuildDeclaration","isExcludedDef","resolution","isProvidedDef","indexValue","encapsulation","__ngMocksProxy","descriptor","Object","defineProperty","override","style","correctInstance","applyOverrides","skipProps","getOwnPropertyNames","desc","getOwnPropertyDescriptor","hasOwnProperty","call","callbacks","overloads","stub","service","bindFrom","bindTo","mock","args","apply","this","prop","sourceDesc","sanitizerMethods","extraMethods","DomSanitizer","Sanitizer","method","getPrototypeOf","mockFunction","mockName","original","func","customMockFunction","val","setValue","newSetValue","newValue","handleItemKeys","handleItemGetGuards","section","guards","guard","handleSection","replaceWithMocks","cache","updated","callback","valueItem","handleArray","keys","resolve","resolveUpdated","resolver","handleItem","setPrototypeOf","ngMockshelperMockService","registerMockFunction","createClone","createMockFromPrototype","methods","properties","definePropertyDescriptor","extractMethodsFromPrototype","extractPropertiesFromPrototype","extractPropertyDescriptor","accessType","parseArgs","detectedMockName","createName","mockDef","generateMockDef","__ngMocks","__ngMocksSet","__ngMocksGet","clear","resolveProvider","useFactory","areEqualDefs","providerDiffers","defDiffers","a","b","anyDiffers","resolutions","changed","multi","change","parseProvider","toString","isSuitableProvider","useValue","interceptor","useExisting","useClass","excludeInterceptors","isPreconfiguredDependency","mockOf","__internal","isPreconfiguredUseExisting","existingMock","createFromResolution","createPredefinedMockProvider","createMockProvider","applyCallbackToken","init","overrides","Injector","injector","configGlobal","inst","applyCallback","normalizePrimitivesMap","handleProvider","mockProvider","check","normalizePrimitives","createValueProvider","createClassProvider","isNeverMockFunction","isNeverMockToken","existing","applyMissingClassProperties","createFactoryProvider","__annotations__","__parameters__","isAngularClass","proto","match","cls","clsCode","codePointAt","regEx","guessClass","mockVariableMap","prefix","mockService","createMock","mockVariable","MockService","pushDecorator","decorator","deleteIndex","splice","getAllKeys","props","parsePropMetadataParserFactoryProp","bindingPropertyName","normalizedDef","defName","defAlias","defRequired","unshift","parsePropMetadataParserInput","parsePropMetadataParserOutput","parsePropMetadataParserFactoryQueryChild","isViewQuery","queries","selector","read","static","parsePropMetadataParserContentChild","parsePropMetadataParserViewChild","parsePropMetadataParserFactoryQueryChildren","descendants","emitDistinctChangesOnly","parsePropMetadataMap","ContentChild","ContentChildren","HostBinding","hostPropertyName","host","hostBindings","HostListener","eventName","hostListeners","Input","Output","ViewChild","ViewChildren","parsePropDecoratorsParserFactoryProp","parsePropDecoratorsParserInput","parsePropDecoratorsParserOutput","parsePropDecoratorsParserFactoryQuery","parsePropDecoratorsParserContent","parsePropDecoratorsParserView","parsePropDecoratorsMap","buildDeclaration","inputs","input","outputs","output","reflectionCapabilities","parse","__ngMocksDeclarations","parent","parentDeclarations","attributes","propDecorators","createDeclarations","attributeName","parseParameters","annotation","parseAnnotations","parseDecorators","parsePropDecorators","__prop__metadata__","parsePropMetadata","Directive","Component","y","x","module","exports","__WEBPACK_EXTERNAL_MODULE__angular_core_bcead0df__","ChangeDetectorRef","ComponentFactoryResolver","DebugElement","ElementRef","EventEmitter","NgModule","Optional","Pipe","QueryList","Self","TemplateRef","ViewContainerRef","__webpack_require__","d","__WEBPACK_EXTERNAL_MODULE__angular_core_testing_89899de6__","TestBed","__webpack_module_cache__","moduleId","cachedModule","__webpack_modules__","definition","o","globalThis","Function","e","obj","r","Symbol","toStringTag","stackRoot","id","level","stack","listenersPush","listenersPop","current","stackPop","state","pop","stackPush","subscribePop","subscribePush","unsubscribePop","unsubscribePush","providers","mocks","getNgType","isStandalone","standalone","merge","MockBuilderStash","data","backup","restore","providedIn","ngInjectableDef","_isMockFunction","Error","join","jest","arg","__WEBPACK_EXTERNAL_MODULE__angular_forms_df10eade__","AbstractControl","DefaultValueAccessor","FormControl","FormControlDirective","NG_ASYNC_VALIDATORS","NG_VALIDATORS","NG_VALUE_ACCESSOR","NgControl","NgModel","applyProxy","proxy","storage","MockControlValueAccessorProxy","target","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","writeValue","MockValidatorProxy","registerOnValidatorChange","validate","control","MockAsyncValidatorProxy","Promise","installValidator","validators","validator","__ngMocksCtor","__ngMocksConfig","isValidator","Mock","ngControl","queryScanKeys","valueAccessor","setControlValueAccessor","setValueAccessor","isControlValueAccessor","installValueAccessor","_rawValidators","_rawAsyncValidators","applyNgValueAccessor","mockOutputs","applyOutputs","applyPrototype","applyMethods","applyProps","LegacyControlValueAccessor","__simulateChange","__simulateTouch","__simulateValidatorChange","source","configInput","isInternalKey","cloneVcrQuery","query","processProvider","sourceType","mockType","processTokens","ownUseExisting","processOwnUseExisting","meta","params","hasResolver","options","exportAs","imports","skipExports","hostDirectives","viewProviders","buildConfig","exclude","final","scanKeys","generateFinalQueries","funcName","getType","isMockNgDef","component","fixtures","_activeFixtures","debugElement","__ngMocksResolutions","cacheFlag","hasNgMocksDepsResolution","viewChildArgs","viewChildTemplate","isTemplateRefQuery","parts","contentChildSelector","indices","mixRenderApplyContext","view","context","contextKey","markForCheck","ComponentMockBase","changeDetector","cdr","super","$implicit","variables","vcr","detectChanges","mixRenderPrepareVcr","templates","toArray","views","templateRef","createEmbeddedView","mixRenderHandleViews","viewContainer","destroy","viewIndex","move","mixRenderReorderViews","mixHideHandler","mixHide","ngAfterContentInit","__rendered","render","block","__render","decorateClass","template","MockComponents","components","MockComponent","DirectiveMockBase","element","__ngMocksInstall","ngOnInit","MockDirectives","directives","MockDirective","MockPipes","pipes","pipe","MockPipe","getMockClass","transformValue","transform","preProcessFlags","toggleSkipMockFlag","isRootModule","flagMock","flagNever","flagKeep","flagReplace","postProcessFlags","extractModuleAndProviders","ngModuleProviders","getExistingMockModule","detectMockModule","mockModule","ngModuleDef","getMockProviders","generateReturn","mockModuleProviders","MockModule","processDefMap","createResolveExisting","detectedDef","createResolveExcluded","processDef","createResolveWithProviders","createResolve","createResolveProvider","exported","flatToExisting","filter","item","resolveDefForExport","correctExports","moduleConfig","export","exportAll","skipAddExports","mockModuleDef","configureProcessMetaKeys","cachePipe","skipMarkProviders","processMeta","declarations","addExports","skipMock","replaceDef","EntryComponentsModule","componentFactoryResolver","originCFR","resolveComponentFactory","IvyModule","__WEBPACK_EXTERNAL_MODULE__angular_common_d12e0fe1__","DOCUMENT","skipByResolution","skipResolution","skipSystem","bucket","touched","handleDef","defProviders","skipDef","extendedDef","loModule","loProviders","funcExtractDeps","field","precise","createInstance","normaliseModule","generateProviderValue","defaultMock","MockBuilderPromise","configDefault","beforeCC","configDef","excludeDef","keepDef","providerDef","stash","beforeCompileComponents","build","defStack","combineParams","forgotten","onRoot","dependency","globalFlags","errorMessage","console","warn","shallow","k","deleteTouch","loDef","buckets","concat","size","parameter","entryComponents","entryModule","patchedOriginal","MockBuilder","catch","reject","then","wipe","setConfigDef","finally","keep","a1","a2","defaultMockValue","setDefValue","fulfill","promise","compileComponents","delete","prototypeKeys","sourceKeys","objectsDiffer","compare","areEqualProviderDefs","thisDef","prototypeDef","prototypeDefs","thisDefs","MockBuilderPerformance","equalsTo","clone","cloneConfig","keepDeclaration","itsModuleToMock","nativeElement","nativeNode","findDebugElement","el","defaultNotFoundValue","sel","notFoundValue","__WEBPACK_EXTERNAL_MODULE__angular_platform_browser_bc6fa964__","By","getSourceOfMock","node","nodeName","_tNode","elDef","defaultInjector","getScanViewRefRootNodes","getVcr","vrIndex","vr","rnIndex","rootNodes","childNodes","rootNode","scanViewRef","isDirect","children","childNode","childNodeParent","start","end","expected","currentParent","childElDef","nestedCheck","includeTextNode","isValidValue","getMeta","publicProviders","requiredAttributes","bindings","binding","nonMinifiedName","nodeIndex","collectAttributesClassic","expectedAttributes","attr","collectAttributesIvy","attrs","step","selectors","providerTokens","collectSelectors","attribute","attrIndex","attrProp","_lView","detectInIvy","nodes","detectInClassic","references","regExp","isCrawlByAttribute","isCrawlByAttributeValue","isCrawlById","slice","isCrawlByTagName","isCrawlByDeclaration","isMockControlValueAccessor","innerHTML","preventBubble","eventCtor","Event","event","CustomEvent","initParams","bubbles","cancelable","eventObj","document","createEvent","initCustomEvent","keyMap","alt","altKey","code","location","which","arrowdown","arrowleft","arrowright","arrowup","backspace","ctrlKey","enter","esc","metaKey","shift","shiftKey","space","tab","f","getCode","char","toUpperCase","dot","eventPayload","Math","max","payload","keyData","applyPayload","disabled","toEventObj","dispatchEvent","message","formControlDirective","form","ngModel","queryAll","detectGatherFlag","gather","parentNode","isNotObject","shouldBeScanned","scanned","scan","normalize","gatherDefault","nodesLength","bindingStartIndex","detectContext","__ngContext__","rootView","detectContextByIndex","parentInjector","getParentWithInjector","parentInstance","_debugContext","lView","handlePrimitives","html","outer","format","innerOuter","nodeValue","textContent","wholeText","outerHTML","getElementValue","calls","defaultMethods","factory","beforeEach","afterEach","propName","error","hooks","after","before","configureTestingModule","moduleDef","resetTestingModule","ngMocksFasterInstalled","_instantiated","_moduleFactory","_testModuleRef","idAdd","bulletStack","idRemove","activeFixtures","active","ngMocksStackId","resetFixtures","root","iterator","action","skip","createMetaHandler","optional","typeMap","handleDeclaration","resolveMap","skipDestruction","handleModuleWithProviders","toMock","handleDestructuring","resolveHandler","attrMatches","label","attrDef","detectAttribute","isRightTemplate","localVcr","localValue","isExpectedTemplate","findDeep","entryPoint","__template","__vcr","handleDirective","scanValue","scanVcr","getValVcr","detector","limit","flagNames","autoSpy","jasmine","createSpy","methodName","update","emit","handleKnown","listeners","some","listener","hasListener","triggerInput","click","crawl","defaultConfig","faster","idAll","idEach","beforeAll","afterAll","find","findAll","findInstance","fixture","findInstances","elements","findTemplateRef","findTemplateRefs","flushTestBed","formatHtml","formatText","globalExclude","recursively","globalKeep","globalMock","globalReplace","fail","globalWipe","guts","protoKeep","protoMock","protoExclude","generateDataWithUniverse","generateData","createMeta","hide","tpl","elementRef","ignoreOnConsole","reset","reveal","revealAll","stubMember","throwOnConsole","touch","markAsTouched","triggerTouch","trigger","ngMocks","defaultValue","MockProviders","MockProvider","applyOverride","generateTouches","local","__ngMocksTouches","applyPlatformOverrideDef","applyPlatformOverridesBasedOnProvidedIn","useMockBuilder","hasMocks","mockBuilder","finalModuleDef","builder","isMock","knownTouches","_providers","_compiler","defineTouches","applyPlatformOverridesBasedOnDefaults","applyPlatformOverrides","ngMocksOverrides","applyNgMocksOverrides","patchVcrInstance","vcrInstance","createComponent","patchedCreateComponent","createComponentArgs","installInjector","__ngMocksInjector","injectorGet","argsGet","isMockedNgDefOf","ngMocksOverridesInstalled","ngElementId","__NG_ELEMENT_ID__","ngElementIdArgs","viewContainerInstall","injectorCreate","argsCreate","install","getMock","getMockedNgDefOf","isMockOf","isMockValidator","currentStack","mockInstance","universeConfig","parseMockInstanceArgs","accessor","checkReset","checkCollect","showError","mockInstanceConfig","mockInstances","MockInstance","MockReset","MockDeclarations","MockDeclaration","remember","scope","generateTemplateAttrWithParams","generateTemplateAttrWrap","generateTemplateAttr","mockTemplate","generateWrapperComponent","MockRenderComponent","next","ngContext","caches","getCache","cacheKey","ctor","isValid","checkCache","hostDirective","dir","MockRenderDirective","generateWrapperDirective","createPropertyGet","reader","handler","createPropertySet","extractAllKeys","extra","force","exists","fields","test","__ngMocksStandalone","registerTemplateMiddleware","fixtureMessage","generateFactory","componentCtor","configureTestBed","componentInstance","point","tryWhen","renderDeclaration","HTMLElement","renderInjection","_declarations","handleFixtureError","generateFactoryInstall","MockRenderFactory","MockRender","arguments"],"sourceRoot":""}