import { Component, ElementRef, EventEmitter, Input, Output, } from '@angular/core';
import { DatetimeAdapter } from '../adapter/datetime-adapter';
import { MatDatetimepickerFilterType } from './datetimepicker-filtertype';
import * as i0 from "@angular/core";
import * as i1 from "../adapter/datetime-adapter";
import * as i2 from "@angular/common";
export const CLOCK_RADIUS = 50;
export const CLOCK_INNER_RADIUS = 27.5;
export const CLOCK_OUTER_RADIUS = 41.25;
export const CLOCK_TICK_RADIUS = 7.0833;
/**
 * A clock that is used as part of the datepicker.
 * @docs-private
 */
export class MatDatetimepickerClockComponent {
    constructor(_element, _adapter) {
        this._element = _element;
        this._adapter = _adapter;
        this._userSelection = new EventEmitter();
        this.interval = 1;
        this.twelvehour = false;
        /** Emits when the currently selected date changes. */
        this.selectedChange = new EventEmitter();
        this.activeDateChange = new EventEmitter();
        /** Hours and Minutes representing the clock view. */
        this._hours = [];
        this._minutes = [];
        /** Whether the clock is in hour view. */
        this._hourView = true;
        this._timeChanged = false;
        this.mouseMoveListener = (event) => {
            this._handleMousemove(event);
        };
        this.mouseUpListener = () => {
            this._handleMouseup();
        };
    }
    /**
     * The date to display in this clock view.
     */
    get activeDate() {
        return this._activeDate;
    }
    set activeDate(value) {
        let oldActiveDate = this._activeDate;
        this._activeDate = this._adapter.clampDate(value, this.minDate, this.maxDate);
        if (!this._adapter.sameMinute(oldActiveDate, this._activeDate)) {
            this._init();
        }
    }
    /** The currently selected date. */
    get selected() {
        return this._selected;
    }
    set selected(value) {
        this._selected = this._adapter.getValidDateOrNull(this._adapter.deserialize(value));
        if (this._selected) {
            this.activeDate = this._selected;
        }
    }
    /** The minimum selectable date. */
    get minDate() {
        return this._minDate;
    }
    set minDate(value) {
        this._minDate = this._adapter.getValidDateOrNull(this._adapter.deserialize(value));
    }
    /** The maximum selectable date. */
    get maxDate() {
        return this._maxDate;
    }
    set maxDate(value) {
        this._maxDate = this._adapter.getValidDateOrNull(this._adapter.deserialize(value));
    }
    /** Whether the clock should be started in hour or minute view. */
    set startView(value) {
        this._hourView = value != 'minute';
    }
    get _hand() {
        let hour = this._adapter.getHour(this.activeDate);
        if (!!this.twelvehour) {
            if (hour === 0) {
                hour = 24;
            }
            this._selectedHour = hour > 12 ? hour - 12 : hour;
        }
        else {
            this._selectedHour = hour;
        }
        this._selectedMinute = this._adapter.getMinute(this.activeDate);
        let deg = 0;
        let radius = CLOCK_OUTER_RADIUS;
        if (this._hourView) {
            let outer = this._selectedHour > 0 && this._selectedHour < 13;
            radius = outer ? CLOCK_OUTER_RADIUS : CLOCK_INNER_RADIUS;
            if (this.twelvehour) {
                radius = CLOCK_OUTER_RADIUS;
            }
            deg = Math.round(this._selectedHour * (360 / (24 / 2)));
        }
        else {
            deg = Math.round(this._selectedMinute * (360 / 60));
        }
        return {
            transform: `rotate(${deg}deg)`,
            height: `${radius}%`,
            'margin-top': `${50 - radius}%`,
        };
    }
    ngAfterContentInit() {
        this.activeDate = this._activeDate || this._adapter.today();
        this._init();
    }
    /** Handles mousedown events on the clock body. */
    _handleMousedown(event) {
        this._timeChanged = false;
        this.setTime(event);
        document.addEventListener('mousemove', this.mouseMoveListener);
        document.addEventListener('touchmove', this.mouseMoveListener);
        document.addEventListener('mouseup', this.mouseUpListener);
        document.addEventListener('touchend', this.mouseUpListener);
    }
    _handleMousemove(event) {
        event.preventDefault();
        this.setTime(event);
    }
    _handleMouseup() {
        document.removeEventListener('mousemove', this.mouseMoveListener);
        document.removeEventListener('touchmove', this.mouseMoveListener);
        document.removeEventListener('mouseup', this.mouseUpListener);
        document.removeEventListener('touchend', this.mouseUpListener);
        if (this._timeChanged) {
            this.selectedChange.emit(this.activeDate);
            if (!this._hourView) {
                this._userSelection.emit();
            }
        }
    }
    /** Initializes this clock view. */
    _init() {
        this._hours.length = 0;
        this._minutes.length = 0;
        let hourNames = this._adapter.getHourNames();
        let minuteNames = this._adapter.getMinuteNames();
        if (this.twelvehour) {
            for (let i = 1; i < hourNames.length / 2 + 1; i++) {
                let radian = (i / 6) * Math.PI;
                let radius = CLOCK_OUTER_RADIUS;
                const date = this._adapter.createDatetime(this._adapter.getYear(this.activeDate), this._adapter.getMonth(this.activeDate), this._adapter.getDate(this.activeDate), i + 1, 0);
                let enabled = (!this.minDate ||
                    this._adapter.compareDatetime(date, this.minDate) >= 0) &&
                    (!this.maxDate ||
                        this._adapter.compareDatetime(date, this.maxDate) <= 0);
                this._hours.push({
                    value: i,
                    displayValue: i === 0 ? '00' : hourNames[i],
                    enabled: enabled,
                    top: CLOCK_RADIUS - Math.cos(radian) * radius - CLOCK_TICK_RADIUS,
                    left: CLOCK_RADIUS + Math.sin(radian) * radius - CLOCK_TICK_RADIUS,
                });
            }
        }
        else {
            for (let i = 0; i < hourNames.length; i++) {
                let radian = (i / 6) * Math.PI;
                let outer = i > 0 && i < 13, radius = outer ? CLOCK_OUTER_RADIUS : CLOCK_INNER_RADIUS;
                const date = this._adapter.createDatetime(this._adapter.getYear(this.activeDate), this._adapter.getMonth(this.activeDate), this._adapter.getDate(this.activeDate), i, 0);
                let enabled = (!this.minDate ||
                    this._adapter.compareDatetime(date, this.minDate, false) >= 0) &&
                    (!this.maxDate ||
                        this._adapter.compareDatetime(date, this.maxDate, false) <= 0) &&
                    (!this.dateFilter ||
                        this.dateFilter(date, MatDatetimepickerFilterType.HOUR));
                this._hours.push({
                    value: i,
                    displayValue: i === 0 ? '00' : hourNames[i],
                    enabled: enabled,
                    top: CLOCK_RADIUS - Math.cos(radian) * radius - CLOCK_TICK_RADIUS,
                    left: CLOCK_RADIUS + Math.sin(radian) * radius - CLOCK_TICK_RADIUS,
                    fontSize: i > 0 && i < 13 ? '' : '80%',
                });
            }
        }
        for (let i = 0; i < minuteNames.length; i += 5) {
            let radian = (i / 30) * Math.PI;
            const date = this._adapter.createDatetime(this._adapter.getYear(this.activeDate), this._adapter.getMonth(this.activeDate), this._adapter.getDate(this.activeDate), this._adapter.getHour(this.activeDate), i);
            let enabled = (!this.minDate ||
                this._adapter.compareDatetime(date, this.minDate) >= 0) &&
                (!this.maxDate ||
                    this._adapter.compareDatetime(date, this.maxDate) <= 0) &&
                (!this.dateFilter ||
                    this.dateFilter(date, MatDatetimepickerFilterType.MINUTE));
            this._minutes.push({
                value: i,
                displayValue: i === 0 ? '00' : minuteNames[i],
                enabled: enabled,
                top: CLOCK_RADIUS -
                    Math.cos(radian) * CLOCK_OUTER_RADIUS -
                    CLOCK_TICK_RADIUS,
                left: CLOCK_RADIUS +
                    Math.sin(radian) * CLOCK_OUTER_RADIUS -
                    CLOCK_TICK_RADIUS,
            });
        }
    }
    /**
     * Set Time
     * @param event
     */
    setTime(event) {
        let trigger = this._element.nativeElement;
        let triggerRect = trigger.getBoundingClientRect();
        let width = trigger.offsetWidth;
        let height = trigger.offsetHeight;
        let pageX = event.pageX !== undefined ? event.pageX : event.touches[0].pageX;
        let pageY = event.pageY !== undefined ? event.pageY : event.touches[0].pageY;
        let x = width / 2 - (pageX - triggerRect.left - window.pageXOffset);
        let y = height / 2 - (pageY - triggerRect.top - window.pageYOffset);
        let radian = Math.atan2(-x, y);
        let unit = Math.PI / (this._hourView ? 6 : this.interval ? 30 / this.interval : 30);
        let z = Math.sqrt(x * x + y * y);
        let outer = this._hourView &&
            z >
                (width * (CLOCK_OUTER_RADIUS / 100) +
                    width * (CLOCK_INNER_RADIUS / 100)) /
                    2;
        if (radian < 0) {
            radian = Math.PI * 2 + radian;
        }
        let value = Math.round(radian / unit);
        let date;
        if (this._hourView) {
            if (this.twelvehour) {
                value = value === 0 ? 12 : value;
            }
            else {
                if (value === 12) {
                    value = 0;
                }
                value = outer
                    ? value === 0
                        ? 12
                        : value
                    : value === 0
                        ? 0
                        : value + 12;
            }
            // Don't close the hours view if an invalid hour is clicked.
            if (!this._hours.find((h) => h?.['value'] === value)?.['enabled']) {
                return;
            }
            date = this._adapter.createDatetime(this._adapter.getYear(this.activeDate), this._adapter.getMonth(this.activeDate), this._adapter.getDate(this.activeDate), value, this._adapter.getMinute(this.activeDate));
        }
        else {
            if (this.interval) {
                value *= this.interval;
            }
            if (value === 60) {
                value = 0;
            }
            // Don't close the minutes view if an invalid minute is clicked.
            if (!this._minutes.find((m) => m?.['value'] === value)?.['enabled']) {
                return;
            }
            date = this._adapter.createDatetime(this._adapter.getYear(this.activeDate), this._adapter.getMonth(this.activeDate), this._adapter.getDate(this.activeDate), this._adapter.getHour(this.activeDate), value);
        }
        this._timeChanged = true;
        this.activeDate = date;
        this.activeDateChange.emit(this.activeDate);
    }
}
/** @nocollapse */ MatDatetimepickerClockComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: MatDatetimepickerClockComponent, deps: [{ token: i0.ElementRef }, { token: i1.DatetimeAdapter }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ MatDatetimepickerClockComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.0", type: MatDatetimepickerClockComponent, selector: "mat-datetimepicker-clock", inputs: { dateFilter: "dateFilter", interval: "interval", twelvehour: "twelvehour", activeDate: "activeDate", selected: "selected", minDate: "minDate", maxDate: "maxDate", startView: "startView" }, outputs: { _userSelection: "_userSelection", selectedChange: "selectedChange", activeDateChange: "activeDateChange" }, host: { attributes: { "role": "clock" }, listeners: { "mousedown": "_handleMousedown($event)" } }, ngImport: i0, template: "<div class=\"mat-datetimepicker-clock\">\r\n  <div class=\"mat-datetimepicker-clock-center\"></div>\r\n  <div [ngStyle]=\"_hand\" class=\"mat-datetimepicker-clock-hand\"></div>\r\n  <div [class.active]=\"_hourView\" class=\"mat-datetimepicker-clock-hours\">\r\n    <div\r\n      *ngFor=\"let item of _hours\"\r\n      [class.mat-datetimepicker-clock-cell-disabled]=\"!item.enabled\"\r\n      [class.mat-datetimepicker-clock-cell-selected]=\"_selectedHour === item.value\"\r\n      [style.fontSize]=\"item.fontSize\"\r\n      [style.left]=\"item.left + '%'\"\r\n      [style.top]=\"item.top + '%'\"\r\n      class=\"mat-datetimepicker-clock-cell\"\r\n    >\r\n      {{ item.displayValue }}\r\n    </div>\r\n  </div>\r\n  <div [class.active]=\"!_hourView\" class=\"mat-datetimepicker-clock-minutes\">\r\n    <div\r\n      *ngFor=\"let item of _minutes\"\r\n      [class.mat-datetimepicker-clock-cell-disabled]=\"!item.enabled\"\r\n      [class.mat-datetimepicker-clock-cell-selected]=\"_selectedMinute === item.value\"\r\n      [style.left]=\"item.left + '%'\"\r\n      [style.top]=\"item.top + '%'\"\r\n      class=\"mat-datetimepicker-clock-cell\"\r\n    >\r\n      {{ item.displayValue }}\r\n    </div>\r\n  </div>\r\n</div>\r\n", styles: [":host{position:relative;display:block;min-width:224px;margin:8px;font-size:14px;box-sizing:border-box;-webkit-user-select:none;user-select:none}.mat-datetimepicker-clock{position:relative;width:100%;height:0;padding-top:100%;background-color:#e0e0e0;border-radius:50%}.mat-datetimepicker-clock-center{position:absolute;top:50%;left:50%;width:2%;height:2%;margin:-1%;border-radius:50%}.mat-datetimepicker-clock-hand{position:absolute;top:0;right:0;bottom:0;left:0;width:1px;margin:0 auto;transform-origin:bottom}.mat-datetimepicker-clock-hand:before{content:\"\";position:absolute;top:-4px;left:-4px;width:8px;height:8px;border-radius:50%}.mat-datetimepicker-clock-hours,.mat-datetimepicker-clock-minutes{position:absolute;top:0;left:0;width:100%;height:100%;opacity:0;visibility:hidden;transition:.35s;transform:scale(1.2)}.mat-datetimepicker-clock-hours.active,.mat-datetimepicker-clock-minutes.active{opacity:1;visibility:visible;transform:scale(1)}.mat-datetimepicker-clock-minutes{transform:scale(.8)}.mat-datetimepicker-clock-cell{position:absolute;display:flex;width:14.1666%;height:14.1666%;color:#000000de;justify-content:center;box-sizing:border-box;border-radius:50%;align-items:center;cursor:pointer}.mat-datetimepicker-clock-cell:not(.mat-datetimepicker-clock-cell-selected):not(.mat-datetimepicker-clock-cell-disabled):hover{background-color:#0000001a}.mat-datetimepicker-clock-cell.mat-datetimepicker-clock-cell-disabled{color:#00000061;pointer-events:none}.mat-datetimepicker-clock-cell.mat-datetimepicker-clock-cell-selected{color:#fff}\n"], dependencies: [{ kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: MatDatetimepickerClockComponent, decorators: [{
            type: Component,
            args: [{ selector: 'mat-datetimepicker-clock', host: {
                        role: 'clock',
                        '(mousedown)': '_handleMousedown($event)',
                    }, template: "<div class=\"mat-datetimepicker-clock\">\r\n  <div class=\"mat-datetimepicker-clock-center\"></div>\r\n  <div [ngStyle]=\"_hand\" class=\"mat-datetimepicker-clock-hand\"></div>\r\n  <div [class.active]=\"_hourView\" class=\"mat-datetimepicker-clock-hours\">\r\n    <div\r\n      *ngFor=\"let item of _hours\"\r\n      [class.mat-datetimepicker-clock-cell-disabled]=\"!item.enabled\"\r\n      [class.mat-datetimepicker-clock-cell-selected]=\"_selectedHour === item.value\"\r\n      [style.fontSize]=\"item.fontSize\"\r\n      [style.left]=\"item.left + '%'\"\r\n      [style.top]=\"item.top + '%'\"\r\n      class=\"mat-datetimepicker-clock-cell\"\r\n    >\r\n      {{ item.displayValue }}\r\n    </div>\r\n  </div>\r\n  <div [class.active]=\"!_hourView\" class=\"mat-datetimepicker-clock-minutes\">\r\n    <div\r\n      *ngFor=\"let item of _minutes\"\r\n      [class.mat-datetimepicker-clock-cell-disabled]=\"!item.enabled\"\r\n      [class.mat-datetimepicker-clock-cell-selected]=\"_selectedMinute === item.value\"\r\n      [style.left]=\"item.left + '%'\"\r\n      [style.top]=\"item.top + '%'\"\r\n      class=\"mat-datetimepicker-clock-cell\"\r\n    >\r\n      {{ item.displayValue }}\r\n    </div>\r\n  </div>\r\n</div>\r\n", styles: [":host{position:relative;display:block;min-width:224px;margin:8px;font-size:14px;box-sizing:border-box;-webkit-user-select:none;user-select:none}.mat-datetimepicker-clock{position:relative;width:100%;height:0;padding-top:100%;background-color:#e0e0e0;border-radius:50%}.mat-datetimepicker-clock-center{position:absolute;top:50%;left:50%;width:2%;height:2%;margin:-1%;border-radius:50%}.mat-datetimepicker-clock-hand{position:absolute;top:0;right:0;bottom:0;left:0;width:1px;margin:0 auto;transform-origin:bottom}.mat-datetimepicker-clock-hand:before{content:\"\";position:absolute;top:-4px;left:-4px;width:8px;height:8px;border-radius:50%}.mat-datetimepicker-clock-hours,.mat-datetimepicker-clock-minutes{position:absolute;top:0;left:0;width:100%;height:100%;opacity:0;visibility:hidden;transition:.35s;transform:scale(1.2)}.mat-datetimepicker-clock-hours.active,.mat-datetimepicker-clock-minutes.active{opacity:1;visibility:visible;transform:scale(1)}.mat-datetimepicker-clock-minutes{transform:scale(.8)}.mat-datetimepicker-clock-cell{position:absolute;display:flex;width:14.1666%;height:14.1666%;color:#000000de;justify-content:center;box-sizing:border-box;border-radius:50%;align-items:center;cursor:pointer}.mat-datetimepicker-clock-cell:not(.mat-datetimepicker-clock-cell-selected):not(.mat-datetimepicker-clock-cell-disabled):hover{background-color:#0000001a}.mat-datetimepicker-clock-cell.mat-datetimepicker-clock-cell-disabled{color:#00000061;pointer-events:none}.mat-datetimepicker-clock-cell.mat-datetimepicker-clock-cell-selected{color:#fff}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.DatetimeAdapter }]; }, propDecorators: { _userSelection: [{
                type: Output
            }], dateFilter: [{
                type: Input
            }], interval: [{
                type: Input
            }], twelvehour: [{
                type: Input
            }], selectedChange: [{
                type: Output
            }], activeDateChange: [{
                type: Output
            }], activeDate: [{
                type: Input
            }], selected: [{
                type: Input
            }], minDate: [{
                type: Input
            }], maxDate: [{
                type: Input
            }], startView: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,