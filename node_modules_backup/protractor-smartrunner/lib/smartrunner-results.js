"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SmartRunnerResults = void 0;
const path_1 = require("path");
const fs_helpers_1 = require("./fs-helpers");
const helpers_1 = require("./helpers");
const fs = require('fs-extra');
const filenamify = require('filenamify');
class SmartRunnerResults {
    constructor(outputDirectory, repoHash, logger) {
        this.logger = logger;
        try {
            this.affectedSuites = {};
            this.smartRunDir = helpers_1.getResultsOutputPath(outputDirectory, repoHash);
            fs.ensureDirSync(this.smartRunDir);
        }
        catch (error) {
            this.logger.error(error.message);
            process.exit(1);
        }
    }
    load() {
        this.results = fs_helpers_1.loadResults(this.smartRunDir);
    }
    set(suiteName, testName, passed, duration) {
        var _a, _b, _c;
        if (!this.results[suiteName]) {
            this.results[suiteName] = {};
        }
        this.results[suiteName][testName] = {
            retries: ((_c = (_b = (_a = this.results) === null || _a === void 0 ? void 0 : _a[suiteName]) === null || _b === void 0 ? void 0 : _b[testName]) === null || _c === void 0 ? void 0 : _c.retries) + 1 || 0,
            passed,
            duration
        };
        this.affectedSuites[suiteName] = true;
    }
    get(suiteName, testName) {
        return this.results[suiteName] && this.results[suiteName][testName] || {};
    }
    save() {
        const updatedSuiteNames = Object.keys(this.affectedSuites);
        const suites = Object.keys(this.results);
        for (const suite of suites) {
            if (updatedSuiteNames.indexOf(suite) !== -1) {
                this.logger.info(`ℹ️  Suite (${suite}) was affected by this thread, writing to filesystem.`);
                const fileName = path_1.resolve(this.smartRunDir, filenamify(`./${suite}.json`));
                fs.outputJsonSync(fileName, { [suite]: this.results[suite] }, { spaces: 4 });
            }
        }
    }
}
exports.SmartRunnerResults = SmartRunnerResults;
