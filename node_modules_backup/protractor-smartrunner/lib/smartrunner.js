"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SmartRunner = void 0;
const smartrunner_results_1 = require("./smartrunner-results");
const smartrunner_reporter_1 = require("./smartrunner-reporter");
const helpers_1 = require("./helpers");
class SmartRunner {
    constructor(options, logger) {
        this.options = options;
        this.logger = logger;
    }
    onPrepare() {
        this.results = new smartrunner_results_1.SmartRunnerResults(this.options.outputDirectory, this.options.repoHash, this.logger);
        this.results.load();
        this.setupJasmine();
    }
    setupJasmine() {
        const cliGrepped = helpers_1.isCliGrepped();
        jasmine.getEnv().addReporter(new smartrunner_reporter_1.SmartRunnerReporter(this.results));
        if (!cliGrepped) {
            const oldSpecFilter = jasmine.getEnv().specFilter;
            const exclusions = helpers_1.getExclusionGrep(this.options.exclusionPath);
            jasmine.getEnv().specFilter = (spec) => {
                const testName = spec.getResult().description;
                const suiteName = spec.getFullName().replace(testName, '').trim();
                const testPassedInPreviousRun = this.results.get(suiteName, testName);
                if (testPassedInPreviousRun.passed) {
                    this.logger.info(`${this.options.passedMessagePrefix} ${suiteName} ${testName}`);
                }
                if (exclusions.length && spec.getFullName().match(new RegExp(exclusions)) != null) {
                    this.logger.info(`${this.options.excludedMessagePrefix} ${suiteName} ${testName}`);
                }
                return !testPassedInPreviousRun.passed && oldSpecFilter(spec);
            };
        }
        else {
            this.logger.warn(`Grep value has been passed as cli parameter, ignoring previous protractor smartrunner results (if exists).`);
        }
    }
}
exports.SmartRunner = SmartRunner;
