{"version":3,"file":"nodeSecurityMarks.api.js","sourceRoot":"","sources":["nodeSecurityMarks.api.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;GAeG;;AAEH,OAAO,EAAE,OAAO,EAAE,MAAM,YAAY,CAAC;AACrC,OAAO,EAAE,iBAAiB,EAAE,MAAM,iBAAiB,CAAC;AAEpD,OAAO,EAAE,kBAAkB,EAAE,MAAM,6BAA6B,CAAC;AAKjE;IAA0C,wCAAO;IAAjD;;IAqEA,CAAC;IA9DG,wDAAyB,GAAzB,UAA0B,MAAc,EAAE,QAAqC;QAC3E,iBAAiB,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QACpC,iBAAiB,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;QAExC,IAAI,QAAQ,GAAG,QAAQ,CAAC;QACxB,IAAI,UAAU,GAAG;YACb,MAAM,EAAE,MAAM;SACjB,CAAC;QACF,IAAI,WAAW,GAAG,EAAE,CAAC;QACrB,IAAI,YAAY,GAAG,EAAE,CAAC;QACtB,IAAI,UAAU,GAAG,EAAE,CAAC;QACpB,IAAI,YAAY,GAAG,CAAC,kBAAkB,CAAC,CAAC;QACxC,IAAI,OAAO,GAAG,CAAC,kBAAkB,CAAC,CAAC;QAEnC,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CACzB,wCAAwC,EACxC,MAAM,EACN,UAAU,EACV,WAAW,EACX,YAAY,EACZ,UAAU,EACV,QAAQ,EACR,YAAY,EACZ,OAAO,EACP,kBAAkB,CACrB,CAAC;IACN,CAAC;IAQA,qDAAsB,GAAtB,UAAuB,MAAc,EAAE,IAAU;QAC9C,iBAAiB,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QAEpC,IAAI,QAAQ,GAAG,IAAI,CAAC;QACpB,IAAI,UAAU,GAAG;YACb,MAAM,EAAE,MAAM;SACjB,CAAC;QACF,IAAI,WAAW,GAAG;YACd,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC;SACvB,CAAC;QACF,IAAI,YAAY,GAAG,EAAE,CAAC;QACtB,IAAI,UAAU,GAAG,EAAE,CAAC;QACpB,IAAI,YAAY,GAAG,CAAC,kBAAkB,CAAC,CAAC;QACxC,IAAI,OAAO,GAAG,CAAC,kBAAkB,CAAC,CAAC;QAEnC,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CACzB,wCAAwC,EACxC,KAAK,EACL,UAAU,EACV,WAAW,EACX,YAAY,EACZ,UAAU,EACV,QAAQ,EACR,YAAY,EACZ,OAAO,EACP,kBAAkB,CACrB,CAAC;IACN,CAAC;IACL,2BAAC;AAAD,CAAC,AArED,CAA0C,OAAO,GAqEhD","sourcesContent":["/*!\n * @license\n * Copyright Â© 2005-2023 Hyland Software, Inc. and its affiliates. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BaseApi } from './base.api';\nimport { throwIfNotDefined } from '../../../assert';\nimport { NodeSecurityMarkBody } from '../model/nodeSecurityMarkBody';\nimport { SecurityMarkPaging } from '../model/securityMarkPaging';\n\n/**\n * @module NodeSecurityMarksApi\n */\nexport class NodeSecurityMarksApi extends BaseApi {\n    /**\n     * Add/Remove security mark on a node\n     * @param nodeId The key for the node id.\n     * @param dataBody Array of NodeSecurityMarkBody.\n     * @return Promise<SecurityMarkPaging>\n     */\n    manageSecurityMarksOnNode(nodeId: string, dataBody: Array<NodeSecurityMarkBody>): Promise<SecurityMarkPaging> {\n        throwIfNotDefined(nodeId, 'nodeId');\n        throwIfNotDefined(dataBody, 'dataBody');\n\n        let postBody = dataBody;\n        let pathParams = {\n            nodeId: nodeId\n        };\n        let queryParams = {};\n        let headerParams = {};\n        let formParams = {};\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/secured-nodes/{nodeId}/securing-marks',\n            'POST',\n            pathParams,\n            queryParams,\n            headerParams,\n            formParams,\n            postBody,\n            contentTypes,\n            accepts,\n            SecurityMarkPaging\n        );\n    }\n\n    /**\n     * Get security marks on a node\n     * @param nodeId The key for the node id.\n     * @param opts.inUse The key for the security mark is in use or not.\n     * @return Promise<SecurityMarkPaging>\n     */\n     getSecurityMarksOnNode(nodeId: string, opts?: any): Promise<SecurityMarkPaging> {\n        throwIfNotDefined(nodeId, 'nodeId');\n\n        let postBody = null;\n        let pathParams = {\n            nodeId: nodeId\n        };\n        let queryParams = {\n            inUse: opts['inUse'],\n        };\n        let headerParams = {};\n        let formParams = {};\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/secured-nodes/{nodeId}/securing-marks',\n            'GET',\n            pathParams,\n            queryParams,\n            headerParams,\n            formParams,\n            postBody,\n            contentTypes,\n            accepts,\n            SecurityMarkPaging\n        );\n    }\n}\n"]}