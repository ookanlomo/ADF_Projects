/*!
 * @license
 * Copyright Â© 2005-2023 Hyland Software, Inc. and its affiliates. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { __extends } from "tslib";
import { BaseApi } from './base.api';
import { throwIfNotDefined } from '../../../assert';
import { buildCollectionParam } from '../../../alfrescoApiClient';
import { CategoryPaging } from '../model/categoryPaging';
import { CategoryEntry } from '../model/categoryEntry';
var CategoriesApi = (function (_super) {
    __extends(CategoriesApi, _super);
    function CategoriesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CategoriesApi.prototype.getSubcategories = function (categoryId, opts) {
        throwIfNotDefined(categoryId, 'categoryId');
        opts = opts || {};
        var postBody = null;
        var pathParams = {
            'categoryId': categoryId
        };
        var queryParams = {
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'fields': buildCollectionParam(opts['fields'], 'csv'),
            'include': buildCollectionParam(opts['include'], 'csv')
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/categories/{categoryId}/subcategories', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, CategoryPaging);
    };
    CategoriesApi.prototype.getCategory = function (categoryId, opts) {
        throwIfNotDefined(categoryId, 'categoryId');
        opts = opts || {};
        var postBody = null;
        var pathParams = {
            'categoryId': categoryId
        };
        var queryParams = {
            'fields': buildCollectionParam(opts['fields'], 'csv'),
            'include': buildCollectionParam(opts['include'], 'csv')
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/categories/{categoryId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, CategoryEntry);
    };
    CategoriesApi.prototype.getCategoryLinksForNode = function (nodeId, opts) {
        throwIfNotDefined(nodeId, 'nodeId');
        opts = opts || {};
        var postBody = null;
        var pathParams = {
            'nodeId': nodeId
        };
        var queryParams = {
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'fields': buildCollectionParam(opts['fields'], 'csv'),
            'include': buildCollectionParam(opts['include'], 'csv')
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/nodes/{nodeId}/category-links', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, CategoryPaging);
    };
    CategoriesApi.prototype.deleteCategory = function (categoryId) {
        throwIfNotDefined(categoryId, 'categoryId');
        var postBody = null;
        var pathParams = {
            'categoryId': categoryId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/categories/{categoryId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    CategoriesApi.prototype.unlinkNodeFromCategory = function (nodeId, categoryId) {
        throwIfNotDefined(nodeId, 'nodeId');
        throwIfNotDefined(categoryId, 'categoryId');
        var postBody = null;
        var pathParams = {
            'nodeId': nodeId,
            'categoryId': categoryId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/nodes/{nodeId}/category-links/{categoryId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    CategoriesApi.prototype.updateCategory = function (categoryId, categoryBodyUpdate, opts) {
        throwIfNotDefined(categoryId, 'categoryId');
        throwIfNotDefined(categoryBodyUpdate, 'categoryBodyUpdate');
        opts = opts || {};
        var postBody = categoryBodyUpdate;
        var pathParams = {
            'categoryId': categoryId
        };
        var queryParams = {
            'fields': buildCollectionParam(opts['fields'], 'csv'),
            'include': buildCollectionParam(opts['include'], 'csv')
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/categories/{categoryId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, CategoryEntry);
    };
    CategoriesApi.prototype.createSubcategories = function (categoryId, categoryBodyCreate, opts) {
        throwIfNotDefined(categoryId, 'categoryId');
        throwIfNotDefined(categoryBodyCreate, 'categoryBodyCreate');
        opts = opts || {};
        var postBody = categoryBodyCreate;
        var pathParams = {
            'categoryId': categoryId
        };
        var queryParams = {
            'fields': buildCollectionParam(opts['fields'], 'csv'),
            'include': buildCollectionParam(opts['include'], 'csv')
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/categories/{categoryId}/subcategories', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, CategoryEntry);
    };
    CategoriesApi.prototype.linkNodeToCategory = function (nodeId, categoryLinkBodyCreate, opts) {
        throwIfNotDefined(nodeId, 'nodeId');
        throwIfNotDefined(categoryLinkBodyCreate, 'categoryLinkBodyCreate');
        opts = opts || {};
        var postBody = categoryLinkBodyCreate;
        var pathParams = {
            'nodeId': nodeId
        };
        var queryParams = {
            'fields': buildCollectionParam(opts['fields'], 'csv'),
            'include': buildCollectionParam(opts['include'], 'csv')
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/nodes/{nodeId}/category-links', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, CategoryEntry);
    };
    return CategoriesApi;
}(BaseApi));
export { CategoriesApi };
//# sourceMappingURL=../../../../../../src/api/content-rest-api/api/categories.api.js.map