/*!
 * @license
 * Copyright Â© 2005-2023 Hyland Software, Inc. and its affiliates. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { __extends } from "tslib";
import { TagEntry } from '../model/tagEntry';
import { TagPaging } from '../model/tagPaging';
import { BaseApi } from './base.api';
import { throwIfNotDefined } from '../../../assert';
import { buildCollectionParam } from '../../../alfrescoApiClient';
var TagsApi = (function (_super) {
    __extends(TagsApi, _super);
    function TagsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TagsApi.prototype.createTagForNode = function (nodeId, tagBodyCreate, opts) {
        throwIfNotDefined(nodeId, 'nodeId');
        throwIfNotDefined(tagBodyCreate, 'tagBodyCreate');
        opts = opts || {};
        var postBody = tagBodyCreate;
        var pathParams = {
            'nodeId': nodeId
        };
        var queryParams = {
            'fields': buildCollectionParam(opts['fields'], 'csv')
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/nodes/{nodeId}/tags', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TagEntry);
    };
    TagsApi.prototype.deleteTagFromNode = function (nodeId, tagId) {
        throwIfNotDefined(nodeId, 'nodeId');
        throwIfNotDefined(tagId, 'tagId');
        var postBody = null;
        var pathParams = {
            'nodeId': nodeId, 'tagId': tagId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/nodes/{nodeId}/tags/{tagId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    TagsApi.prototype.getTag = function (tagId, opts) {
        throwIfNotDefined(tagId, 'tagId');
        opts = opts || {};
        var postBody = null;
        var pathParams = {
            'tagId': tagId
        };
        var queryParams = {
            'fields': buildCollectionParam(opts['fields'], 'csv')
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/tags/{tagId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TagEntry);
    };
    TagsApi.prototype.listTags = function (opts) {
        opts = opts || {};
        var postBody = null;
        var pathParams = {};
        var where;
        if (opts === null || opts === void 0 ? void 0 : opts.tag) {
            where = opts.matching ? "(tag matches ('".concat(opts.tag, "'))") : "(tag='".concat(opts.tag, "')");
        }
        var queryParams = {
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'fields': buildCollectionParam(opts['fields'], 'csv'),
            'include': buildCollectionParam(opts['include'], 'csv'),
            where: where
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/tags', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TagPaging);
    };
    TagsApi.prototype.listTagsForNode = function (nodeId, opts) {
        throwIfNotDefined(nodeId, 'nodeId');
        opts = opts || {};
        var postBody = null;
        var pathParams = {
            'nodeId': nodeId
        };
        var queryParams = {
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'fields': buildCollectionParam(opts['fields'], 'csv')
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/nodes/{nodeId}/tags', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TagPaging);
    };
    TagsApi.prototype.updateTag = function (tagId, tagBodyUpdate, opts) {
        throwIfNotDefined(tagId, 'tagId');
        throwIfNotDefined(tagBodyUpdate, 'tagBodyUpdate');
        opts = opts || {};
        var postBody = tagBodyUpdate;
        var pathParams = {
            'tagId': tagId
        };
        var queryParams = {
            'fields': buildCollectionParam(opts['fields'], 'csv')
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/tags/{tagId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TagEntry);
    };
    TagsApi.prototype.deleteTag = function (tagId) {
        throwIfNotDefined(tagId, 'tagId');
        var postBody = null;
        var pathParams = {
            'tagId': tagId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/tags/{tagId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    TagsApi.prototype.createTags = function (tags) {
        throwIfNotDefined(tags, 'tags');
        return this.apiClient.callApi('/tags', 'POST', {}, {}, {}, {}, tags, ['application/json'], ['application/json']);
    };
    TagsApi.prototype.assignTagsToNode = function (nodeId, tags) {
        var types = ['application/json'];
        return this.apiClient.callApi('/nodes/{nodeId}/tags', 'POST', { nodeId: nodeId }, {}, {}, {}, tags, types, types, TagEntry);
    };
    return TagsApi;
}(BaseApi));
export { TagsApi };
//# sourceMappingURL=../../../../../../src/api/content-rest-api/api/tags.api.js.map