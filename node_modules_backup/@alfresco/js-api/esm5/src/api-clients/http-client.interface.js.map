{"version":3,"file":"http-client.interface.js","sourceRoot":"","sources":["http-client.interface.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;GAeG","sourcesContent":["/*!\n * @license\n * Copyright Â© 2005-2023 Hyland Software, Inc. and its affiliates. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Authentication } from '../authentication/authentication';\nimport { Emitter } from 'event-emitter';\n\nexport interface RequestOptions {\n    path: string;\n    httpMethod?: string;\n    pathParams?: any;\n    queryParams?: any;\n    headerParams?: any;\n    formParams?: any;\n    bodyParam?: any;\n    contentTypes?: string[];\n    accepts?: string[];\n    returnType?: any;\n    contextRoot?: string;\n    responseType?: string;\n    url?: string;\n    readonly accept?: string;\n    readonly contentType?: string;\n}\n\nexport interface HttpClientConfig {\n    contextRoot: string;\n    host?: string; // Should be mandatory but can't make it because of AlfrescoApiConfig incompatibility ðŸ˜•\n    servicePath?: string; // Should be mandatory but can't make it because of AlfrescoApiConfig incompatibility ðŸ˜•\n}\n\nexport interface LegacyHttpClient {\n    basePath: string;\n    config: HttpClientConfig;\n\n    request<T = any>(options: RequestOptions): Promise<T>;\n    post<T = any>(options: RequestOptions): Promise<T>;\n    put<T = any>(options: RequestOptions): Promise<T>;\n    get<T = any>(options: RequestOptions): Promise<T>;\n    delete<T = void>(options: RequestOptions): Promise<T>;\n    /** @deprecated */\n    callApi(\n        path: string,\n        httpMethod: string,\n        pathParams?: any,\n        queryParams?: any,\n        headerParams?: any,\n        formParams?: any,\n        bodyParam?: any,\n        contentTypes?: string[],\n        accepts?: string[],\n        returnType?: any,\n        contextRoot?: string,\n        responseType?: string,\n        url?: string\n    ): Promise<any>;\n    /** @deprecated */\n    callCustomApi(\n        path: string,\n        httpMethod: string,\n        pathParams?: any,\n        queryParams?: any,\n        headerParams?: any,\n        formParams?: any,\n        bodyParam?: any,\n        contentTypes?: string[],\n        accepts?: string[],\n        returnType?: any,\n        contextRoot?: string,\n        responseType?: string\n    ): Promise<any>;\n}\n\nexport interface SecurityOptions {\n    readonly isBpmRequest: boolean;\n    readonly enableCsrf?: boolean;\n    readonly withCredentials?: boolean;\n    readonly authentications: Authentication;\n    readonly defaultHeaders: Record<string, string>;\n}\n\nexport interface Emitters {\n    readonly eventEmitter: Emitter;\n    readonly apiClientEmitter: Emitter;\n}\n\nexport interface HttpClient {\n    request<T = any>(url: string, options: RequestOptions, security: SecurityOptions, emitters: Emitters): Promise<T>;\n    post<T = any>(url: string, options: RequestOptions, security: SecurityOptions, emitters: Emitters): Promise<T>;\n    put<T = any>(url: string, options: RequestOptions, security: SecurityOptions, emitters: Emitters): Promise<T>;\n    get<T = any>(url: string, options: RequestOptions, security: SecurityOptions, emitters: Emitters): Promise<T>;\n    delete<T = void>(url: string, options: RequestOptions, security: SecurityOptions, emitters: Emitters): Promise<T>;\n}\n"]}