/*!
 * @license
 * Copyright Â© 2005-2023 Hyland Software, Inc. and its affiliates. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import ee from 'event-emitter';
import { AlfrescoApiConfig } from './alfrescoApiConfig';
import { Authentication } from './authentication/authentication';
import { HttpClient, RequestOptions, LegacyHttpClient } from './api-clients/http-client.interface';
type AlfrescoApiClientPromise<T = any> = Promise<T> & {
    on: ee.EmitterMethod;
    off: ee.EmitterMethod;
    once: ee.EmitterMethod;
    emit: (type: string, ...args: any[]) => void;
    abort?: () => void;
};
/**
 * Builds a string representation of an array-type actual parameter, according to the given collection format.
 * @param {Array} param An array parameter.
 * @param {module:ApiClient.CollectionFormatEnum} collectionFormat The array element separator strategy.
 * @returns {String|Array} A string representation of the supplied collection, using the specified delimiter. Returns
 * <code>param</code> as is if <code>collectionFormat</code> is <code>multi</code>.
 */
export declare function buildCollectionParam(param: string[], collectionFormat: string): string | any[];
export declare class AlfrescoApiClient implements ee.Emitter, LegacyHttpClient {
    on: ee.EmitterMethod;
    off: ee.EmitterMethod;
    once: ee.EmitterMethod;
    emit: (type: string, ...args: any[]) => void;
    host: string;
    className: string;
    config: AlfrescoApiConfig;
    url: string;
    /**
     * The base URL against which to resolve every API call's (relative) path.
     */
    basePath: string;
    /**
     * The authentication methods to be included for all API calls.
     */
    authentications: Authentication;
    /**
     * The default HTTP headers to be included for all API calls.
     */
    defaultHeaders: {};
    /**
     * The default HTTP timeout for all API calls.
     */
    timeout: number | {
        deadline?: number;
        response?: number;
    };
    contentTypes: {
        JSON: string[];
    };
    httpClient: HttpClient;
    constructor(host?: string, httpClient?: HttpClient);
    request<T = any>(options: RequestOptions): Promise<T>;
    post<T = any>(options: RequestOptions): AlfrescoApiClientPromise<T>;
    put<T = any>(options: RequestOptions): AlfrescoApiClientPromise<T>;
    get<T = any>(options: RequestOptions): AlfrescoApiClientPromise<T>;
    delete<T = void>(options: RequestOptions): AlfrescoApiClientPromise<T>;
    callApi(path: string, httpMethod: string, pathParams?: any, queryParams?: any, headerParams?: any, formParams?: any, bodyParam?: any, contentTypes?: string[], accepts?: string[], returnType?: any, contextRoot?: string, responseType?: string, url?: string): AlfrescoApiClientPromise<any>;
    callCustomApi(path: string, httpMethod: string, pathParams?: any, queryParams?: any, headerParams?: any, formParams?: any, bodyParam?: any, contentTypes?: string[], accepts?: string[], returnType?: any, contextRoot?: string, responseType?: string): AlfrescoApiClientPromise<any>;
    isCsrfEnabled(): boolean;
    isBpmRequest(): boolean;
    basicAuth(username: string, password: string): string;
    isWithCredentials(): boolean;
    getAlfTicket(ticket: string): string;
    /**
     * Builds full URL by appending the given path to the base URL and replacing path parameter place-holders
     * with parameter values
     */
    private static buildUrl;
    private static addParamsToUrl;
    private getCallApiUrl;
    private buildRequestCall;
    private getSecurityOptions;
    private getEventEmitters;
    private getRequestOptionsWithAcceptAndContentType;
    /**
     * Chooses a content type from the given array, with JSON preferred; i.e. return JSON if included, otherwise return the first.
     * @param contentTypes
     * @returns  The chosen content type, preferring JSON.
     */
    private static jsonPreferredMime;
    /**
     * Checks whether the given content type represents JSON.<br>
     * JSON content type examples:<br>
     * <ul>
     * <li>application/json</li>
     * <li>application/json; charset=UTF8</li>
     * <li>APPLICATION/JSON</li>
     * </ul>
     * @param contentType The MIME content type to check.
     * @returns <code>true</code> if <code>contentType</code> represents JSON, otherwise <code>false</code>.
     */
    private static isJsonMime;
    private addPromiseListeners;
}
export {};
