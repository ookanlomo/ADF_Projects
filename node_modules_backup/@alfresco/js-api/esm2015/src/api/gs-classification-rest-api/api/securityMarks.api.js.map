{"version":3,"file":"securityMarks.api.js","sourceRoot":"","sources":["securityMarks.api.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * @license\n * Copyright Â© 2005-2023 Hyland Software, Inc. and its affiliates. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BaseApi } from './base.api';\nimport { throwIfNotDefined } from '../../../assert';\nimport { SecurityMarkEntry } from '../model/securityMarkEntry';\nimport { SecurityMarkBody } from '../model/securityMarkBody';\nimport { SecurityMarkPaging } from '../model/securityMarkPaging';\n\n/**\n * Securitycontrolsettings service.\n * @module SecurityMarksApi\n */\nexport class SecurityMarksApi extends BaseApi {\n    /**\n     * Get security mark value\n     * Gets the value for a selected **securityGroupId**.\n     * @param securityGroupId The key for the security group id.\n     * @param opts.inUse The key for the security mark is in use or not.\n     * @param opts.skipCount The number of entities that exist in the collection before those included in this list.\n     * @param opts.maxItems The maximum number of items to return in the list.\n     * @return Promise<SecurityMarkPaging>\n     */\n    getSecurityMarks(securityGroupId: string, opts?: any): Promise<SecurityMarkPaging> {\n        throwIfNotDefined(securityGroupId, 'securityGroupId');\n\n        let postBody = null;\n\n        let pathParams = {\n            securityGroupId: securityGroupId,\n        };\n\n        let queryParams = {\n            inUse: opts['inUse'],\n            skipCount: opts['skipCount'],\n            maxItems: opts['maxItems'],\n        };\n\n        let headerParams = {};\n        let formParams = {};\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/security-groups/{securityGroupId}/security-marks',\n            'GET',\n            pathParams,\n            queryParams,\n            headerParams,\n            formParams,\n            postBody,\n            contentTypes,\n            accepts,\n            SecurityMarkPaging\n        );\n    }\n\n    /**\n     * Create security marks\n     * @param securityGroupId The key for the security group id.\n     * @param securityMarkBody securityMarkBody[].\n     * @return Promise<SecurityMarkEntry|SecurityMarkPaging>\n     */\n    createSecurityMarks(securityGroupId: string, securityMarkBody: SecurityMarkBody[]): Promise<SecurityMarkPaging|SecurityMarkEntry> {\n        throwIfNotDefined(securityGroupId, 'securityGroupId');\n        throwIfNotDefined(securityMarkBody, 'securityMarkBody');\n\n        let postBody = securityMarkBody;\n        let pathParams = {\n            securityGroupId: securityGroupId,\n        };\n        let queryParams = {\n        };\n        let headerParams = {};\n        let formParams = {};\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n        return this.apiClient.callApi(\n            '/security-groups/{securityGroupId}/security-marks',\n            'POST',\n            pathParams,\n            queryParams,\n            headerParams,\n            formParams,\n            postBody,\n            contentTypes,\n            accepts,\n            securityMarkBody.length==1 ? SecurityMarkEntry:SecurityMarkPaging\n        );\n    }\n    /**\n     * Get security mark value information\n     * Gets the value for a selected **securityMarkId**.\n     * @param securityGroupId The key for the security group id.\n     * @param securityMarkId The key for the security mark id\n     * @return Promise<SecurityMarkEntry>\n     */\n    getSecurityMark(securityGroupId: string, securityMarkId: string): Promise<SecurityMarkEntry> {\n        throwIfNotDefined(securityGroupId, 'securityGroupId');\n        throwIfNotDefined(securityMarkId, 'securityMarkId');\n\n        let postBody = null;\n\n        let pathParams = {\n            securityGroupId: securityGroupId,\n            securityMarkId: securityMarkId,\n        };\n\n        let queryParams = {};\n\n        let headerParams = {};\n        let formParams = {};\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/security-groups/{securityGroupId}/security-marks/{securityMarkId}',\n            'GET',\n            pathParams,\n            queryParams,\n            headerParams,\n            formParams,\n            postBody,\n            contentTypes,\n            accepts,\n            SecurityMarkEntry\n        );\n    }\n\n    /**\n     * Updates Security Mark value\n     * @param securityGroupId The key for the security group id.\n     * @param securityMarkId The key for the security mark is in use or not.\n     * @param securityMarkBody securityMarkBody.\n     * @return Promise<SecurityMarkEntry>\n     */\n\n    updateSecurityMark(securityGroupId: string, securityMarkId: string, securityMarkBody: SecurityMarkBody): Promise<SecurityMarkEntry> {\n        throwIfNotDefined(securityGroupId, 'securityGroupId');\n        throwIfNotDefined(securityMarkId, 'securityMarkId');\n        throwIfNotDefined(securityMarkBody, 'securityMarkBody');\n\n        let postBody = securityMarkBody;\n\n        let pathParams = {\n            securityGroupId: securityGroupId,\n            securityMarkId: securityMarkId,\n        };\n\n        let queryParams = {};\n\n        let headerParams = {};\n        let formParams = {};\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/security-groups/{securityGroupId}/security-marks/{securityMarkId}',\n            'PUT',\n            pathParams,\n            queryParams,\n            headerParams,\n            formParams,\n            postBody,\n            contentTypes,\n            accepts,\n            SecurityMarkEntry\n        );\n    }\n\n    /**\n     * Delete security mark\n     * @param securityGroupId The key for the security group id.\n     * @param securityMarkId The key for the security mark id.\n     * @return Promise<any>\n     */\n    deleteSecurityMark(securityGroupId: string, securityMarkId: string): Promise<SecurityMarkEntry> {\n        throwIfNotDefined(securityGroupId, 'securityGroupId');\n        throwIfNotDefined(securityMarkId, 'securityMarkId');\n\n        let postBody = null;\n\n        let pathParams = {\n            securityGroupId: securityGroupId,\n            securityMarkId: securityMarkId,\n        };\n\n        let queryParams = {};\n\n        let headerParams = {};\n        let formParams = {};\n\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/security-groups/{securityGroupId}/security-marks/{securityMarkId}',\n            'DELETE',\n            pathParams,\n            queryParams,\n            headerParams,\n            formParams,\n            postBody,\n            contentTypes,\n            accepts\n        );\n    }\n}\n"]}