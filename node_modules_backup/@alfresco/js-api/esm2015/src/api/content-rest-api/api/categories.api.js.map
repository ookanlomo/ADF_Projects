{"version":3,"file":"categories.api.js","sourceRoot":"","sources":["categories.api.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * @license\n * Copyright Â© 2005-2023 Hyland Software, Inc. and its affiliates. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BaseApi } from './base.api';\nimport { throwIfNotDefined } from '../../../assert';\nimport { buildCollectionParam } from '../../../alfrescoApiClient';\nimport { CategoryPaging } from '../model/categoryPaging';\nimport { CategoryEntry } from '../model/categoryEntry';\nimport { CategoryBody } from '../model/categoryBody';\nimport { CategoryLinkBody } from '../model/CategoryLinkBody';\n\n/**\n* Categories service.\n* @module CategoriesApi\n*/\nexport class CategoriesApi extends BaseApi {\n    /**\n        * List of subcategories within category\n        *\n        * Gets a list of subcategories with category **categoryId**.\n        * The parameter categoryId can be set to the alias -root- to obtain a list of top level categories.\n\n    You can use the **include** parameter to return additional **values** information.\n\n        * @param categoryId The identifier of a category.\n        * @param opts Optional parameters\n        * @param opts.skipCount The number of entities that exist in the collection before those included in this list.\n    If not supplied then the default value is 0.\n    (default to 0)\n        * @param opts.maxItems The maximum number of items to return in the list.\n    If not supplied then the default value is 100.\n    (default to 100)\n        * @param opts.fields A list of field names.\n\n    You can use this parameter to restrict the fields\n    returned within a response if, for example, you want to save on overall bandwidth.\n\n    The list applies to a returned individual\n    entity or entries within a collection.\n\n    If the API method also supports the **include**\n    parameter, then the fields specified in the **include**\n    parameter are returned in addition to those specified in the **fields** parameter.\n\n        * @param opts.include Returns additional information about the category. The following optional fields can be requested:\n            * count\n            * path\n\n        * @return Promise<CategoryPaging>\n    */\n    getSubcategories(categoryId: string, opts?: any): Promise<CategoryPaging> {\n        throwIfNotDefined(categoryId, 'categoryId');\n        opts = opts || {};\n        const postBody: null = null;\n\n        const pathParams = {\n            'categoryId': categoryId\n        };\n\n        const queryParams = {\n            'skipCount': opts['skipCount'],\n            'maxItems': opts['maxItems'],\n            'fields': buildCollectionParam(opts['fields'], 'csv'),\n            'include': buildCollectionParam(opts['include'], 'csv')\n        };\n\n        const headerParams = {};\n        const formParams = {};\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/categories/{categoryId}/subcategories', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , CategoryPaging);\n    }\n\n    /**\n        * Get a category\n        *\n        * Get a specific category with categoryId.\n\n    You can use the **include** parameter to return additional **values** information.\n\n        * @param categoryId The identifier of a category.\n        * @param opts Optional parameters\n        * @param opts.fields A list of field names.\n\n    You can use this parameter to restrict the fields\n    returned within a response if, for example, you want to save on overall bandwidth.\n\n    The list applies to a returned individual\n    entity or entries within a collection.\n\n    If the API method also supports the **include**\n    parameter, then the fields specified in the **include**\n    parameter are returned in addition to those specified in the **fields** parameter.\n\n        * @param opts.include Returns additional information about the category. The following optional fields can be requested:\n            * count\n            * path\n\n        * @return Promise<CategoryEntry>\n    */\n    getCategory(categoryId: string, opts?: any): Promise<CategoryEntry> {\n        throwIfNotDefined(categoryId, 'categoryId');\n        opts = opts || {};\n        const postBody: null = null;\n\n        const pathParams = {\n            'categoryId': categoryId\n        };\n\n        const queryParams = {\n            'fields': buildCollectionParam(opts['fields'], 'csv'),\n            'include': buildCollectionParam(opts['include'], 'csv')\n        };\n\n        const headerParams = {};\n        const formParams = {};\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/categories/{categoryId}', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , CategoryEntry);\n    }\n\n    /**\n        * List of categories that node is assigned to\n        *\n        * Gets a list of categories for node with nodeId.\n\n        * @param nodeId The identifier of a node.\n        * @param opts Optional parameters\n        * @param opts.skipCount The number of entities that exist in the collection before those included in this list.\n    If not supplied then the default value is 0.\n    (default to 0)\n        * @param opts.maxItems The maximum number of items to return in the list.\n    If not supplied then the default value is 100.\n    (default to 100)\n        * @param opts.fields A list of field names.\n\n    You can use this parameter to restrict the fields\n    returned within a response if, for example, you want to save on overall bandwidth.\n\n    The list applies to a returned individual\n    entity or entries within a collection.\n\n    If the API method also supports the **include**\n    parameter, then the fields specified in the **include**\n    parameter are returned in addition to those specified in the **fields** parameter.\n\n        * @param opts.include Returns additional information about the category. The following optional fields can be requested:\n            * path\n\n        * @return Promise<CategoryPaging>\n    */\n    getCategoryLinksForNode(nodeId: string, opts?: any): Promise<CategoryPaging> {\n        throwIfNotDefined(nodeId, 'nodeId');\n        opts = opts || {};\n        const postBody: null = null;\n\n        const pathParams = {\n            'nodeId': nodeId\n        };\n\n        const queryParams = {\n            'skipCount': opts['skipCount'],\n            'maxItems': opts['maxItems'],\n            'fields': buildCollectionParam(opts['fields'], 'csv'),\n            'include': buildCollectionParam(opts['include'], 'csv')\n        };\n\n        const headerParams = {};\n        const formParams = {};\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/nodes/{nodeId}/category-links', 'GET',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , CategoryPaging);\n    }\n\n    /**\n    * Deletes the category **categoryId**.\n    *\n    * This will cause everything to be removed from the category.\n    * You must have admin rights to delete a category.\n    *\n    * @param categoryId The identifier of a category.\n    * @return Promise<{}>\n    */\n    deleteCategory(categoryId: string): Promise<void> {\n        throwIfNotDefined(categoryId, 'categoryId');\n        const postBody: null = null;\n\n        const pathParams = {\n            'categoryId': categoryId\n        };\n\n        const queryParams = {};\n        const headerParams = {};\n        const formParams = {};\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/categories/{categoryId}', 'DELETE',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts );\n    }\n\n    /**\n    * Unassign a node from category\n    *\n    * Removes the node **nodeId** from the category **categoryId**.\n    *\n    * @param nodeId The identifier of a node.\n    * @param categoryId The identifier of a category.\n    * @return Promise<{}>\n    */\n     unlinkNodeFromCategory(nodeId: string, categoryId: string): Promise<void> {\n        throwIfNotDefined(nodeId, 'nodeId');\n        throwIfNotDefined(categoryId, 'categoryId');\n        const postBody: null = null;\n\n        const pathParams = {\n            'nodeId': nodeId,\n            'categoryId': categoryId\n        };\n\n        const queryParams = {};\n        const headerParams = {};\n        const formParams = {};\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/nodes/{nodeId}/category-links/{categoryId}', 'DELETE',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts );\n    }\n\n    /**\n    * Update a category\n    *\n    * Updates the category **categoryId**.\n    * You must have admin rights to update a category.\n    *\n    * @param categoryId The identifier of a category.\n    * @param categoryBodyUpdate The updated category\n    * @param opts Optional parameters\n    * @param opts.fields A list of field names.\n\n    You can use this parameter to restrict the fields\n    returned within a response if, for example, you want to save on overall bandwidth.\n\n    The list applies to a returned individual\n    entity or entries within a collection.\n\n    If the API method also supports the **include**\n    parameter, then the fields specified in the **include**\n    parameter are returned in addition to those specified in the **fields** parameter.\n\n    * @param opts.include Returns additional information about the category. The following optional fields can be requested:\n            * count\n            * path\n\n    * @return Promise<CategoryEntry>\n    */\n    updateCategory(categoryId: string, categoryBodyUpdate: CategoryBody, opts?: any): Promise<CategoryEntry> {\n\n        throwIfNotDefined(categoryId, 'categoryId');\n        throwIfNotDefined(categoryBodyUpdate, 'categoryBodyUpdate');\n\n        opts = opts || {};\n        const postBody = categoryBodyUpdate;\n\n        const pathParams = {\n            'categoryId': categoryId\n        };\n\n        const queryParams = {\n            'fields': buildCollectionParam(opts['fields'], 'csv'),\n            'include': buildCollectionParam(opts['include'], 'csv')\n        };\n\n        const headerParams = {};\n        const formParams = {};\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/categories/{categoryId}', 'PUT',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , CategoryEntry);\n    }\n\n    /**\n    * Create new categories\n    *\n    * Creates new categories within the category **categoryId**.\n    * The parameter categoryId can be set to the alias -root- to create a new top level category.\n    * You must have admin rights to create a category.\n    * You specify the category in a JSON body like this:\n\n    JSON\n    {\n    \\\"name\\\":\\\"test category 1\\\"\n    }\n\n    **Note:** You can create more than one category by specifying a list of categories in the JSON body like this:\n\n    JSON\n    [\n    {\n        \\\"name\\\":\\\"test category 1\\\"\n    },\n    {\n        \\\"name\\\":\\\"test category 2\\\"\n    }\n    ]\n\n    If you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:\n\n    JSON\n    {\n    \\\"list\\\": {\n        \\\"pagination\\\": {\n        \\\"count\\\": 2,\n        \\\"hasMoreItems\\\": false,\n        \\\"totalItems\\\": 2,\n        \\\"skipCount\\\": 0,\n        \\\"maxItems\\\": 100\n        },\n        \\\"entries\\\": [\n        {\n            \\\"entry\\\": {\n            ...\n            }\n        },\n        {\n            \\\"entry\\\": {\n            ...\n            }\n        }\n        ]\n    }\n    }\n\n    *\n    * @param categoryId The identifier of a category.\n    * @param categoryBodyCreate List of categories to create.\n    * @param opts Optional parameters.\n    * @param opts.fields A list of field names.\n\n    You can use this parameter to restrict the fields\n    returned within a response if, for example, you want to save on overall bandwidth.\n\n    The list applies to a returned individual\n    entity or entries within a collection.\n\n    If the API method also supports the **include**\n    parameter, then the fields specified in the **include**\n    parameter are returned in addition to those specified in the **fields** parameter.\n\n    * @param opts.include Returns additional information about the category. The following optional fields can be requested:\n            * count\n            * path\n\n    * @return Promise<CategoryPaging | CategoryEntry>\n    */\n    createSubcategories(categoryId: string, categoryBodyCreate: CategoryBody[], opts?: any): Promise<CategoryPaging | CategoryEntry> {\n\n        throwIfNotDefined(categoryId, 'categoryId');\n        throwIfNotDefined(categoryBodyCreate, 'categoryBodyCreate');\n\n        opts = opts || {};\n        const postBody = categoryBodyCreate;\n\n        const pathParams = {\n            'categoryId': categoryId\n        };\n\n        const queryParams = {\n            'fields': buildCollectionParam(opts['fields'], 'csv'),\n            'include': buildCollectionParam(opts['include'], 'csv')\n        };\n\n        const headerParams = {};\n        const formParams = {};\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/categories/{categoryId}/subcategories', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , CategoryEntry);\n    }\n\n    /**\n    * Assign a node to a category\n    *\n    * Assign the node **nodeId** to a category.\n    * You specify the category in a JSON body like this:\n\n    JSON\n    {\n    \\\"categoryId\\\":\\\"01234567-89ab-cdef-0123-456789abcdef\\\"\n    }\n\n    **Note:** You can assign the node to more than one category by specifying a list of categories in the JSON body like this:\n\n    JSON\n    [\n    {\n        \\\"categoryId\\\":\\\"01234567-89ab-cdef-0123-456789abcdef\\\"\n    },\n    {\n        \\\"categoryId\\\":\\\"89abcdef-0123-4567-89ab-cdef01234567\\\"\n    }\n    ]\n\n    If you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:\n\n    JSON\n    {\n    \\\"list\\\": {\n        \\\"pagination\\\": {\n        \\\"count\\\": 2,\n        \\\"hasMoreItems\\\": false,\n        \\\"totalItems\\\": 2,\n        \\\"skipCount\\\": 0,\n        \\\"maxItems\\\": 100\n        },\n        \\\"entries\\\": [\n        {\n            \\\"entry\\\": {\n            ...\n            }\n        },\n        {\n            \\\"entry\\\": {\n            ...\n            }\n        }\n        ]\n    }\n    }\n\n    *\n    * @param nodeId The identifier of a node.\n    * @param categoryLinkBodyCreate The new category link\n    * @param opts Optional parameters\n    * @param opts.fields A list of field names.\n\n    You can use this parameter to restrict the fields\n    returned within a response if, for example, you want to save on overall bandwidth.\n\n    The list applies to a returned individual\n    entity or entries within a collection.\n\n    If the API method also supports the **include**\n    parameter, then the fields specified in the **include**\n    parameter are returned in addition to those specified in the **fields** parameter.\n\n    * @param opts.include Returns additional information about the category. The following optional fields can be requested:\n            * path\n\n    * @return Promise<CategoryPaging | CategoryEntry>\n    */\n    linkNodeToCategory(nodeId: string, categoryLinkBodyCreate: CategoryLinkBody[], opts?: any): Promise<CategoryPaging | CategoryEntry> {\n\n        throwIfNotDefined(nodeId, 'nodeId');\n        throwIfNotDefined(categoryLinkBodyCreate, 'categoryLinkBodyCreate');\n\n        opts = opts || {};\n        const postBody = categoryLinkBodyCreate;\n\n        const pathParams = {\n            'nodeId': nodeId\n        };\n\n        const queryParams = {\n            'fields': buildCollectionParam(opts['fields'], 'csv'),\n            'include': buildCollectionParam(opts['include'], 'csv')\n        };\n\n        const headerParams = {};\n        const formParams = {};\n\n        const contentTypes = ['application/json'];\n        const accepts = ['application/json'];\n\n        return this.apiClient.callApi(\n            '/nodes/{nodeId}/category-links', 'POST',\n            pathParams, queryParams, headerParams, formParams, postBody,\n            contentTypes, accepts , CategoryEntry);\n    }\n}\n"]}