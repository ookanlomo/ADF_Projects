{"version":3,"file":"alfrescoApiClient.js","sourceRoot":"","sources":["alfrescoApiClient.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * @license\n * Copyright Â© 2005-2023 Hyland Software, Inc. and its affiliates. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ee from 'event-emitter';\nimport { AlfrescoApiConfig } from './alfrescoApiConfig';\nimport { Authentication } from './authentication/authentication';\nimport { SuperagentHttpClient } from './superagentHttpClient';\nimport { Emitters, HttpClient, RequestOptions, LegacyHttpClient, SecurityOptions } from './api-clients/http-client.interface';\nimport { paramToString } from './utils';\n\ndeclare const Buffer: any;\n\ntype AlfrescoApiClientPromise<T = any> = Promise<T> & {\n    on: ee.EmitterMethod;\n    off: ee.EmitterMethod;\n    once: ee.EmitterMethod;\n    emit: (type: string, ...args: any[]) => void;\n    abort?: () => void;\n};\n\n/**\n * Builds a string representation of an array-type actual parameter, according to the given collection format.\n * @param {Array} param An array parameter.\n * @param {module:ApiClient.CollectionFormatEnum} collectionFormat The array element separator strategy.\n * @returns {String|Array} A string representation of the supplied collection, using the specified delimiter. Returns\n * <code>param</code> as is if <code>collectionFormat</code> is <code>multi</code>.\n */\nexport function buildCollectionParam(param: string[], collectionFormat: string): string | any[] {\n    if (!param) {\n        return null;\n    }\n\n    switch (collectionFormat) {\n        case 'csv':\n            return param.map(paramToString).join(',');\n        case 'ssv':\n            return param.map(paramToString).join(' ');\n        case 'tsv':\n            return param.map(paramToString).join('\\t');\n        case 'pipes':\n            return param.map(paramToString).join('|');\n        case 'multi':\n            // return the array directly as SuperAgent will handle it as expected\n            return param.map(paramToString);\n        default:\n            throw new Error('Unknown collection format: ' + collectionFormat);\n    }\n}\n\nexport class AlfrescoApiClient implements ee.Emitter, LegacyHttpClient {\n    on: ee.EmitterMethod;\n    off: ee.EmitterMethod;\n    once: ee.EmitterMethod;\n    emit: (type: string, ...args: any[]) => void;\n\n    host: string;\n    className: string;\n    config: AlfrescoApiConfig;\n    url: string;\n    /**\n     * The base URL against which to resolve every API call's (relative) path.\n     */\n    basePath = '';\n\n    /**\n     * The authentication methods to be included for all API calls.\n     */\n    authentications: Authentication = {\n        basicAuth: {\n            ticket: '',\n        },\n        type: 'basic',\n    };\n    /**\n     * The default HTTP headers to be included for all API calls.\n     */\n    defaultHeaders = {};\n\n    /**\n     * The default HTTP timeout for all API calls.\n     */\n    timeout: number | { deadline?: number; response?: number } = undefined;\n\n    contentTypes = {\n        JSON: ['application/json'],\n    };\n\n    httpClient: HttpClient;\n\n    constructor(host?: string, httpClient?: HttpClient) {\n        this.host = host;\n\n        // fallback for backward compatibility\n        this.httpClient = httpClient || new SuperagentHttpClient();\n\n        ee(this);\n    }\n\n    request<T = any>(options: RequestOptions): Promise<T> {\n        return this.buildRequestCall(this.basePath, options, this.httpClient.request.bind(this.httpClient));\n    }\n\n    post<T = any>(options: RequestOptions): AlfrescoApiClientPromise<T> {\n        const url = this.getCallApiUrl(options);\n        return this.buildRequestCall(url, options, this.httpClient.post.bind(this.httpClient));\n    }\n\n    put<T = any>(options: RequestOptions): AlfrescoApiClientPromise<T> {\n        const url = this.getCallApiUrl(options);\n        return this.buildRequestCall(url, options, this.httpClient.put.bind(this.httpClient));\n    }\n\n    get<T = any>(options: RequestOptions): AlfrescoApiClientPromise<T> {\n        const url = this.getCallApiUrl(options);\n        return this.buildRequestCall(url, options, this.httpClient.get.bind(this.httpClient));\n    }\n\n    delete<T = void>(options: RequestOptions): AlfrescoApiClientPromise<T> {\n        return this.buildRequestCall<T>(this.basePath, options, this.httpClient.delete.bind(this.httpClient));\n    }\n\n    callApi(\n        path: string,\n        httpMethod: string,\n        pathParams?: any,\n        queryParams?: any,\n        headerParams?: any,\n        formParams?: any,\n        bodyParam?: any,\n        contentTypes?: string[],\n        accepts?: string[],\n        returnType?: any,\n        contextRoot?: string,\n        responseType?: string,\n        url?: string\n    ): AlfrescoApiClientPromise<any> {\n        const callApiUrl = url ?? this.getCallApiUrl({ contextRoot, path, pathParams });\n\n        const options: RequestOptions = {\n            path,\n            httpMethod,\n            pathParams,\n            queryParams,\n            headerParams,\n            formParams,\n            bodyParam,\n            contentTypes,\n            accepts,\n            returnType,\n            contextRoot,\n            responseType,\n            url,\n        };\n\n        return this.buildRequestCall(callApiUrl, options, this.httpClient.request.bind(this.httpClient));\n    }\n\n    callCustomApi(\n        path: string,\n        httpMethod: string,\n        pathParams?: any,\n        queryParams?: any,\n        headerParams?: any,\n        formParams?: any,\n        bodyParam?: any,\n        contentTypes?: string[],\n        accepts?: string[],\n        returnType?: any,\n        contextRoot?: string,\n        responseType?: string\n    ): AlfrescoApiClientPromise<any> {\n        const customApiUrl = AlfrescoApiClient.buildUrl(path, '', pathParams);\n        const options: RequestOptions = {\n            path,\n            httpMethod,\n            pathParams,\n            queryParams,\n            headerParams,\n            formParams,\n            bodyParam,\n            contentTypes,\n            accepts,\n            returnType,\n            contextRoot,\n            responseType,\n        };\n\n        return this.buildRequestCall(customApiUrl, options, this.httpClient.request.bind(this.httpClient));\n    }\n\n    isCsrfEnabled(): boolean {\n        if (this.config) {\n            return !this.config.disableCsrf;\n        } else {\n            return true;\n        }\n    }\n\n    isBpmRequest(): boolean {\n        return this.className === 'ProcessAuth' || this.className === 'ProcessClient';\n    }\n\n    basicAuth(username: string, password: string): string {\n        const str: any = username + ':' + password;\n\n        let base64;\n\n        if (typeof Buffer === 'function') {\n            base64 = Buffer.from(str.toString(), 'binary').toString('base64');\n        } else {\n            base64 = btoa(str);\n        }\n\n        return 'Basic ' + base64;\n    }\n\n    isWithCredentials(): boolean {\n        return !!this.config?.withCredentials;\n    }\n\n    getAlfTicket(ticket: string): string {\n        const ticketParam = this.isWithCredentials() ? '&ticket=' : '&alf_ticket=';\n\n        if (ticket) {\n            return ticketParam + ticket;\n        } else if (this.config.ticketEcm) {\n            return ticketParam + this.config.ticketEcm;\n        }\n\n        return '';\n    }\n\n    /**\n     * Builds full URL by appending the given path to the base URL and replacing path parameter place-holders\n     * with parameter values\n     */\n    private static buildUrl(basePath: string, path: string, pathParams: any): string {\n        if (path && path !== '' && !path.match(/^\\//)) {\n            path = '/' + path;\n        }\n        const url = basePath + path;\n\n        return AlfrescoApiClient.addParamsToUrl(url, pathParams);\n    }\n\n    private static addParamsToUrl(path: string, pathParams: any) {\n        return path.replace(/\\{([\\w-]+)\\}/g, function (fullMatch, key) {\n            let value;\n            if (pathParams.hasOwnProperty(key)) {\n                value = paramToString(pathParams[key]);\n            } else {\n                value = fullMatch;\n            }\n            return encodeURIComponent(value);\n        });\n    }\n\n    private getCallApiUrl({ contextRoot, path, pathParams }: { contextRoot?: string; path: string; pathParams?: any }): string {\n        const basePath = contextRoot ? `${this.host}/${contextRoot}` : this.basePath;\n\n        return AlfrescoApiClient.buildUrl(basePath, path, pathParams);\n    }\n\n    private buildRequestCall<T = any>(\n        url: string,\n        options: RequestOptions,\n        httpCall: (url: string, options: RequestOptions, security: SecurityOptions, emitters: Emitters) => Promise<T>\n    ): AlfrescoApiClientPromise<T> {\n        const security = this.getSecurityOptions();\n        const emitters = this.getEventEmitters();\n        const httpRequestOptions = this.getRequestOptionsWithAcceptAndContentType(options);\n        const promise = httpCall(url, httpRequestOptions, security, emitters);\n\n        return this.addPromiseListeners(promise, emitters.eventEmitter);\n    }\n\n    private getSecurityOptions(): SecurityOptions {\n        return {\n            isBpmRequest: this.isBpmRequest(),\n            enableCsrf: this.isCsrfEnabled(),\n            withCredentials: this.isWithCredentials(),\n            authentications: this.authentications,\n            defaultHeaders: this.defaultHeaders,\n        };\n    }\n\n    private getEventEmitters(): Emitters {\n        const apiClientEmitter = {\n            on: this.on.bind(this),\n            off: this.off.bind(this),\n            once: this.once.bind(this),\n            emit: this.emit.bind(this),\n        };\n\n        return {\n            apiClientEmitter: apiClientEmitter,\n            eventEmitter: ee({}),\n        };\n    }\n\n    private getRequestOptionsWithAcceptAndContentType(options: RequestOptions): RequestOptions {\n        const contentType = AlfrescoApiClient.jsonPreferredMime(options.contentTypes);\n        const accept = AlfrescoApiClient.jsonPreferredMime(options.accepts);\n\n        return {\n            ...options,\n            contentType,\n            accept,\n        };\n    }\n\n    /**\n     * Chooses a content type from the given array, with JSON preferred; i.e. return JSON if included, otherwise return the first.\n     * @param contentTypes\n     * @returns  The chosen content type, preferring JSON.\n     */\n    private static jsonPreferredMime(contentTypes: readonly string[]): string {\n        if (!contentTypes || !contentTypes.length) {\n            return 'application/json';\n        }\n\n        for (let i = 0; i < contentTypes.length; i++) {\n            if (AlfrescoApiClient.isJsonMime(contentTypes[i])) {\n                return contentTypes[i];\n            }\n        }\n        return contentTypes[0];\n    }\n\n    /**\n     * Checks whether the given content type represents JSON.<br>\n     * JSON content type examples:<br>\n     * <ul>\n     * <li>application/json</li>\n     * <li>application/json; charset=UTF8</li>\n     * <li>APPLICATION/JSON</li>\n     * </ul>\n     * @param contentType The MIME content type to check.\n     * @returns <code>true</code> if <code>contentType</code> represents JSON, otherwise <code>false</code>.\n     */\n    private static isJsonMime(contentType: string): boolean {\n        return Boolean(contentType !== null && contentType.match(/^application\\/json(;.*)?$/i));\n    }\n\n    private addPromiseListeners<T = any>(promise: Promise<T>, eventEmitter: ee.Emitter): AlfrescoApiClientPromise<T> {\n        const alfrescoPromise: AlfrescoApiClientPromise<T> = Object.assign(promise, {\n            on: function () {\n                eventEmitter.on.apply(eventEmitter, arguments);\n                return this;\n            },\n            once: function () {\n                eventEmitter.once.apply(eventEmitter, arguments);\n                return this;\n            },\n            emit: function () {\n                eventEmitter.emit.apply(eventEmitter, arguments);\n                return this;\n            },\n            off: function () {\n                eventEmitter.off.apply(eventEmitter, arguments);\n                return this;\n            },\n        });\n\n        return alfrescoPromise;\n    }\n}\n"]}