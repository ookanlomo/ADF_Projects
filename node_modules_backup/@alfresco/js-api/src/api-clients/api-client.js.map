{"version":3,"file":"api-client.js","sourceRoot":"","sources":["api-client.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;GAeG;;;AAKH,MAAsB,SAAS;IAI3B,IAAI,SAAS;QACT,OAAO,IAAI,CAAC,UAAU,CAAC;IAC3B,CAAC;IAID,YAAY,UAA+C;QACvD,IAAI,CAAA,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,MAAM,MAAK,eAAe,EAAE;YAExC,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;SACjC;aAAM;YACH,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;SAChC;IACL,CAAC;IAED,IAAI,CAAU,OAAuB;QACjC,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAI,OAAO,CAAC,CAAC;IAC3C,CAAC;IAED,GAAG,CAAU,OAAuB;QAChC,OAAO,IAAI,CAAC,SAAS,CAAC,GAAG,CAAI,OAAO,CAAC,CAAC;IAC1C,CAAC;IAED,GAAG,CAAU,OAAuB;QAChC,OAAO,IAAI,CAAC,SAAS,CAAC,GAAG,CAAI,OAAO,CAAC,CAAC;IAC1C,CAAC;IAED,MAAM,CAAW,OAAuB;QACpC,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IAC1C,CAAC;IAED,YAAY,CAAC,KAAa,EAAE,UAAkB;QAC1C,OAAO,iBAAiB,KAAK,OAAO,UAAU,EAAE,CAAC;IACrD,CAAC;CACJ;AAtCD,8BAsCC","sourcesContent":["/*!\n * @license\n * Copyright Â© 2005-2023 Hyland Software, Inc. and its affiliates. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AlfrescoApiType } from '../to-deprecate/alfresco-api-type';\nimport { LegacyHttpClient, RequestOptions } from './http-client.interface';\n\nexport abstract class ApiClient {\n    protected alfrescoApi: AlfrescoApiType;\n    protected httpClient: LegacyHttpClient;\n\n    get apiClient(): LegacyHttpClient {\n        return this.httpClient;\n    }\n\n    constructor(legacyApi?: AlfrescoApiType);\n    constructor(httpClient: LegacyHttpClient);\n    constructor(httpClient?: AlfrescoApiType & LegacyHttpClient) {\n        if (httpClient?.__type === 'legacy-client') {\n            // TODO: remove legacyApi?: AlfrescoApi option and clean up this code. BREAKING CHANGE!\n            this.alfrescoApi = httpClient;\n        } else {\n            this.httpClient = httpClient;\n        }\n    }\n\n    post<T = any>(options: RequestOptions): Promise<T> {\n        return this.apiClient.post<T>(options);\n    }\n\n    put<T = any>(options: RequestOptions): Promise<T> {\n        return this.apiClient.put<T>(options);\n    }\n\n    get<T = any>(options: RequestOptions): Promise<T> {\n        return this.apiClient.get<T>(options);\n    }\n\n    delete<T = void>(options: RequestOptions): Promise<T> {\n        return this.apiClient.delete(options);\n    }\n\n    errorMessage(param: string, methodName: string) {\n        return `Missing param ${param} in ${methodName}`;\n    }\n}\n"]}