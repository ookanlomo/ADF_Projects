"use strict";
/*!
 * @license
 * Copyright Â© 2005-2023 Hyland Software, Inc. and its affiliates. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SecurityGroupsApi = void 0;
const base_api_1 = require("./base.api");
const securityGroupPaging_1 = require("../model/securityGroupPaging");
const securityGroupEntry_1 = require("../model/securityGroupEntry");
class SecurityGroupsApi extends base_api_1.BaseApi {
    getSecurityGroups(opts) {
        let postBody = null;
        let pathParams = {};
        let queryParams = {
            'include': opts['include'],
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems']
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/security-groups', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, securityGroupPaging_1.SecurityGroupPaging);
    }
    createSecurityGroup(securityGroupBody, opts) {
        let postBody = securityGroupBody;
        let pathParams = {};
        let queryParams = {
            'include': opts['include'],
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/security-groups', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, securityGroupEntry_1.SecurityGroupEntry);
    }
    getSecurityGroupInfo(securityGroupId, opts) {
        let postBody = null;
        let pathParams = {
            'securityGroupId': securityGroupId,
        };
        let queryParams = {
            'include': opts['include'],
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/security-groups/{securityGroupId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, securityGroupEntry_1.SecurityGroupEntry);
    }
    updateSecurityGroup(securityGroupId, securityGroupBody, opts) {
        let postBody = securityGroupBody;
        let pathParams = {
            securityGroupId: securityGroupId,
        };
        let queryParams = {
            'include': opts['include'],
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/security-groups/{securityGroupId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, securityGroupEntry_1.SecurityGroupEntry);
    }
    deleteSecurityGroup(securityGroupId) {
        let postBody = null;
        let pathParams = {
            'securityGroupId': securityGroupId,
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/security-groups/{securityGroupId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
}
exports.SecurityGroupsApi = SecurityGroupsApi;
//# sourceMappingURL=../../../../../src/api/gs-classification-rest-api/api/securityGroups.api.js.map