{"version":3,"file":"securityGroups.api.js","sourceRoot":"","sources":["securityGroups.api.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;GAeG;;;AAEH,yCAAqC;AACrC,sEAAmE;AAEnE,oEAAiE;AAMjE,MAAa,iBAAkB,SAAQ,kBAAO;IAQ1C,iBAAiB,CAAC,IAAU;QACxB,IAAI,QAAQ,GAAG,IAAI,CAAC;QACpB,IAAI,UAAU,GAAG,EAAE,CAAC;QACpB,IAAI,WAAW,GAAG;YACd,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC;YAC1B,WAAW,EAAE,IAAI,CAAC,WAAW,CAAC;YAC9B,UAAU,EAAE,IAAI,CAAC,UAAU,CAAC;SAC/B,CAAC;QACF,IAAI,YAAY,GAAG,EAAE,CAAC;QACtB,IAAI,UAAU,GAAG,EAAE,CAAC;QACpB,IAAI,YAAY,GAAG,CAAC,kBAAkB,CAAC,CAAC;QACxC,IAAI,OAAO,GAAG,CAAC,kBAAkB,CAAC,CAAC;QACnC,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,kBAAkB,EAAE,KAAK,EAAE,UAAU,EAAE,WAAW,EAAE,YAAY,EAAE,UAAU,EAAE,QAAQ,EAAE,YAAY,EAAE,OAAO,EAAE,yCAAmB,CAAC,CAAC;IACtK,CAAC;IAQD,mBAAmB,CAAC,iBAAoC,EAAE,IAAU;QAChE,IAAI,QAAQ,GAAG,iBAAiB,CAAC;QACjC,IAAI,UAAU,GAAG,EAAE,CAAC;QACpB,IAAI,WAAW,GAAG;YACd,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC;SAC7B,CAAC;QACF,IAAI,YAAY,GAAG,EAAE,CAAC;QACtB,IAAI,UAAU,GAAG,EAAE,CAAC;QACpB,IAAI,YAAY,GAAG,CAAC,kBAAkB,CAAC,CAAC;QACxC,IAAI,OAAO,GAAG,CAAC,kBAAkB,CAAC,CAAC;QACnC,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,kBAAkB,EAAE,MAAM,EAAE,UAAU,EAAE,WAAW,EAAE,YAAY,EAAE,UAAU,EAAE,QAAQ,EAAE,YAAY,EAAE,OAAO,EAAE,uCAAkB,CAAC,CAAC;IACtK,CAAC;IAOD,oBAAoB,CAAC,eAAuB,EAAE,IAAU;QACpD,IAAI,QAAQ,GAAG,IAAI,CAAC;QACpB,IAAI,UAAU,GAAG;YACb,iBAAiB,EAAE,eAAe;SACrC,CAAC;QACF,IAAI,WAAW,GAAG;YACd,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC;SAC7B,CAAC;QACF,IAAI,YAAY,GAAG,EAAE,CAAC;QACtB,IAAI,UAAU,GAAG,EAAE,CAAC;QACpB,IAAI,YAAY,GAAG,CAAC,kBAAkB,CAAC,CAAC;QACxC,IAAI,OAAO,GAAG,CAAC,kBAAkB,CAAC,CAAC;QACnC,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CACzB,oCAAoC,EACpC,KAAK,EACL,UAAU,EACV,WAAW,EACX,YAAY,EACZ,UAAU,EACV,QAAQ,EACR,YAAY,EACZ,OAAO,EACP,uCAAkB,CACrB,CAAC;IACN,CAAC;IAQD,mBAAmB,CAAC,eAAuB,EAAE,iBAAoC,EAAE,IAAU;QACzF,IAAI,QAAQ,GAAG,iBAAiB,CAAC;QACjC,IAAI,UAAU,GAAG;YACb,eAAe,EAAE,eAAe;SACnC,CAAC;QACF,IAAI,WAAW,GAAG;YACd,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC;SAC7B,CAAC;QACF,IAAI,YAAY,GAAG,EAAE,CAAC;QACtB,IAAI,UAAU,GAAG,EAAE,CAAC;QACpB,IAAI,YAAY,GAAG,CAAC,kBAAkB,CAAC,CAAC;QACxC,IAAI,OAAO,GAAG,CAAC,kBAAkB,CAAC,CAAC;QACnC,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CACzB,oCAAoC,EACpC,KAAK,EACL,UAAU,EACV,WAAW,EACX,YAAY,EACZ,UAAU,EACV,QAAQ,EACR,YAAY,EACZ,OAAO,EACP,uCAAkB,CACrB,CAAC;IACN,CAAC;IAOD,mBAAmB,CAAC,eAAuB;QACvC,IAAI,QAAQ,GAAG,IAAI,CAAC;QACpB,IAAI,UAAU,GAAG;YACb,iBAAiB,EAAE,eAAe;SACrC,CAAC;QACF,IAAI,WAAW,GAAG,EAAE,CAAC;QACrB,IAAI,YAAY,GAAG,EAAE,CAAC;QACtB,IAAI,UAAU,GAAG,EAAE,CAAC;QACpB,IAAI,YAAY,GAAG,CAAC,kBAAkB,CAAC,CAAC;QACxC,IAAI,OAAO,GAAG,CAAC,kBAAkB,CAAC,CAAC;QACnC,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,oCAAoC,EAAE,QAAQ,EAAE,UAAU,EAAE,WAAW,EAAE,YAAY,EAAE,UAAU,EAAE,QAAQ,EAAE,YAAY,EAAE,OAAO,CAAC,CAAC;IACtK,CAAC;CACJ;AA1HD,8CA0HC","sourcesContent":["/*!\n * @license\n * Copyright Â© 2005-2023 Hyland Software, Inc. and its affiliates. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BaseApi } from './base.api';\nimport { SecurityGroupPaging } from '../model/securityGroupPaging';\nimport { SecurityGroupBody } from '../model/securityGroupBody';\nimport { SecurityGroupEntry } from '../model/securityGroupEntry';\n\n/**\n * SecurityGroupsApi service.\n * @module SecurityGroupsApi\n */\nexport class SecurityGroupsApi extends BaseApi {\n    /**\n     * Get All security groups\n     * @param opts.include Additional information about the security group\n     * @param opts.skipCount The number of entities that exist in the collection before those included in this list.\n     * @param opts.maxItems The maximum number of items to return in the list.\n     * @return Promise<SecurityGroupPaging>\n     */\n    getSecurityGroups(opts?: any): Promise<SecurityGroupPaging> {\n        let postBody = null;\n        let pathParams = {};\n        let queryParams = {\n            'include': opts['include'],\n            'skipCount': opts['skipCount'],\n            'maxItems': opts['maxItems']\n        };\n        let headerParams = {};\n        let formParams = {};\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n        return this.apiClient.callApi('/security-groups', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SecurityGroupPaging);\n    }\n\n    /**\n     * Create security group\n     * @param securityGroupBody securityGroupBody.\n     * @param include additional information about the security group\n     * @return Promise<SecurityGroupEntry>\n     */\n    createSecurityGroup(securityGroupBody: SecurityGroupBody, opts?: any): Promise<SecurityGroupEntry> {\n        let postBody = securityGroupBody;\n        let pathParams = {};\n        let queryParams = {\n            'include': opts['include'],\n        };\n        let headerParams = {};\n        let formParams = {};\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n        return this.apiClient.callApi('/security-groups', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SecurityGroupEntry);\n    }\n    /**\n     * Get a security groups information\n     * @param securityGroupId The Key of Security Group id for which info is required\n     * @param opts.include additional information about the security group\n     * @return Promise<SecurityGroupEntry>\n     */\n    getSecurityGroupInfo(securityGroupId: string, opts?: any): Promise<SecurityGroupEntry> {\n        let postBody = null;\n        let pathParams = {\n            'securityGroupId': securityGroupId,\n        };\n        let queryParams = {\n            'include': opts['include'],\n        };\n        let headerParams = {};\n        let formParams = {};\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n        return this.apiClient.callApi(\n            '/security-groups/{securityGroupId}',\n            'GET',\n            pathParams,\n            queryParams,\n            headerParams,\n            formParams,\n            postBody,\n            contentTypes,\n            accepts,\n            SecurityGroupEntry\n        );\n    }\n    /**\n     * Update a security groups information\n     * @param securityGroupId The Key of Security Group id for which info is required\n     * @param securityGroupBody SecurityGroupBody\n     * @param opts.include additional information about the security group\n     * @return Promise<SecurityGroupEntry>\n     */\n    updateSecurityGroup(securityGroupId: string, securityGroupBody: SecurityGroupBody, opts?: any): Promise<SecurityGroupEntry> {\n        let postBody = securityGroupBody;\n        let pathParams = {\n            securityGroupId: securityGroupId,\n        };\n        let queryParams = {\n            'include': opts['include'],\n        };\n        let headerParams = {};\n        let formParams = {};\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n        return this.apiClient.callApi(\n            '/security-groups/{securityGroupId}',\n            'PUT',\n            pathParams,\n            queryParams,\n            headerParams,\n            formParams,\n            postBody,\n            contentTypes,\n            accepts,\n            SecurityGroupEntry\n        );\n    }\n\n    /**\n     * Delete security group\n     * @param securityGroupId The key for the security group id.\n     * @return Promise<SecurityMarkEntry>\n     */\n    deleteSecurityGroup(securityGroupId: string): Promise<any> {\n        let postBody = null;\n        let pathParams = {\n            'securityGroupId': securityGroupId,\n        };\n        let queryParams = {};\n        let headerParams = {};\n        let formParams = {};\n        let contentTypes = ['application/json'];\n        let accepts = ['application/json'];\n        return this.apiClient.callApi('/security-groups/{securityGroupId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);\n    }\n}\n"]}