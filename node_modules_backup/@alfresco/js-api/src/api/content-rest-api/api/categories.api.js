"use strict";
/*!
 * @license
 * Copyright Â© 2005-2023 Hyland Software, Inc. and its affiliates. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CategoriesApi = void 0;
const base_api_1 = require("./base.api");
const assert_1 = require("../../../assert");
const alfrescoApiClient_1 = require("../../../alfrescoApiClient");
const categoryPaging_1 = require("../model/categoryPaging");
const categoryEntry_1 = require("../model/categoryEntry");
class CategoriesApi extends base_api_1.BaseApi {
    getSubcategories(categoryId, opts) {
        (0, assert_1.throwIfNotDefined)(categoryId, 'categoryId');
        opts = opts || {};
        const postBody = null;
        const pathParams = {
            'categoryId': categoryId
        };
        const queryParams = {
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'fields': (0, alfrescoApiClient_1.buildCollectionParam)(opts['fields'], 'csv'),
            'include': (0, alfrescoApiClient_1.buildCollectionParam)(opts['include'], 'csv')
        };
        const headerParams = {};
        const formParams = {};
        const contentTypes = ['application/json'];
        const accepts = ['application/json'];
        return this.apiClient.callApi('/categories/{categoryId}/subcategories', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, categoryPaging_1.CategoryPaging);
    }
    getCategory(categoryId, opts) {
        (0, assert_1.throwIfNotDefined)(categoryId, 'categoryId');
        opts = opts || {};
        const postBody = null;
        const pathParams = {
            'categoryId': categoryId
        };
        const queryParams = {
            'fields': (0, alfrescoApiClient_1.buildCollectionParam)(opts['fields'], 'csv'),
            'include': (0, alfrescoApiClient_1.buildCollectionParam)(opts['include'], 'csv')
        };
        const headerParams = {};
        const formParams = {};
        const contentTypes = ['application/json'];
        const accepts = ['application/json'];
        return this.apiClient.callApi('/categories/{categoryId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, categoryEntry_1.CategoryEntry);
    }
    getCategoryLinksForNode(nodeId, opts) {
        (0, assert_1.throwIfNotDefined)(nodeId, 'nodeId');
        opts = opts || {};
        const postBody = null;
        const pathParams = {
            'nodeId': nodeId
        };
        const queryParams = {
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'fields': (0, alfrescoApiClient_1.buildCollectionParam)(opts['fields'], 'csv'),
            'include': (0, alfrescoApiClient_1.buildCollectionParam)(opts['include'], 'csv')
        };
        const headerParams = {};
        const formParams = {};
        const contentTypes = ['application/json'];
        const accepts = ['application/json'];
        return this.apiClient.callApi('/nodes/{nodeId}/category-links', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, categoryPaging_1.CategoryPaging);
    }
    deleteCategory(categoryId) {
        (0, assert_1.throwIfNotDefined)(categoryId, 'categoryId');
        const postBody = null;
        const pathParams = {
            'categoryId': categoryId
        };
        const queryParams = {};
        const headerParams = {};
        const formParams = {};
        const contentTypes = ['application/json'];
        const accepts = ['application/json'];
        return this.apiClient.callApi('/categories/{categoryId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    unlinkNodeFromCategory(nodeId, categoryId) {
        (0, assert_1.throwIfNotDefined)(nodeId, 'nodeId');
        (0, assert_1.throwIfNotDefined)(categoryId, 'categoryId');
        const postBody = null;
        const pathParams = {
            'nodeId': nodeId,
            'categoryId': categoryId
        };
        const queryParams = {};
        const headerParams = {};
        const formParams = {};
        const contentTypes = ['application/json'];
        const accepts = ['application/json'];
        return this.apiClient.callApi('/nodes/{nodeId}/category-links/{categoryId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    updateCategory(categoryId, categoryBodyUpdate, opts) {
        (0, assert_1.throwIfNotDefined)(categoryId, 'categoryId');
        (0, assert_1.throwIfNotDefined)(categoryBodyUpdate, 'categoryBodyUpdate');
        opts = opts || {};
        const postBody = categoryBodyUpdate;
        const pathParams = {
            'categoryId': categoryId
        };
        const queryParams = {
            'fields': (0, alfrescoApiClient_1.buildCollectionParam)(opts['fields'], 'csv'),
            'include': (0, alfrescoApiClient_1.buildCollectionParam)(opts['include'], 'csv')
        };
        const headerParams = {};
        const formParams = {};
        const contentTypes = ['application/json'];
        const accepts = ['application/json'];
        return this.apiClient.callApi('/categories/{categoryId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, categoryEntry_1.CategoryEntry);
    }
    createSubcategories(categoryId, categoryBodyCreate, opts) {
        (0, assert_1.throwIfNotDefined)(categoryId, 'categoryId');
        (0, assert_1.throwIfNotDefined)(categoryBodyCreate, 'categoryBodyCreate');
        opts = opts || {};
        const postBody = categoryBodyCreate;
        const pathParams = {
            'categoryId': categoryId
        };
        const queryParams = {
            'fields': (0, alfrescoApiClient_1.buildCollectionParam)(opts['fields'], 'csv'),
            'include': (0, alfrescoApiClient_1.buildCollectionParam)(opts['include'], 'csv')
        };
        const headerParams = {};
        const formParams = {};
        const contentTypes = ['application/json'];
        const accepts = ['application/json'];
        return this.apiClient.callApi('/categories/{categoryId}/subcategories', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, categoryEntry_1.CategoryEntry);
    }
    linkNodeToCategory(nodeId, categoryLinkBodyCreate, opts) {
        (0, assert_1.throwIfNotDefined)(nodeId, 'nodeId');
        (0, assert_1.throwIfNotDefined)(categoryLinkBodyCreate, 'categoryLinkBodyCreate');
        opts = opts || {};
        const postBody = categoryLinkBodyCreate;
        const pathParams = {
            'nodeId': nodeId
        };
        const queryParams = {
            'fields': (0, alfrescoApiClient_1.buildCollectionParam)(opts['fields'], 'csv'),
            'include': (0, alfrescoApiClient_1.buildCollectionParam)(opts['include'], 'csv')
        };
        const headerParams = {};
        const formParams = {};
        const contentTypes = ['application/json'];
        const accepts = ['application/json'];
        return this.apiClient.callApi('/nodes/{nodeId}/category-links', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, categoryEntry_1.CategoryEntry);
    }
}
exports.CategoriesApi = CategoriesApi;
//# sourceMappingURL=../../../../../src/api/content-rest-api/api/categories.api.js.map