{"version":3,"file":"alfresco-api-type.js","sourceRoot":"","sources":["alfresco-api-type.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;GAeG","sourcesContent":["/*!\n * @license\n * Copyright Â© 2005-2023 Hyland Software, Inc. and its affiliates. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AlfrescoApiConfig } from '../alfrescoApiConfig';\nimport { LegacyHttpClient } from '../api-clients/http-client.interface';\n\nexport interface LegacyTicketApi {\n    getAlfTicket(ticket: string): string;\n}\n\n// Extracted from existing AlfrescoApi:\nexport interface AlfrescoApiType {\n    __type: string;\n    config: AlfrescoApiConfig;\n    contentClient: LegacyHttpClient & LegacyTicketApi;\n    contentPrivateClient: LegacyHttpClient & LegacyTicketApi;\n    processClient: LegacyHttpClient;\n    searchClient: LegacyHttpClient;\n    discoveryClient: LegacyHttpClient;\n    gsClient: LegacyHttpClient;\n    authClient: LegacyHttpClient;\n    processAuth: LegacyHttpClient;\n\n    setConfig(config: AlfrescoApiConfig): void;\n    changeWithCredentialsConfig(withCredentials: boolean): void;\n    changeCsrfConfig(disableCsrf: boolean): void;\n    changeEcmHost(hostEcm: string): void;\n    changeBpmHost(hostBpm: string): void;\n    login(username: string, password: string): Promise<any>;\n    isCredentialValid(credential: string): boolean;\n    implicitLogin(): Promise<any>;\n    loginTicket(ticketEcm: string, ticketBpm: string): Promise<any>;\n    logout(): Promise<any>;\n    isLoggedIn(): boolean;\n    isBpmLoggedIn(): boolean;\n    isEcmLoggedIn(): boolean;\n    getBpmUsername(): string;\n    getEcmUsername(): string;\n    refreshToken(): Promise<string>;\n    getTicketAuth(): string;\n    setTicket(ticketEcm: string, TicketBpm: string): void;\n    invalidateSession(): void;\n    getTicketBpm(): string;\n    getTicketEcm(): string;\n    getTicket(): string[];\n    isBpmConfiguration(): boolean;\n    isEcmConfiguration(): boolean;\n    isOauthConfiguration(): boolean;\n    isPublicUrl(): boolean;\n    isEcmBpmConfiguration(): boolean;\n    reply(event: string, callback?: any): void;\n}\n"]}